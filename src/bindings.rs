/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe {
            *byte = Self::change_bit(*byte, index, val);
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };

            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const HUINT_MIN: u32 = 0;
pub const UINT1_MIN: u32 = 0;
pub const UINT2_MIN: u32 = 0;
pub const UINT4_MIN: u32 = 0;
pub const INT4_8_FORMAT: &[u8; 4] = b"I64\0";
pub const UINT4_8_MIN: u32 = 0;
pub const UINT4_8_FORMAT: &[u8; 4] = b"I64\0";
pub const HLONG_FORMAT: &[u8; 4] = b"I64\0";
pub const LONG_FORMAT: &[u8; 4] = b"I64\0";
pub const HULONG_MIN: u32 = 0;
pub const HINT8_FORMAT: &[u8; 4] = b"I64\0";
pub const HUINT8_MIN: u32 = 0;
pub const UNDEF_PAR: u32 = 0;
pub const LONG_PAR: u32 = 1;
pub const DOUBLE_PAR: u32 = 2;
pub const STRING_PAR: u32 = 4;
pub const HANDLE_PAR: u32 = 16;
pub const INT_PAR: u32 = 1;
pub const MIXED_PAR: u32 = 8;
pub const MAX_TUPLE_TYPE: u32 = 16;
pub const ANY_ELEM: u32 = 23;
pub const ANY_TUPLE: u32 = 31;
pub const POINTER_PAR: u32 = 64;
pub const TUPLE_PAR: u32 = 128;
pub const MAX_PAR: u32 = 16;
pub const MAX_TUPLE_LENGTH: u32 = 1000000;
pub const MAX_STRING: u32 = 1024;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const UNDEF_IMAGE: u32 = 0;
pub const BYTE_IMAGE: u32 = 1;
pub const INT4_IMAGE: u32 = 2;
pub const LONG_IMAGE: u32 = 2;
pub const FLOAT_IMAGE: u32 = 4;
pub const DIR_IMAGE: u32 = 8;
pub const CYCLIC_IMAGE: u32 = 16;
pub const INT1_IMAGE: u32 = 32;
pub const COMPLEX_IMAGE: u32 = 128;
pub const INT2_IMAGE: u32 = 512;
pub const UINT2_IMAGE: u32 = 1024;
pub const VF_IMAGE: u32 = 2048;
pub const INT8_IMAGE: u32 = 4096;
pub const VF_ABSOLUTE: u32 = 0;
pub const VF_RELATIVE: u32 = 1;
pub const LD_MAX_FORMAT: u32 = 15;
pub const MAX_FORMAT: u32 = 32768;
pub const RL_LENGTH: u32 = 1;
pub const DEF_RL_LENGTH: u32 = 50000;
pub const OBJ_PER_PROC: u32 = 5000;
pub const FILE_TRANS_SIZE: u32 = 16384;
pub const MAX_FILES: u32 = 20;
pub const MAX_EDGE_LENGTH1: u32 = 101;
pub const MAX_CLUSTER: u32 = 1024;
pub const MAX_CONVOL: u32 = 50000;
pub const MAX_IMAGE_DIR: u32 = 16384;
pub const MAX_GRAPHIC_COLOR: u32 = 64;
pub const MAX_COLOR_NAME_LENGTH: u32 = 40;
pub const HALCONROOT: &[u8; 11] = b"HALCONROOT\0";
pub const HALCONIMAGES: &[u8; 13] = b"HALCONIMAGES\0";
pub const HALCONHELP: &[u8; 11] = b"HALCONHELP\0";
pub const HALCONSPY: &[u8; 10] = b"HALCONSPY\0";
pub const HALCONEXTENSIONS: &[u8; 17] = b"HALCONEXTENSIONS\0";
pub const HALCONEXAMPLES: &[u8; 15] = b"HALCONEXAMPLES\0";
pub const MAX_INP_OBJ_PAR: u32 = 9;
pub const MAX_OUTP_OBJ_PAR: u32 = 9;
pub const MAX_INP_CTRL_PAR: u32 = 20;
pub const MAX_OUTP_CTRL_PAR: u32 = 20;
pub const MAX_CHAPTER: u32 = 2;
pub const MAX_CHAPTER_PROC: u32 = 300;
pub const MAX_KEY_NAME: u32 = 5;
pub const KEY_NAME_LENGTH: u32 = 20;
pub const MAX_BUFFER: u32 = 10;
pub const REGION: u32 = 0;
pub const CHORD: u32 = 0;
pub const IMAGE1: u32 = 1;
pub const IMAGE2: u32 = 2;
pub const IMAGE3: u32 = 3;
pub const IMAGE4: u32 = 4;
pub const IMAGE5: u32 = 5;
pub const IMAGE6: u32 = 6;
pub const IMAGE7: u32 = 7;
pub const IMAGE8: u32 = 8;
pub const REGION_ID: u32 = 1;
pub const IMAGE_ID: u32 = 2;
pub const OBJECT_ID: u32 = 3;
pub const TUPLE_ID: u32 = 4;
pub const XLD_CONTOUR_ID: u32 = 5;
pub const XLD_POLYGON_ID: u32 = 6;
pub const XLD_PARALLEL_ID: u32 = 7;
pub const XLD_MOD_PARALLEL_ID: u32 = 8;
pub const XLD_EXT_PARALLEL_ID: u32 = 9;
pub const MIN_XLD_ID: u32 = 5;
pub const MAX_XLD_ID: u32 = 9;
pub const TRAINF_EXT: &[u8; 4] = b"trf\0";
pub const OCR_EXT: &[u8; 4] = b"fnt\0";
pub const OCR_BOX_EXT: &[u8; 4] = b"obc\0";
pub const OCR_MLP_EXT: &[u8; 4] = b"omc\0";
pub const OCR_SVM_EXT: &[u8; 4] = b"osc\0";
pub const OCR_KNN_EXT: &[u8; 4] = b"onc\0";
pub const OCR_KNN_EXT_LEGACY: &[u8; 4] = b"okc\0";
pub const OCR_CNN_EXT: &[u8; 4] = b"occ\0";
pub const OCV_EXT: &[u8; 4] = b"ocv\0";
pub const PS_EXTENSION: &[u8; 3] = b"ps\0";
pub const TIFF_EXTENSION: &[u8; 5] = b"tiff\0";
pub const EXP_EXTENSION: &[u8; 4] = b"exp\0";
pub const IMAGE_EXTENSION: &[u8; 4] = b"ima\0";
pub const REGION_EXTENSION: &[u8; 4] = b"reg\0";
pub const FILTER_EXTENSION: &[u8; 4] = b"fil\0";
pub const LUT_EXTENSION: &[u8; 4] = b"lut\0";
pub const GREYSE_EXT: &[u8; 4] = b"gse\0";
pub const BMP_EXTENSION: &[u8; 4] = b"bmp\0";
pub const DEEP_LEARNING_EXTENSION: &[u8; 4] = b"hdl\0";
pub const DEEP_OCR_EXT: &[u8; 4] = b"hdo\0";
pub const MEMORY_BLOCK_EXT: &[u8; 4] = b"bin\0";
pub const ENCRYPTED_ITEM_EXT: &[u8; 5] = b"henc\0";
pub const DEEP_COUNTING_EXT: &[u8; 4] = b"hdc\0";
pub const DEEP_MATCHING_EXT: &[u8; 4] = b"dm3\0";
pub const PI: f64 = 3.141592653589793;
pub const PI_2: f64 = 1.5707963267948966;
pub const PI_4: f64 = 0.7853981633974483;
pub const DEFAULT_AGENTS_NR: u32 = 4;
pub const GV_WRITE_INFO: u32 = 0;
pub const GV_READ_INFO: u32 = 1;
pub const GV_INIT_INFO: u32 = 2;
pub const GV_GET_ADRESS: u32 = 3;
pub const GV_REALLOC_A: u32 = 4;
pub const GV_LOCK: u32 = 5;
pub const GV_UNLOCK: u32 = 6;
pub const GV_BOR_INFO: u32 = 7;
pub const GV_BAND_INFO: u32 = 8;
pub const GV_WRITE_REF: u32 = 9;
pub const GV_READ_REF: u32 = 10;
pub const CLOCK_MODE_PROCESSOR_TIME: u32 = 0;
pub const CLOCK_MODE_ELAPSED_TIME: u32 = 1;
pub const CLOCK_MODE_PERFORMANCE_COUNTER: u32 = 2;
pub const CLOCK_MODE_MULTIMEDIA_TIMER: u32 = 3;
pub const CLOCK_MODE_PROCESS_TIME: u32 = 4;
pub const OCR_TRAINFILE_VERSION1_0: u32 = 1;
pub const OCR_TRAINFILE_VERSION2_0: u32 = 2;
pub const OCR_TRAINFILE_VERSION3_0: u32 = 3;
pub const H_ENCODING_NATIVE: u32 = 1;
pub const H_ENCODING_UTF8: u32 = 2;
pub const H_ENCODING_HLIB: u32 = 3;
pub const H_ENCODING_ASCII: u32 = 4;
pub const H_ENCODING_SYSTEM: u32 = 5;
pub const H_ENCODING_AUTO: u32 = 6;
pub const H_ENCODING_LATIN1: u32 = 7;
pub const H_ENCODING_SHIFTJIS: u32 = 8;
pub const TIMER_MODE_ELAPSED_TIME: u32 = 0;
pub const TIMER_MODE_MULTIMEDIA_TIMER: u32 = 1;
pub const TIMER_MODE_PERFORMANCE_COUNTER: u32 = 2;
pub const H_MSG_OK: u32 = 2;
pub const H_MSG_TRUE: u32 = 2;
pub const H_MSG_FALSE: u32 = 3;
pub const H_MSG_VOID: u32 = 4;
pub const H_MSG_FAIL: u32 = 5;
pub const H_ERR_BREAK: u32 = 20;
pub const H_ERR_HEN_CANCEL: u32 = 21;
pub const H_ERR_CANCEL: u32 = 22;
pub const H_ERR_TIMEOUT_BREAK: u32 = 23;
pub const H_ERR_WIPT1: u32 = 1201;
pub const H_ERR_WIPT2: u32 = 1202;
pub const H_ERR_WIPT3: u32 = 1203;
pub const H_ERR_WIPT4: u32 = 1204;
pub const H_ERR_WIPT5: u32 = 1205;
pub const H_ERR_WIPT6: u32 = 1206;
pub const H_ERR_WIPT7: u32 = 1207;
pub const H_ERR_WIPT8: u32 = 1208;
pub const H_ERR_WIPT9: u32 = 1209;
pub const H_ERR_WIPT10: u32 = 1210;
pub const H_ERR_WIPT11: u32 = 1211;
pub const H_ERR_WIPT12: u32 = 1212;
pub const H_ERR_WIPT13: u32 = 1213;
pub const H_ERR_WIPT14: u32 = 1214;
pub const H_ERR_WIPT15: u32 = 1215;
pub const H_ERR_WIPT16: u32 = 1216;
pub const H_ERR_WIPT17: u32 = 1217;
pub const H_ERR_WIPT18: u32 = 1218;
pub const H_ERR_WIPT19: u32 = 1219;
pub const H_ERR_WIPT20: u32 = 1220;
pub const H_ERR_WIPV1: u32 = 1301;
pub const H_ERR_WIPV2: u32 = 1302;
pub const H_ERR_WIPV3: u32 = 1303;
pub const H_ERR_WIPV4: u32 = 1304;
pub const H_ERR_WIPV5: u32 = 1305;
pub const H_ERR_WIPV6: u32 = 1306;
pub const H_ERR_WIPV7: u32 = 1307;
pub const H_ERR_WIPV8: u32 = 1308;
pub const H_ERR_WIPV9: u32 = 1309;
pub const H_ERR_WIPV10: u32 = 1310;
pub const H_ERR_WIPV11: u32 = 1311;
pub const H_ERR_WIPV12: u32 = 1312;
pub const H_ERR_WIPV13: u32 = 1313;
pub const H_ERR_WIPV14: u32 = 1314;
pub const H_ERR_WIPV15: u32 = 1315;
pub const H_ERR_WIPV16: u32 = 1316;
pub const H_ERR_WIPV17: u32 = 1317;
pub const H_ERR_WIPV18: u32 = 1318;
pub const H_ERR_WIPV19: u32 = 1319;
pub const H_ERR_WIPV20: u32 = 1320;
pub const H_ERR_WCOMP: u32 = 1350;
pub const H_ERR_WGCOMP: u32 = 1351;
pub const H_ERR_WIPN1: u32 = 1401;
pub const H_ERR_WIPN2: u32 = 1402;
pub const H_ERR_WIPN3: u32 = 1403;
pub const H_ERR_WIPN4: u32 = 1404;
pub const H_ERR_WIPN5: u32 = 1405;
pub const H_ERR_WIPN6: u32 = 1406;
pub const H_ERR_WIPN7: u32 = 1407;
pub const H_ERR_WIPN8: u32 = 1408;
pub const H_ERR_WIPN9: u32 = 1409;
pub const H_ERR_WIPN10: u32 = 1410;
pub const H_ERR_WIPN11: u32 = 1411;
pub const H_ERR_WIPN12: u32 = 1412;
pub const H_ERR_WIPN13: u32 = 1413;
pub const H_ERR_WIPN14: u32 = 1414;
pub const H_ERR_WIPN15: u32 = 1415;
pub const H_ERR_WIPN16: u32 = 1416;
pub const H_ERR_WIPN17: u32 = 1417;
pub const H_ERR_WIPN18: u32 = 1418;
pub const H_ERR_WIPN19: u32 = 1419;
pub const H_ERR_WIPN20: u32 = 1420;
pub const H_ERR_IONTB: u32 = 1500;
pub const H_ERR_WION1: u32 = 1501;
pub const H_ERR_WION2: u32 = 1502;
pub const H_ERR_WION3: u32 = 1503;
pub const H_ERR_WION4: u32 = 1504;
pub const H_ERR_WION5: u32 = 1505;
pub const H_ERR_WION6: u32 = 1506;
pub const H_ERR_WION7: u32 = 1507;
pub const H_ERR_WION8: u32 = 1508;
pub const H_ERR_WION9: u32 = 1509;
pub const H_ERR_OONTB: u32 = 1510;
pub const H_ERR_WNP: u32 = 2000;
pub const H_ERR_HONI: u32 = 2001;
pub const H_ERR_WRKNN: u32 = 2002;
pub const H_ERR_LIC_NO_LICENSE: u32 = 2003;
pub const H_ERR_LIC_NO_MODULES: u32 = 2005;
pub const H_ERR_LIC_NO_LIC_OPER: u32 = 2006;
pub const H_ERR_LIC_BADPLATFORM: u32 = 2008;
pub const H_ERR_LIC_BADVENDORKEY: u32 = 2009;
pub const H_ERR_LIC_BADSYSDATE: u32 = 2021;
pub const H_ERR_LIC_BAD_VERSION: u32 = 2022;
pub const H_ERR_LIC_CANTCONNECT: u32 = 2024;
pub const H_ERR_LIC_MAXSESSIONS: u32 = 2028;
pub const H_ERR_LIC_MAXUSERS: u32 = 2029;
pub const H_ERR_LIC_NO_SERVER_IN_FILE: u32 = 2030;
pub const H_ERR_LIC_NOFEATURE: u32 = 2031;
pub const H_ERR_LIC_OLDVER: u32 = 2033;
pub const H_ERR_LIC_PLATNOTLIC: u32 = 2034;
pub const H_ERR_LIC_SERVBUSY: u32 = 2035;
pub const H_ERR_LIC_NOCONFFILE: u32 = 2036;
pub const H_ERR_LIC_BADFILE: u32 = 2037;
pub const H_ERR_LIC_NOSERVER: u32 = 2038;
pub const H_ERR_LIC_NOTTHISHOST: u32 = 2041;
pub const H_ERR_LIC_LONGGONE: u32 = 2042;
pub const H_ERR_LIC_BADDATE: u32 = 2043;
pub const H_ERR_LIC_BADCOMM: u32 = 2044;
pub const H_ERR_LIC_BADHOST: u32 = 2045;
pub const H_ERR_LIC_CANTWRITE: u32 = 2047;
pub const H_ERR_LIC_SERVLONGGONE: u32 = 2051;
pub const H_ERR_LIC_TOOMANY: u32 = 2052;
pub const H_ERR_LIC_CANTFINDETHER: u32 = 2055;
pub const H_ERR_LIC_NOREADLIC: u32 = 2056;
pub const H_ERR_LIC_DATE_TOOBIG: u32 = 2067;
pub const H_ERR_LIC_NOSERVRESP: u32 = 2069;
pub const H_ERR_LIC_SETSOCKFAIL: u32 = 2075;
pub const H_ERR_LIC_BADCHECKSUM: u32 = 2076;
pub const H_ERR_LIC_INTERNAL_ERROR: u32 = 2082;
pub const H_ERR_LIC_NOSERVCAP: u32 = 2087;
pub const H_ERR_LIC_POOL: u32 = 2091;
pub const H_ERR_LIC_NODONGLE: u32 = 2300;
pub const H_ERR_LIC_NODONGLEDRIVER: u32 = 2301;
pub const H_ERR_LIC_TIMEOUT: u32 = 2318;
pub const H_ERR_LIC_INVALID_CERTIFICATE: u32 = 2321;
pub const H_ERR_LIC_INVALID_TLS_CERTIFICATE: u32 = 2335;
pub const H_ERR_LIC_BAD_ACTREQ: u32 = 2339;
pub const H_ERR_LIC_NOT_ALLOWED: u32 = 2345;
pub const H_ERR_LIC_ACTIVATION: u32 = 2348;
pub const H_ERR_LIC_NO_CM_RUNTIME: u32 = 2379;
pub const H_ERR_LIC_CM_RUNTIME_TOO_OLD: u32 = 2380;
pub const H_ERR_LIC_WRONG_EDITION: u32 = 2381;
pub const H_ERR_LIC_UNKNOWN_FLAGS: u32 = 2382;
pub const H_ERR_LIC_PREVIEW_EXPIRED: u32 = 2383;
pub const H_ERR_LIC_NEWVER: u32 = 2384;
pub const H_ERR_LIC_RANGE1_BEGIN: u32 = 2003;
pub const H_ERR_LIC_RANGE1_END: u32 = 2091;
pub const H_ERR_LIC_RANGE2_BEGIN: u32 = 2300;
pub const H_ERR_LIC_RANGE2_END: u32 = 2384;
pub const H_ERR_WOOPI: u32 = 2100;
pub const H_ERR_WIOPI: u32 = 2101;
pub const H_ERR_WOI: u32 = 2102;
pub const H_ERR_WRCN: u32 = 2103;
pub const H_ERR_WRRN: u32 = 2104;
pub const H_ERR_AUDI: u32 = 2105;
pub const H_ERR_WIWI: u32 = 2106;
pub const H_ERR_WIHE: u32 = 2107;
pub const H_ERR_ICUNDEF: u32 = 2108;
pub const H_ERR_IDBD: u32 = 2200;
pub const H_ERR_WICPI: u32 = 2201;
pub const H_ERR_DBDU: u32 = 2202;
pub const H_ERR_PNTL: u32 = 2203;
pub const H_ERR_UEXTNI: u32 = 2205;
pub const H_ERR_NPTL: u32 = 2206;
pub const H_ERR_NSP: u32 = 2207;
pub const H_ERR_ICHV: u32 = 2211;
pub const H_ERR_ICOI: u32 = 2212;
pub const H_ERR_XPKG_WXID: u32 = 2220;
pub const H_ERR_XPKG_WOID: u32 = 2221;
pub const H_ERR_XPKG_WOIID: u32 = 2222;
pub const H_ERR_CTPL_WTYP: u32 = 2400;
pub const H_ERR_CPAR_WTYP: u32 = 2401;
pub const H_ERR_CTPL_WIDX: u32 = 2402;
pub const H_ERR_WFV: u32 = 2403;
pub const H_ERR_WRONG_HANDLE_TYPE: u32 = 2404;
pub const H_ERR_WVTYP: u32 = 2410;
pub const H_ERR_WVDIM: u32 = 2411;
pub const H_ERR_WHDL: u32 = 2450;
pub const H_ERR_WID: u32 = 2451;
pub const H_ERR_IDOOR: u32 = 2452;
pub const H_ERR_HANDLE_NULL: u32 = 2453;
pub const H_ERR_HANDLE_CLEARED: u32 = 2454;
pub const H_ERR_HANDLE_NOSER: u32 = 2455;
pub const H_ERR_HANDLE_CYCLES: u32 = 2456;
pub const H_ERR_WT_CTRL_EXPECTED: u32 = 2460;
pub const H_ERR_WT_ICONIC_EXPECTED: u32 = 2461;
pub const H_ERR_XPI_INIT_NOT_CALLED: u32 = 2500;
pub const H_ERR_XPI_NO_INIT_FOUND: u32 = 2501;
pub const H_ERR_XPI_UNRES: u32 = 2502;
pub const H_ERR_XPI_HLIB_TOO_OLD: u32 = 2503;
pub const H_ERR_XPI_XPI_TOO_OLD: u32 = 2504;
pub const H_ERR_XPI_MAJOR_TOO_SMALL: u32 = 2505;
pub const H_ERR_XPI_MINOR_TOO_SMALL: u32 = 2506;
pub const H_ERR_XPI_INT_WRONG_MAJOR: u32 = 2507;
pub const H_ERR_XPI_UNKNOW_HLIB_VER: u32 = 2508;
pub const H_ERR_HW_WFF: u32 = 2800;
pub const H_ERR_HW_WFV: u32 = 2801;
pub const H_ERR_HW_RF: u32 = 2802;
pub const H_ERR_HW_WF: u32 = 2803;
pub const H_ERR_HW_TF: u32 = 2804;
pub const H_ERR_HW_CPU: u32 = 2805;
pub const H_ERR_HW_AOP: u32 = 2806;
pub const H_ERR_HW_HVAR: u32 = 2807;
pub const H_ERR_HW_HARCH: u32 = 2808;
pub const H_ERR_HW_HOP: u32 = 2809;
pub const H_ERR_HW_WAOPM: u32 = 2810;
pub const H_ERR_HW_WTD: u32 = 2811;
pub const H_ERR_HW_IE: u32 = 2812;
pub const H_ERR_HW_CANCEL: u32 = 2813;
pub const H_ERR_GV_WA: u32 = 2830;
pub const H_ERR_GV_NC: u32 = 2831;
pub const H_ERR_GV_NG: u32 = 2832;
pub const H_ERR_HM_NT: u32 = 2835;
pub const H_ERR_HM_NA: u32 = 2837;
pub const H_ERR_AG_CN: u32 = 2838;
pub const H_ERR_AG_NC: u32 = 2839;
pub const H_ERR_AG_IN: u32 = 2840;
pub const H_ERR_AG_NT: u32 = 2841;
pub const H_ERR_AG_HW: u32 = 2842;
pub const H_ERR_AG_II: u32 = 2843;
pub const H_ERR_AG_IK: u32 = 2844;
pub const H_ERR_AG_WV: u32 = 2845;
pub const H_ERR_AG_WH: u32 = 2846;
pub const H_ERR_AG_KC: u32 = 2847;
pub const H_ERR_AG_CT: u32 = 2848;
pub const H_ERR_AG_MT: u32 = 2849;
pub const H_ERR_AG_WK: u32 = 2850;
pub const H_ERR_AG_WW: u32 = 2851;
pub const H_ERR_AG_WA: u32 = 2852;
pub const H_ERR_AG_WE: u32 = 2853;
pub const H_ERR_AG_NU: u32 = 2854;
pub const H_ERR_AG_NE: u32 = 2855;
pub const H_ERR_AG_RR: u32 = 2856;
pub const H_ERR_AG_CR: u32 = 2857;
pub const H_ERR_AG_RN: u32 = 2858;
pub const H_ERR_AG_TILT: u32 = 2859;
pub const H_ERR_WRT: u32 = 2860;
pub const H_ERR_WRS: u32 = 2861;
pub const H_ERR_UNKPT: u32 = 2862;
pub const H_ERR_UNKPARVAL: u32 = 2863;
pub const H_ERR_CTRL_WPP: u32 = 2864;
pub const H_ERR_GETTI: u32 = 2867;
pub const H_ERR_GETCPUNUM: u32 = 2868;
pub const H_ERR_TMPFNF: u32 = 2869;
pub const H_ERR_MQCNCL: u32 = 2890;
pub const H_ERR_MQOVL: u32 = 2891;
pub const H_ERR_MQCLEAR: u32 = 2892;
pub const H_ERR_M_WRFILE: u32 = 2893;
pub const H_ERR_DICT_KEY: u32 = 2894;
pub const H_ERR_DICT_TUPLE_LENGTH: u32 = 2895;
pub const H_ERR_DICT_TUPLE_TYPE: u32 = 2896;
pub const H_ERR_DICT_INVALID_INDEX: u32 = 2897;
pub const H_ERR_PTHRD_SCHED: u32 = 2900;
pub const H_ERR_SCHED_GAFF: u32 = 2901;
pub const H_ERR_SCHED_SAFF: u32 = 2902;
pub const H_ERR_CO_WSO: u32 = 2950;
pub const H_ERR_CO_WOCO: u32 = 2952;
pub const H_ERR_CO_IOPNI: u32 = 2953;
pub const H_ERR_CO_ICPNI: u32 = 2954;
pub const H_ERR_CO_OOPNI: u32 = 2955;
pub const H_ERR_CO_OCPNI: u32 = 2956;
pub const H_ERR_PTHRD_CR: u32 = 2970;
pub const H_ERR_PTHRD_DT: u32 = 2971;
pub const H_ERR_PTHRD_JO: u32 = 2972;
pub const H_ERR_PTHRD_MI: u32 = 2973;
pub const H_ERR_PTHRD_MD: u32 = 2974;
pub const H_ERR_PTHRD_ML: u32 = 2975;
pub const H_ERR_PTHRD_MU: u32 = 2976;
pub const H_ERR_PTHRD_CS: u32 = 2977;
pub const H_ERR_PTHRD_CW: u32 = 2978;
pub const H_ERR_PTHRD_CI: u32 = 2979;
pub const H_ERR_PTHRD_CD: u32 = 2980;
pub const H_ERR_PTHRD_ES: u32 = 2981;
pub const H_ERR_PTHRD_EW: u32 = 2982;
pub const H_ERR_PTHRD_EI: u32 = 2983;
pub const H_ERR_PTHRD_ED: u32 = 2984;
pub const H_ERR_PTHRD_TSDC: u32 = 2985;
pub const H_ERR_PTHRD_TSDS: u32 = 2986;
pub const H_ERR_PTHRD_TSDG: u32 = 2987;
pub const H_ERR_PTHRD_TSDF: u32 = 2988;
pub const H_ERR_PTHRD_BA: u32 = 2989;
pub const H_ERR_DCDG_FLE: u32 = 2990;
pub const H_ERR_MSG_PNCI: u32 = 2991;
pub const H_ERR_MSG_CSAI: u32 = 2992;
pub const H_ERR_MSG_CSNI: u32 = 2993;
pub const H_ERR_PTHRD_BI: u32 = 2994;
pub const H_ERR_PTHRD_BW: u32 = 2995;
pub const H_ERR_PTHRD_BD: u32 = 2996;
pub const H_ERR_RCOIMA: u32 = 3010;
pub const H_ERR_ROOIMA: u32 = 3011;
pub const H_ERR_RIEI: u32 = 3012;
pub const H_ERR_EDEF: u32 = 3013;
pub const H_ERR_IIEI: u32 = 3014;
pub const H_ERR_FLTS: u32 = 3015;
pub const H_ERR_LLTB: u32 = 3016;
pub const H_ERR_UENOI: u32 = 3017;
pub const H_ERR_HTS: u32 = 3018;
pub const H_ERR_WTS: u32 = 3019;
pub const H_ERR_CHSEG: u32 = 3020;
pub const H_ERR_RLSEG1: u32 = 3021;
pub const H_ERR_WGAUSSM: u32 = 3022;
pub const H_ERR_FSEIS: u32 = 3033;
pub const H_ERR_FSEVAN: u32 = 3034;
pub const H_ERR_FSTOBIG: u32 = 3035;
pub const H_ERR_EMPTREG: u32 = 3036;
pub const H_ERR_DOM_DIFF: u32 = 3037;
pub const H_ERR_ROWTB: u32 = 3040;
pub const H_ERR_ROWTS: u32 = 3041;
pub const H_ERR_COLTB: u32 = 3042;
pub const H_ERR_COLTS: u32 = 3043;
pub const H_ERR_WRTHR: u32 = 3100;
pub const H_ERR_UNKF: u32 = 3101;
pub const H_ERR_UNKG: u32 = 3102;
pub const H_ERR_EINCC: u32 = 3103;
pub const H_ERR_EINCP1: u32 = 3104;
pub const H_ERR_EINCP2: u32 = 3105;
pub const H_ERR_TMR: u32 = 3106;
pub const H_ERR_SFZ: u32 = 3107;
pub const H_ERR_OOR: u32 = 3108;
pub const H_ERR_NEF: u32 = 3109;
pub const H_ERR_NOOB: u32 = 3110;
pub const H_ERR_EMPOB: u32 = 3111;
pub const H_ERR_NPOT: u32 = 3112;
pub const H_ERR_TMEP: u32 = 3113;
pub const H_ERR_LTB: u32 = 3114;
pub const H_ERR_NNLA: u32 = 3115;
pub const H_ERR_WFS: u32 = 3116;
pub const H_ERR_IWDS: u32 = 3117;
pub const H_ERR_IWTL: u32 = 3118;
pub const H_ERR_IWTS: u32 = 3119;
pub const H_ERR_IHTL: u32 = 3120;
pub const H_ERR_IHTS: u32 = 3121;
pub const H_ERR_DNOC: u32 = 3122;
pub const H_ERR_WRCFAFLT: u32 = 3123;
pub const H_ERR_WRCFAINT: u32 = 3124;
pub const H_ERR_NO_AFFTRANS: u32 = 3125;
pub const H_ERR_INPNOBDRY: u32 = 3126;
pub const H_ERR_DSIZESD: u32 = 3127;
pub const H_ERR_TMFEAT: u32 = 3128;
pub const H_ERR_AXIS_UNDEF: u32 = 3129;
pub const H_ERR_COWTS: u32 = 3131;
pub const H_ERR_COHTS: u32 = 3132;
pub const H_ERR_NUM_COLMN: u32 = 3133;
pub const H_ERR_NUM_LINES: u32 = 3134;
pub const H_ERR_OVL: u32 = 3135;
pub const H_ERR_NOT_SYM: u32 = 3136;
pub const H_ERR_NUM_COLS: u32 = 3137;
pub const H_ERR_SYNTAX: u32 = 3138;
pub const H_ERR_MISSING: u32 = 3139;
pub const H_ERR_COOC_MEM: u32 = 3140;
pub const H_ERR_NO_FILE: u32 = 3141;
pub const H_ERR_FILE_WR: u32 = 3142;
pub const H_ERR_NUM_LUCOLS: u32 = 3143;
pub const H_ERR_WNOLI: u32 = 3145;
pub const H_ERR_DITS: u32 = 3146;
pub const H_ERR_WINTM: u32 = 3147;
pub const H_ERR_THICK_NK: u32 = 3148;
pub const H_ERR_WIND3: u32 = 3170;
pub const H_ERR_WIND5: u32 = 3171;
pub const H_ERR_WIND7: u32 = 3172;
pub const H_ERR_WLAWSS: u32 = 3173;
pub const H_ERR_NE_NPTS: u32 = 3175;
pub const H_ERR_WNEE: u32 = 3200;
pub const H_ERR_REF: u32 = 3201;
pub const H_ERR_XLDWT: u32 = 3250;
pub const H_ERR_XLD_RPF: u32 = 3252;
pub const H_ERR_XLD_MCL: u32 = 3253;
pub const H_ERR_XLD_MCN: u32 = 3254;
pub const H_ERR_XLD_CTS: u32 = 3255;
pub const H_ERR_XLD_CRD: u32 = 3256;
pub const H_ERR_XLD_CRND: u32 = 3257;
pub const H_ERR_DBXC: u32 = 3258;
pub const H_ERR_DBWXID: u32 = 3259;
pub const H_ERR_XLD_WNP: u32 = 3260;
pub const H_ERR_XLD_CAND: u32 = 3261;
pub const H_ERR_FIT_ELLIPSE: u32 = 3262;
pub const H_ERR_FIT_CIRCLE: u32 = 3263;
pub const H_ERR_FIT_CLIP: u32 = 3264;
pub const H_ERR_FIT_QUADRANGLE: u32 = 3265;
pub const H_ERR_INCOMPL_RECT: u32 = 3266;
pub const H_ERR_XLD_COI: u32 = 3267;
pub const H_ERR_FIT_NOT_ENOUGH_POINTS: u32 = 3274;
pub const H_ERR_NWF: u32 = 3275;
pub const H_ERR_NAIGF: u32 = 3276;
pub const H_ERR_DXF_UEOF: u32 = 3278;
pub const H_ERR_DXF_CRGC: u32 = 3279;
pub const H_ERR_DXF_INAPP: u32 = 3280;
pub const H_ERR_DXF_INAPPN: u32 = 3281;
pub const H_ERR_DXF_INAPCN: u32 = 3282;
pub const H_ERR_DXF_CRAPP: u32 = 3283;
pub const H_ERR_DXF_CRAPC: u32 = 3284;
pub const H_ERR_DXF_CRAN: u32 = 3285;
pub const H_ERR_DXF_WPN: u32 = 3286;
pub const H_ERR_DXF_IEDT: u32 = 3289;
pub const H_ERR_XLD_ISOL_POINT: u32 = 3290;
pub const H_ERR_NURBS_CCBF: u32 = 3291;
pub const H_ERR_NSEG: u32 = 3292;
pub const H_ERR_NO_ONE_P: u32 = 3293;
pub const H_ERR_SESF: u32 = 3300;
pub const H_ERR_TMFE: u32 = 3301;
pub const H_ERR_OPSF: u32 = 3302;
pub const H_ERR_TMSS: u32 = 3303;
pub const H_ERR_TMSAM: u32 = 3305;
pub const H_ERR_TMCLS: u32 = 3306;
pub const H_ERR_TMBOX: u32 = 3307;
pub const H_ERR_OPCF: u32 = 3308;
pub const H_ERR_SCLA: u32 = 3309;
pub const H_ERR_OPF: u32 = 3310;
pub const H_ERR_CLEX: u32 = 3311;
pub const H_ERR_TMCLA: u32 = 3312;
pub const H_ERR_CNTL: u32 = 3313;
pub const H_ERR_CLNNF: u32 = 3314;
pub const H_ERR_NCCLA: u32 = 3315;
pub const H_ERR_CLASS2_ID: u32 = 3316;
pub const H_ERR_CLASS2_VERS: u32 = 3317;
pub const H_ERR_CLASS_NOSITEM: u32 = 3318;
pub const H_ERR_TM_NO_CL: u32 = 3319;
pub const H_ERR_KNN_CANNOT_ADD: u32 = 3320;
pub const H_ERR_ML_KMEAN_INITIALIZATION_ERROR: u32 = 3325;
pub const H_ERR_GMM_NOTRAINFILE: u32 = 3330;
pub const H_ERR_GMM_WRTRAINVERS: u32 = 3331;
pub const H_ERR_GMM_WRSMPFORMAT: u32 = 3332;
pub const H_ERR_GMM_NOCLASSFILE: u32 = 3333;
pub const H_ERR_GMM_WRCLASSVERS: u32 = 3334;
pub const H_ERR_GMM_TRAIN_UNKERR: u32 = 3335;
pub const H_ERR_GMM_TRAIN_COLLAPSED: u32 = 3336;
pub const H_ERR_GMM_TRAIN_NOSAMPLE: u32 = 3337;
pub const H_ERR_GMM_TRAIN_FEWSAMPLES: u32 = 3338;
pub const H_ERR_GMM_NOTTRAINED: u32 = 3340;
pub const H_ERR_GMM_NOTRAINDATA: u32 = 3341;
pub const H_ERR_GMM_NOSITEM: u32 = 3342;
pub const H_ERR_MLP_UNKOUTFUNC: u32 = 3350;
pub const H_ERR_MLP_NOT01ENC: u32 = 3351;
pub const H_ERR_MLP_NOTRAINDATA: u32 = 3352;
pub const H_ERR_MLP_NOTRAINFILE: u32 = 3353;
pub const H_ERR_MLP_WRTRAINVERS: u32 = 3354;
pub const H_ERR_MLP_WRSMPFORMAT: u32 = 3355;
pub const H_ERR_MLP_NOCLASSIF: u32 = 3356;
pub const H_ERR_MLP_NOCLASSFILE: u32 = 3357;
pub const H_ERR_MLP_WRCLASSVERS: u32 = 3358;
pub const H_ERR_WRNUMCHAN: u32 = 3359;
pub const H_ERR_MLP_WRNUMPARAM: u32 = 3360;
pub const H_ERR_MLP_NOSITEM: u32 = 3361;
pub const H_ERR_LUT_WRNUMCHAN: u32 = 3370;
pub const H_ERR_LUT_NRCHANLARGE: u32 = 3371;
pub const H_ERR_LUT_CANNOTCREAT: u32 = 3372;
pub const H_ERR_SVM_NOTRAINDATA: u32 = 3380;
pub const H_ERR_SVM_NOTRAINFILE: u32 = 3381;
pub const H_ERR_SVM_WRTRAINVERS: u32 = 3382;
pub const H_ERR_SVM_WRSMPFORMAT: u32 = 3383;
pub const H_ERR_SVM_NOCLASSFILE: u32 = 3384;
pub const H_ERR_SVM_WRCLASSVERS: u32 = 3385;
pub const H_ERR_SVM_WRNRCLASS: u32 = 3386;
pub const H_ERR_SVM_NU_TOO_BIG: u32 = 3387;
pub const H_ERR_SVM_TRAIN_FAIL: u32 = 3388;
pub const H_ERR_SVM_DO_NOT_FIT: u32 = 3389;
pub const H_ERR_SVM_NO_TRAIN_ADD: u32 = 3390;
pub const H_ERR_SVM_KERNELNOTRBF: u32 = 3391;
pub const H_ERR_SVM_NO_TRAIND_FOR_CLASS: u32 = 3392;
pub const H_ERR_SVM_NOT_TRAINED: u32 = 3393;
pub const H_ERR_NOT_TRAINED: u32 = 3394;
pub const H_ERR_SVM_NOSITEM: u32 = 3395;
pub const H_ERR_ROTNR: u32 = 3401;
pub const H_ERR_GOL: u32 = 3402;
pub const H_ERR_BEZ: u32 = 3403;
pub const H_ERR_ITER: u32 = 3404;
pub const H_ERR_MOSYS: u32 = 3405;
pub const H_ERR_ART: u32 = 3406;
pub const H_ERR_OBJI: u32 = 3407;
pub const H_ERR_OBJO: u32 = 3408;
pub const H_ERR_PARI: u32 = 3409;
pub const H_ERR_PARO: u32 = 3410;
pub const H_ERR_SELC: u32 = 3411;
pub const H_ERR_WRNSE: u32 = 3412;
pub const H_ERR_WRRLN1: u32 = 3500;
pub const H_ERR_WRRLN2: u32 = 3501;
pub const H_ERR_WRRLL: u32 = 3502;
pub const H_ERR_RLLTB: u32 = 3503;
pub const H_ERR_RLLTS: u32 = 3504;
pub const H_ERR_RLCTB: u32 = 3505;
pub const H_ERR_RLCTS: u32 = 3506;
pub const H_ERR_CHLTB: u32 = 3507;
pub const H_ERR_CHLTS: u32 = 3508;
pub const H_ERR_CHCTB: u32 = 3509;
pub const H_ERR_MRLE: u32 = 3510;
pub const H_ERR_ICCOMPL: u32 = 3511;
pub const H_ERR_RLEMAX: u32 = 3512;
pub const H_ERR_WRRLN3: u32 = 3513;
pub const H_ERR_OPNOCOMPL: u32 = 3514;
pub const H_ERR_WIMAW1: u32 = 3520;
pub const H_ERR_WIMAW2: u32 = 3521;
pub const H_ERR_WIMAH1: u32 = 3522;
pub const H_ERR_WIMAH2: u32 = 3523;
pub const H_ERR_WIMAW3: u32 = 3524;
pub const H_ERR_WIMAH3: u32 = 3525;
pub const H_ERR_TMS: u32 = 3550;
pub const H_ERR_NO_INT8_IMAGE: u32 = 3551;
pub const H_ERR_POINT_AT_INFINITY: u32 = 3600;
pub const H_ERR_ML_NO_COVARIANCE: u32 = 3601;
pub const H_ERR_RANSAC_PRNG: u32 = 3602;
pub const H_ERR_RANSAC_TOO_DIFFERENT: u32 = 3603;
pub const H_ERR_PTI_FALLBACK: u32 = 3604;
pub const H_ERR_PTI_TRAFO_SING: u32 = 3605;
pub const H_ERR_PTI_MOSAIC_UNDERDET: u32 = 3606;
pub const H_ERR_COV_NPD: u32 = 3607;
pub const H_ERR_TOO_MANY_POINTS: u32 = 3608;
pub const H_ERR_INPC: u32 = 3620;
pub const H_ERR_NOPA: u32 = 3621;
pub const H_ERR_IINE: u32 = 3622;
pub const H_ERR_NOCM: u32 = 3623;
pub const H_ERR_SKNZ: u32 = 3624;
pub const H_ERR_ILFL: u32 = 3625;
pub const H_ERR_KANZ: u32 = 3626;
pub const H_ERR_VARA: u32 = 3627;
pub const H_ERR_LVDE: u32 = 3628;
pub const H_ERR_KPAR: u32 = 3629;
pub const H_ERR_IMOD: u32 = 3630;
pub const H_ERR_PNIC: u32 = 3631;
pub const H_ERR_NO_SOL: u32 = 3632;
pub const H_ERR_TINZ: u32 = 3633;
pub const H_ERR_ILMD: u32 = 3640;
pub const H_ERR_RDS_NSC: u32 = 3660;
pub const H_ERR_RDS_NSS: u32 = 3661;
pub const H_ERR_RDS_ISS: u32 = 3662;
pub const H_ERR_RDS_NEC: u32 = 3663;
pub const H_ERR_NOFFTOPT: u32 = 3650;
pub const H_ERR_WRFFTOPTVERS: u32 = 3651;
pub const H_ERR_WRHALCONVERS: u32 = 3652;
pub const H_ERR_OPTFAIL: u32 = 3653;
pub const H_ERR_FFTOPT_NOSITEM: u32 = 3654;
pub const H_ERR_INVLD_DISP_RANGE: u32 = 3690;
pub const H_ERR_EPIINIM: u32 = 3700;
pub const H_ERR_EPI_FOV: u32 = 3701;
pub const H_ERR_EPI_RECT: u32 = 3702;
pub const H_ERR_BI_WT_TARGET: u32 = 3710;
pub const H_ERR_BI_WT_THICKNESS: u32 = 3711;
pub const H_ERR_BI_WT_POSITION: u32 = 3712;
pub const H_ERR_BI_WT_SIGMA: u32 = 3713;
pub const H_ERR_BI_WV_SIGMA: u32 = 3714;
pub const H_ERR_BI_WT_THRESH: u32 = 3715;
pub const H_ERR_BI_WV_TARGET: u32 = 3716;
pub const H_ERR_BI_WV_THICKNESS: u32 = 3717;
pub const H_ERR_BI_WV_POSITION: u32 = 3718;
pub const H_ERR_BI_WV_THRESH: u32 = 3719;
pub const H_ERR_BI_WT_REFINE: u32 = 3720;
pub const H_ERR_BI_WV_REFINE: u32 = 3721;
pub const H_ERR_BI_WT_RESOL: u32 = 3722;
pub const H_ERR_BI_WV_RESOL: u32 = 3723;
pub const H_ERR_BI_WT_POLARITY: u32 = 3724;
pub const H_ERR_BI_WV_POLARITY: u32 = 3725;
pub const H_ERR_SOL_EMPTY_MODEL_LIST: u32 = 3751;
pub const H_ERR_SOL_WNIW: u32 = 3752;
pub const H_ERR_SOL_WNIH: u32 = 3753;
pub const H_ERR_SOL_WPROF_REG: u32 = 3754;
pub const H_ERR_SOL_CAL_NONE: u32 = 3755;
pub const H_ERR_SOL_UNDEF_DISPARITY: u32 = 3756;
pub const H_ERR_SOL_UNDEF_DISPDOMAIN: u32 = 3757;
pub const H_ERR_SOL_UNDEF_CAMPAR: u32 = 3758;
pub const H_ERR_SOL_UNDEF_LPCS: u32 = 3759;
pub const H_ERR_SOL_UNDEF_CCS: u32 = 3760;
pub const H_ERR_SOL_UNDEF_CCS_2_LPCS: u32 = 3761;
pub const H_ERR_SOL_UNDEF_MOV_POSE: u32 = 3762;
pub const H_ERR_SOL_WV_SCALE: u32 = 3763;
pub const H_ERR_SOL_WV_PAR_NAME: u32 = 3764;
pub const H_ERR_SOL_WT_METHOD: u32 = 3765;
pub const H_ERR_SOL_WT_AMBIGUITY: u32 = 3766;
pub const H_ERR_SOL_WT_SCORE_TYPE: u32 = 3767;
pub const H_ERR_SOL_WT_CALIBRATION: u32 = 3768;
pub const H_ERR_SOL_WT_NUM_PROF: u32 = 3769;
pub const H_ERR_SOL_WT_CAM_PAR: u32 = 3770;
pub const H_ERR_SOL_WT_PAR_POSE: u32 = 3771;
pub const H_ERR_SOL_WV_METHOD: u32 = 3772;
pub const H_ERR_SOL_WT_THRES: u32 = 3773;
pub const H_ERR_SOL_WV_AMBIGUITY: u32 = 3774;
pub const H_ERR_SOL_WV_SCORE_TYPE: u32 = 3775;
pub const H_ERR_SOL_WV_CALIBRATION: u32 = 3776;
pub const H_ERR_SOL_WV_NUM_PROF: u32 = 3777;
pub const H_ERR_SOL_WV_CAMERA_TYPE: u32 = 3778;
pub const H_ERR_SOL_WN_CAM_PAR: u32 = 3779;
pub const H_ERR_SOL_WN_POSE: u32 = 3780;
pub const H_ERR_SOL_NO_TARGET_FOUND: u32 = 3781;
pub const H_ERR_SOL_NO_VALID_SOL: u32 = 3782;
pub const H_ERR_SOL_WT_CALIB_OBJECT: u32 = 3783;
pub const H_ERR_SOL_INVALID_CALIB_OBJECT: u32 = 3784;
pub const H_ERR_SOL_NO_CALIB_OBJECT_SET: u32 = 3785;
pub const H_ERR_SOL_WR_FILE_FORMAT: u32 = 3786;
pub const H_ERR_SOL_WR_FILE_VERS: u32 = 3787;
pub const H_ERR_SOL_CAMPAR_UNSUPPORTED: u32 = 3788;
pub const H_ERR_SOL_PAR_CALIB: u32 = 3790;
pub const H_ERR_SOL_WGV_DISP: u32 = 3791;
pub const H_ERR_TI_WRONGMODEL: u32 = 3800;
pub const H_ERR_TI_NOTTRAINED: u32 = 3801;
pub const H_ERR_TI_NOTRAINDATA: u32 = 3802;
pub const H_ERR_TI_NOTRAINFILE: u32 = 3803;
pub const H_ERR_TI_WRTRAINVERS: u32 = 3804;
pub const H_ERR_TI_WRSMPFORMAT: u32 = 3805;
pub const H_ERR_TI_WRSMPVERS: u32 = 3806;
pub const H_ERR_TI_WRIMGSIZE: u32 = 3807;
pub const H_ERR_TI_WRSMPTEXMODEL: u32 = 3808;
pub const H_ERR_NOT_ENOUGH_IMAGES: u32 = 3809;
pub const H_ERR_SING: u32 = 3850;
pub const H_ERR_FEWIM: u32 = 3851;
pub const H_ERR_ZBR_NOS: u32 = 3852;
pub const H_ERR_DIMK: u32 = 3900;
pub const H_ERR_NOFILE: u32 = 3901;
pub const H_ERR_FF1: u32 = 3902;
pub const H_ERR_FF2: u32 = 3903;
pub const H_ERR_FF3: u32 = 3904;
pub const H_ERR_NO_A: u32 = 3905;
pub const H_ERR_NO_C: u32 = 3906;
pub const H_ERR_NO_Q: u32 = 3907;
pub const H_ERR_NO_R: u32 = 3908;
pub const H_ERR_NO_GU: u32 = 3909;
pub const H_ERR_NOTSYMM: u32 = 3910;
pub const H_ERR_SINGU: u32 = 3911;
pub const H_ERR_SLM_NOT_PERSISTENT: u32 = 3950;
pub const H_ERR_SLM_MSW_TOO_LARGE: u32 = 3951;
pub const H_ERR_SLM_SSW_TOO_LARGE: u32 = 3952;
pub const H_ERR_SLM_MSW_GT_SSW: u32 = 3953;
pub const H_ERR_SLM_SSW_LT_MSW: u32 = 3954;
pub const H_ERR_SLM_NOT_PREP: u32 = 3955;
pub const H_ERR_SLM_NO_OBJS: u32 = 3956;
pub const H_ERR_SLM_WRVERS: u32 = 3957;
pub const H_ERR_SLM_WRFILE: u32 = 3958;
pub const H_ERR_SLM_WRONGPATTERN: u32 = 3959;
pub const H_ERR_SLM_NOT_DECODED: u32 = 3960;
pub const H_ERR_SLM_WRONGMODEL: u32 = 3961;
pub const H_ERR_SLM_WNUMCAMS: u32 = 3962;
pub const H_ERR_SLM_WPATTSIZE: u32 = 3963;
pub const H_ERR_SLM_WRONGCTYPE: u32 = 3964;
pub const H_ERR_SLM_WRONGPTYPE: u32 = 3965;
pub const H_ERR_SLM_NO_CSM: u32 = 3966;
pub const H_ERR_SLM_NO_VERT: u32 = 3967;
pub const H_ERR_SLM_NOT_DEC_REC: u32 = 3968;
pub const H_ERR_SLM_WCAMSIZE: u32 = 3969;
pub const H_ERR_DBOIT: u32 = 4050;
pub const H_ERR_DBOC: u32 = 4051;
pub const H_ERR_DBWOID: u32 = 4052;
pub const H_ERR_DBTC: u32 = 4053;
pub const H_ERR_DBWTID: u32 = 4054;
pub const H_ERR_DBTIO: u32 = 4055;
pub const H_ERR_DBIDNULL: u32 = 4056;
pub const H_ERR_WDBID: u32 = 4057;
pub const H_ERR_DBIC: u32 = 4058;
pub const H_ERR_DBWIID: u32 = 4059;
pub const H_ERR_DBRC: u32 = 4060;
pub const H_ERR_DBWRID: u32 = 4061;
pub const H_ERR_WCHAN: u32 = 4062;
pub const H_ERR_DBITL: u32 = 4063;
pub const H_ERR_DBIUNDEF: u32 = 4064;
pub const H_ERR_NO_OPENCL: u32 = 4100;
pub const H_ERR_OPENCL_ERROR: u32 = 4101;
pub const H_ERR_NO_COMPUTE_DEVICES: u32 = 4102;
pub const H_ERR_NO_DEVICE_IMPL: u32 = 4103;
pub const H_ERR_OUT_OF_DEVICE_MEM: u32 = 4104;
pub const H_ERR_INVALID_SHAPE: u32 = 4105;
pub const H_ERR_INVALID_DEVICE: u32 = 4106;
pub const H_ERR_CUDA_ERROR: u32 = 4200;
pub const H_ERR_CUDNN_ERROR: u32 = 4201;
pub const H_ERR_CUBLAS_ERROR: u32 = 4202;
pub const H_ERR_BATCH_SIZE_NOT_SUPPORTED: u32 = 4203;
pub const H_ERR_CUDA_NOT_AVAILABLE: u32 = 4204;
pub const H_ERR_CUDNN_UNSUPPORTED_VERSION: u32 = 4205;
pub const H_ERR_CUDNN_FEATURE_NOT_SUPPORTED: u32 = 4206;
pub const H_ERR_CUDA_DRIVER_VERSION: u32 = 4207;
pub const H_ERR_TRAINING_UNSUPPORTED: u32 = 4301;
pub const H_ERR_CPU_INFERENCE_NOT_AVAILABLE: u32 = 4302;
pub const H_ERR_DNNL_ERROR: u32 = 4303;
pub const H_ERR_HAI2_ERROR: u32 = 4320;
pub const H_ERR_HAI2_INVALID_PARAM: u32 = 4321;
pub const H_ERR_ACL_ERROR: u32 = 4400;
pub const H_ERR_VISUALIZATION: u32 = 4500;
pub const H_ERR_COLOR_TYPE_UNEXP: u32 = 4501;
pub const H_ERR_NUM_COLOR_EXCEEDED: u32 = 4502;
pub const H_ERR_WSCN: u32 = 5100;
pub const H_ERR_DSCO: u32 = 5101;
pub const H_ERR_WWC: u32 = 5102;
pub const H_ERR_NWA: u32 = 5103;
pub const H_ERR_DNA: u32 = 5104;
pub const H_ERR_UCOL: u32 = 5105;
pub const H_ERR_NWO: u32 = 5106;
pub const H_ERR_WFM: u32 = 5107;
pub const H_ERR_WGV: u32 = 5108;
pub const H_ERR_WPV: u32 = 5109;
pub const H_ERR_WLW: u32 = 5110;
pub const H_ERR_WCUR: u32 = 5111;
pub const H_ERR_WLUT: u32 = 5112;
pub const H_ERR_WDM: u32 = 5113;
pub const H_ERR_WRCO: u32 = 5114;
pub const H_ERR_WRDM: u32 = 5115;
pub const H_ERR_WRIT: u32 = 5116;
pub const H_ERR_IPIT: u32 = 5117;
pub const H_ERR_WRZS: u32 = 5118;
pub const H_ERR_WRDS: u32 = 5119;
pub const H_ERR_WRDV: u32 = 5120;
pub const H_ERR_WWINF: u32 = 5121;
pub const H_ERR_WDEXT: u32 = 5122;
pub const H_ERR_WWT: u32 = 5123;
pub const H_ERR_WND: u32 = 5124;
pub const H_ERR_WRGB: u32 = 5125;
pub const H_ERR_WPNS: u32 = 5126;
pub const H_ERR_WCM: u32 = 5127;
pub const H_ERR_FNA: u32 = 5128;
pub const H_ERR_LNFS: u32 = 5129;
pub const H_ERR_LOFL: u32 = 5130;
pub const H_ERR_WIDT: u32 = 5131;
pub const H_ERR_WWDS: u32 = 5132;
pub const H_ERR_NDVS: u32 = 5133;
pub const H_ERR_WBW: u32 = 5134;
pub const H_ERR_WDVS: u32 = 5135;
pub const H_ERR_TMF: u32 = 5136;
pub const H_ERR_WFN: u32 = 5137;
pub const H_ERR_WCP: u32 = 5138;
pub const H_ERR_NTW: u32 = 5139;
pub const H_ERR_NPW: u32 = 5140;
pub const H_ERR_STL: u32 = 5141;
pub const H_ERR_NSS: u32 = 5142;
pub const H_ERR_NMS: u32 = 5143;
pub const H_ERR_DWNA: u32 = 5144;
pub const H_ERR_WOM: u32 = 5145;
pub const H_ERR_WWM: u32 = 5146;
pub const H_ERR_LUTF: u32 = 5147;
pub const H_ERR_LUTN8: u32 = 5148;
pub const H_ERR_WTCM: u32 = 5149;
pub const H_ERR_WIFTL: u32 = 5150;
pub const H_ERR_WSOI: u32 = 5151;
pub const H_ERR_HRLUT: u32 = 5152;
pub const H_ERR_WPFSL: u32 = 5153;
pub const H_ERR_WPVS: u32 = 5154;
pub const H_ERR_WLPN: u32 = 5155;
pub const H_ERR_WLPL: u32 = 5156;
pub const H_ERR_WNOC: u32 = 5157;
pub const H_ERR_WPST: u32 = 5158;
pub const H_ERR_SWNA: u32 = 5159;
pub const H_ERR_NSFO: u32 = 5160;
pub const H_ERR_WSPN: u32 = 5161;
pub const H_ERR_WIFFD: u32 = 5162;
pub const H_ERR_WLUTF: u32 = 5163;
pub const H_ERR_WLUTE: u32 = 5164;
pub const H_ERR_WLUTD: u32 = 5165;
pub const H_ERR_CNDP: u32 = 5166;
pub const H_ERR_LNPR: u32 = 5167;
pub const H_ERR_NFSC: u32 = 5168;
pub const H_ERR_NACD: u32 = 5169;
pub const H_ERR_LUTO: u32 = 5170;
pub const H_ERR_WCC: u32 = 5171;
pub const H_ERR_WWATTRT: u32 = 5172;
pub const H_ERR_WWATTRN: u32 = 5173;
pub const H_ERR_WRSPART: u32 = 5174;
pub const H_ERR_WCSPART: u32 = 5175;
pub const H_ERR_WNCV: u32 = 5176;
pub const H_ERR_FONT_NA: u32 = 5177;
pub const H_ERR_WDIFFTH: u32 = 5178;
pub const H_ERR_OBJ_ATTACHED: u32 = 5194;
pub const H_ERR_CHA3: u32 = 5180;
pub const H_ERR_NMWA: u32 = 5181;
pub const H_ERR_DEPTH_NOT_STORED: u32 = 5179;
pub const H_ERR_INDEX_NOT_STORED: u32 = 5182;
pub const H_ERR_PRIM_NO_POINTS: u32 = 5183;
pub const H_ERR_REMOTE_DESKTOP_SIZE: u32 = 5184;
pub const H_ERR_NOGL: u32 = 5185;
pub const H_ERR_NODEPTH: u32 = 5186;
pub const H_ERR_OGL_ERROR: u32 = 5187;
pub const H_ERR_UNSUPPORTED_FBO: u32 = 5188;
pub const H_ERR_OGL_HSR_NOT_SUPPORTED: u32 = 5189;
pub const H_ERR_WP_IWP: u32 = 5190;
pub const H_ERR_WP_IWPV: u32 = 5191;
pub const H_ERR_UMOD: u32 = 5192;
pub const H_ERR_ATTIMG: u32 = 5193;
pub const H_ERR_NVG_WM: u32 = 5195;
pub const H_ERR_FINTERN: u32 = 5196;
pub const H_ERR_FS: u32 = 5197;
pub const H_ERR_FISR: u32 = 5198;
pub const H_ERR_BFD: u32 = 5199;
pub const H_ERR_FNF: u32 = 5200;
pub const H_ERR_DWI: u32 = 5201;
pub const H_ERR_DWID: u32 = 5202;
pub const H_ERR_DRI1: u32 = 5203;
pub const H_ERR_DRI2: u32 = 5204;
pub const H_ERR_DRID1: u32 = 5205;
pub const H_ERR_DIMMAT: u32 = 5206;
pub const H_ERR_HNF: u32 = 5207;
pub const H_ERR_XNF: u32 = 5208;
pub const H_ERR_CNCSI: u32 = 5209;
pub const H_ERR_CNCSO: u32 = 5210;
pub const H_ERR_CNCF: u32 = 5211;
pub const H_ERR_EDWF: u32 = 5212;
pub const H_ERR_NFA: u32 = 5213;
pub const H_ERR_WFIN: u32 = 5214;
pub const H_ERR_CNOF: u32 = 5215;
pub const H_ERR_WFMO: u32 = 5216;
pub const H_ERR_WPTY: u32 = 5217;
pub const H_ERR_WIW: u32 = 5218;
pub const H_ERR_WIH: u32 = 5219;
pub const H_ERR_FTS1: u32 = 5220;
pub const H_ERR_FTS2: u32 = 5221;
pub const H_ERR_WDPI: u32 = 5222;
pub const H_ERR_WNOW: u32 = 5223;
pub const H_ERR_WNOH: u32 = 5224;
pub const H_ERR_WNFP: u32 = 5225;
pub const H_ERR_WPNA: u32 = 5226;
pub const H_ERR_WSNA: u32 = 5227;
pub const H_ERR_NPCF: u32 = 5228;
pub const H_ERR_WHIF: u32 = 5229;
pub const H_ERR_HINF: u32 = 5230;
pub const H_ERR_HSNF: u32 = 5231;
pub const H_ERR_ICSF: u32 = 5232;
pub const H_ERR_EFNF: u32 = 5233;
pub const H_ERR_NFWKEF: u32 = 5234;
pub const H_ERR_WIFT: u32 = 5235;
pub const H_ERR_ICNF: u32 = 5236;
pub const H_ERR_WTIFF: u32 = 5237;
pub const H_ERR_WFF: u32 = 5238;
pub const H_ERR_NOPNM: u32 = 5242;
pub const H_ERR_ICODB: u32 = 5243;
pub const H_ERR_INVAL_FILE_ENC: u32 = 5244;
pub const H_ERR_FNO: u32 = 5245;
pub const H_ERR_NO_FILES: u32 = 5246;
pub const H_ERR_NORFILE: u32 = 5247;
pub const H_ERR_RDTB: u32 = 5248;
pub const H_ERR_BINFILE_ENC: u32 = 5249;
pub const H_ERR_EDRF: u32 = 5250;
pub const H_ERR_SNO: u32 = 5251;
pub const H_ERR_NSA: u32 = 5252;
pub const H_ERR_CNOS: u32 = 5253;
pub const H_ERR_CNCS: u32 = 5254;
pub const H_ERR_CNGSA: u32 = 5255;
pub const H_ERR_CNSSA: u32 = 5256;
pub const H_ERR_WRSBR: u32 = 5257;
pub const H_ERR_WRSDB: u32 = 5258;
pub const H_ERR_WRSFC: u32 = 5259;
pub const H_ERR_CNFS: u32 = 5260;
pub const H_ERR_EDWS: u32 = 5261;
pub const H_ERR_EDRS: u32 = 5262;
pub const H_ERR_REG_NOSITEM: u32 = 5270;
pub const H_ERR_REG_WRVERS: u32 = 5271;
pub const H_ERR_IMG_NOSITEM: u32 = 5272;
pub const H_ERR_IMG_WRVERS: u32 = 5273;
pub const H_ERR_XLD_NOSITEM: u32 = 5274;
pub const H_ERR_XLD_WRVERS: u32 = 5275;
pub const H_ERR_OBJ_NOSITEM: u32 = 5276;
pub const H_ERR_OBJ_WRVERS: u32 = 5277;
pub const H_ERR_XLD_DATA_TOO_LARGE: u32 = 5678;
pub const H_ERR_OBJ_UNEXPECTED: u32 = 5279;
pub const H_ERR_FNOTF: u32 = 5280;
pub const H_ERR_FNOBF: u32 = 5281;
pub const H_ERR_DIRCR: u32 = 5282;
pub const H_ERR_DIRRM: u32 = 5283;
pub const H_ERR_GETCWD: u32 = 5284;
pub const H_ERR_SETCWD: u32 = 5285;
pub const H_ERR_XINIT: u32 = 5286;
pub const H_ERR_NFS: u32 = 5300;
pub const H_ERR_FGWC: u32 = 5301;
pub const H_ERR_FGWD: u32 = 5302;
pub const H_ERR_FGVF: u32 = 5303;
pub const H_ERR_FGNV: u32 = 5304;
pub const H_ERR_UFG: u32 = 5305;
pub const H_ERR_FGF: u32 = 5306;
pub const H_ERR_FGWR: u32 = 5307;
pub const H_ERR_FGWP: u32 = 5308;
pub const H_ERR_FGWPR: u32 = 5309;
pub const H_ERR_FGWH: u32 = 5310;
pub const H_ERR_FGCL: u32 = 5311;
pub const H_ERR_FGNI: u32 = 5312;
pub const H_ERR_FGET: u32 = 5313;
pub const H_ERR_FGLI: u32 = 5314;
pub const H_ERR_FGCS: u32 = 5315;
pub const H_ERR_FGPT: u32 = 5316;
pub const H_ERR_FGCT: u32 = 5317;
pub const H_ERR_FGTM: u32 = 5318;
pub const H_ERR_FGDV: u32 = 5319;
pub const H_ERR_FGASYNC: u32 = 5320;
pub const H_ERR_FGPARAM: u32 = 5321;
pub const H_ERR_FGTIMEOUT: u32 = 5322;
pub const H_ERR_FGGAIN: u32 = 5323;
pub const H_ERR_FGFIELD: u32 = 5324;
pub const H_ERR_FGPART: u32 = 5325;
pub const H_ERR_FGPARV: u32 = 5326;
pub const H_ERR_FGFNS: u32 = 5327;
pub const H_ERR_FGIVERS: u32 = 5328;
pub const H_ERR_FGSETPAR: u32 = 5329;
pub const H_ERR_FGGETPAR: u32 = 5330;
pub const H_ERR_FGPARNA: u32 = 5331;
pub const H_ERR_FGCLOSE: u32 = 5332;
pub const H_ERR_FGCAMFILE: u32 = 5333;
pub const H_ERR_FGCALLBACK: u32 = 5334;
pub const H_ERR_FGDEVLOST: u32 = 5335;
pub const H_ERR_FGABORTED: u32 = 5336;
pub const H_ERR_IOTIMEOUT: u32 = 5350;
pub const H_ERR_IOIVERS: u32 = 5351;
pub const H_ERR_IOWH: u32 = 5352;
pub const H_ERR_IODBUSY: u32 = 5353;
pub const H_ERR_IOIAR: u32 = 5354;
pub const H_ERR_IONF: u32 = 5355;
pub const H_ERR_IOPART: u32 = 5356;
pub const H_ERR_IOPARV: u32 = 5357;
pub const H_ERR_IOPARNUM: u32 = 5358;
pub const H_ERR_IOPARAM: u32 = 5359;
pub const H_ERR_IOPARNA: u32 = 5360;
pub const H_ERR_IOFNS: u32 = 5361;
pub const H_ERR_IOME: u32 = 5362;
pub const H_ERR_IODNA: u32 = 5363;
pub const H_ERR_IOABORTED: u32 = 5364;
pub const H_ERR_IODATT: u32 = 5365;
pub const H_ERR_IODEVLOST: u32 = 5366;
pub const H_ERR_IOSETPAR: u32 = 5367;
pub const H_ERR_IOGETPAR: u32 = 5368;
pub const H_ERR_IOCLOSE: u32 = 5369;
pub const H_ERR_JXR_UNSUPPORTED_FORMAT: u32 = 5400;
pub const H_ERR_JXR_INVALID_PIXEL_FORMAT: u32 = 5401;
pub const H_ERR_JXR_INTERNAL_ERROR: u32 = 5402;
pub const H_ERR_JXR_FORMAT_SYNTAX_ERROR: u32 = 5403;
pub const H_ERR_JXR_TOO_MANY_CHANNELS: u32 = 5404;
pub const H_ERR_JXR_EC_ERROR: u32 = 5405;
pub const H_ERR_JXR_EC_BADMAGIC: u32 = 5406;
pub const H_ERR_JXR_EC_FEATURE_NOT_IMPLEMENTED: u32 = 5407;
pub const H_ERR_JXR_EC_IO: u32 = 5408;
pub const H_ERR_JXR_EC_BADFORMAT: u32 = 5409;
pub const H_ERR_LIB_FILE_CLOSE: u32 = 5500;
pub const H_ERR_LIB_FILE_OPEN: u32 = 5501;
pub const H_ERR_LIB_UNEXPECTED_EOF: u32 = 5502;
pub const H_ERR_IDTL: u32 = 5503;
pub const H_ERR_ITLHV: u32 = 5504;
pub const H_ERR_TMIO: u32 = 5505;
pub const H_ERR_FILE_FORMAT_UNSUPPORTED: u32 = 5506;
pub const H_ERR_INCONSISTENT_DIMENSIONS: u32 = 5507;
pub const H_ERR_PCX_NO_PCX_FILE: u32 = 5510;
pub const H_ERR_PCX_UNKNOWN_ENCODING: u32 = 5511;
pub const H_ERR_PCX_MORE_THAN_4_PLANES: u32 = 5512;
pub const H_ERR_PCX_COLORMAP_SIGNATURE: u32 = 5513;
pub const H_ERR_PCX_REPEAT_COUNT_SPANS: u32 = 5514;
pub const H_ERR_PCX_TOO_MUCH_BITS_PIXEL: u32 = 5515;
pub const H_ERR_PCX_PACKED_PIXELS: u32 = 5516;
pub const H_ERR_GIF_NO_GIF_PICTURE: u32 = 5520;
pub const H_ERR_GIF_BAD_VERSION: u32 = 5521;
pub const H_ERR_GIF_SCREEN_DESCRIPTOR: u32 = 5522;
pub const H_ERR_GIF_COLORMAP: u32 = 5523;
pub const H_ERR_GIF_READ_ERROR_EOF: u32 = 5524;
pub const H_ERR_GIF_NOT_ENOUGH_IMAGES: u32 = 5525;
pub const H_ERR_GIF_ERROR_ON_EXTENSION: u32 = 5526;
pub const H_ERR_GIF_LEFT_TOP_WIDTH: u32 = 5527;
pub const H_ERR_GIF_CIRCULAR_TABL_ENTRY: u32 = 5528;
pub const H_ERR_GIF_BAD_IMAGE_DATA: u32 = 5529;
pub const H_ERR_SUN_RASTERFILE_TYPE: u32 = 5530;
pub const H_ERR_SUN_RASTERFILE_HEADER: u32 = 5531;
pub const H_ERR_SUN_COLS: u32 = 5532;
pub const H_ERR_SUN_ROWS: u32 = 5533;
pub const H_ERR_SUN_COLORMAP: u32 = 5534;
pub const H_ERR_SUN_RASTERFILE_IMAGE: u32 = 5535;
pub const H_ERR_SUN_IMPOSSIBLE_DATA: u32 = 5536;
pub const H_ERR_XWD_IMPOSSIBLE_DATA: u32 = 5540;
pub const H_ERR_XWD_VISUAL_CLASS: u32 = 5541;
pub const H_ERR_XWD_X10_HEADER: u32 = 5542;
pub const H_ERR_XWD_X11_HEADER: u32 = 5543;
pub const H_ERR_XWD_X10_COLORMAP: u32 = 5544;
pub const H_ERR_XWD_X11_COLORMAP: u32 = 5545;
pub const H_ERR_XWD_X11_PIXMAP: u32 = 5546;
pub const H_ERR_XWD_UNKNOWN_VERSION: u32 = 5547;
pub const H_ERR_XWD_READING_IMAGE: u32 = 5548;
pub const H_ERR_TIF_BAD_INPUTDATA: u32 = 5550;
pub const H_ERR_TIF_COLORMAP: u32 = 5551;
pub const H_ERR_TIF_TOO_MANY_COLORS: u32 = 5552;
pub const H_ERR_TIF_BAD_PHOTOMETRIC: u32 = 5553;
pub const H_ERR_TIF_PHOTOMETRIC_DEPTH: u32 = 5554;
pub const H_ERR_TIF_NO_REGION: u32 = 5555;
pub const H_ERR_TIF_UNSUPPORTED_FORMAT: u32 = 5556;
pub const H_ERR_TIF_BAD_SPECIFICATION: u32 = 5557;
pub const H_ERR_TIF_FILE_CORRUPT: u32 = 5558;
pub const H_ERR_TIF_TAG_UNDEFINED: u32 = 5559;
pub const H_ERR_BMP_NO_BMP_PICTURE: u32 = 5560;
pub const H_ERR_BMP_READ_ERROR_EOF: u32 = 5561;
pub const H_ERR_BMP_INCOMPLETE_HEADER: u32 = 5562;
pub const H_ERR_BMP_UNKNOWN_FORMAT: u32 = 5563;
pub const H_ERR_BMP_UNKNOWN_COMPRESSION: u32 = 5564;
pub const H_ERR_BMP_COLORMAP: u32 = 5565;
pub const H_ERR_BMP_WRITE_ERROR: u32 = 5566;
pub const H_ERR_BMP_NO_REGION: u32 = 5567;
pub const H_ERR_JPG_COMP_NUM: u32 = 5570;
pub const H_ERR_JPGLIB_UNKNOWN: u32 = 5571;
pub const H_ERR_JPGLIB_NOTIMPL: u32 = 5572;
pub const H_ERR_JPGLIB_FILE: u32 = 5573;
pub const H_ERR_JPGLIB_TMPFILE: u32 = 5574;
pub const H_ERR_JPGLIB_MEMORY: u32 = 5575;
pub const H_ERR_JPGLIB_INFORMAT: u32 = 5576;
pub const H_ERR_PNG_NO_PNG_FILE: u32 = 5580;
pub const H_ERR_PNG_UNKNOWN_INTERLACE_TYPE: u32 = 5581;
pub const H_ERR_PNG_UNSUPPORTED_COLOR_TYPE: u32 = 5582;
pub const H_ERR_PNG_NO_REGION: u32 = 5583;
pub const H_ERR_PNG_SIZE_TOO_BIG: u32 = 5584;
pub const H_ERR_TIF_TAG_ACCESS: u32 = 5587;
pub const H_ERR_TIF_TAG_DATATYPE: u32 = 5588;
pub const H_ERR_TIF_TAG_UNSUPPORTED: u32 = 5589;
pub const H_ERR_JP2_CORRUPT: u32 = 5590;
pub const H_ERR_JP2_PREC_TOO_HIGH: u32 = 5591;
pub const H_ERR_JP2_ENCODING_ERROR: u32 = 5592;
pub const H_ERR_JP2_SIZE_TOO_BIG: u32 = 5593;
pub const H_ERR_JP2_INTERNAL_ERROR: u32 = 5594;
pub const H_ERR_HOBJ_NOT_ONLY_IMAGES: u32 = 5599;
pub const H_ERR_SOCKET_BLOCK: u32 = 5600;
pub const H_ERR_SOCKET_UNBLOCK: u32 = 5601;
pub const H_ERR_SOCKET_NO_CPAR: u32 = 5602;
pub const H_ERR_SOCKET_NO_IMAGE: u32 = 5603;
pub const H_ERR_SOCKET_NO_RL: u32 = 5604;
pub const H_ERR_SOCKET_NO_XLD: u32 = 5605;
pub const H_ERR_SOCKET_READ_DATA_FAILED: u32 = 5606;
pub const H_ERR_SOCKET_WRITE_DATA_FAILED: u32 = 5607;
pub const H_ERR_SOCKET_WRONG_BYTE_NUMBER: u32 = 5608;
pub const H_ERR_SOCKET_BUFFER_OVERFLOW: u32 = 5609;
pub const H_ERR_SOCKET_CANT_ASSIGN_FD: u32 = 5610;
pub const H_ERR_SOCKET_CANT_BIND: u32 = 5611;
pub const H_ERR_SOCKET_CANT_GET_PORTNUMBER: u32 = 5612;
pub const H_ERR_SOCKET_CANT_LISTEN: u32 = 5613;
pub const H_ERR_SOCKET_CANT_ACCEPT: u32 = 5614;
pub const H_ERR_SOCKET_CANT_CONNECT: u32 = 5615;
pub const H_ERR_SOCKET_GETHOSTBYNAME: u32 = 5616;
pub const H_ERR_SOCKET_ILLEGAL_TUPLE_TYPE: u32 = 5618;
pub const H_ERR_SOCKET_TIMEOUT: u32 = 5619;
pub const H_ERR_SOCKET_NA: u32 = 5620;
pub const H_ERR_SOCKET_NI: u32 = 5621;
pub const H_ERR_SOCKET_OOR: u32 = 5622;
pub const H_ERR_SOCKET_IS: u32 = 5623;
pub const H_ERR_SOCKET_DATA_TOO_LARGE: u32 = 5624;
pub const H_ERR_SOCKET_WRONG_TYPE: u32 = 5625;
pub const H_ERR_SOCKET_NO_PACKED_DATA: u32 = 5626;
pub const H_ERR_SOCKET_PARAM_FAILED: u32 = 5627;
pub const H_ERR_SOCKET_FORMAT_MISMATCH: u32 = 5628;
pub const H_ERR_SOCKET_INVALID_FORMAT: u32 = 5629;
pub const H_ERR_SOCKET_NO_SERIALIZED_ITEM: u32 = 5630;
pub const H_ERR_SOCKET_TLS_CONTEXT: u32 = 5631;
pub const H_ERR_SOCKET_TLS_CERT_KEY: u32 = 5632;
pub const H_ERR_SOCKET_TLS_HANDSHAKE: u32 = 5633;
pub const H_ERR_ARCINFO_TOO_MANY_XLDS: u32 = 5700;
pub const H_ERR_QUAT_WRONG_VERSION: u32 = 5750;
pub const H_ERR_QUAT_NOSITEM: u32 = 5751;
pub const H_ERR_HOM_MAT2D_WRONG_VERSION: u32 = 5752;
pub const H_ERR_HOM_MAT2D_NOSITEM: u32 = 5753;
pub const H_ERR_HOM_MAT3D_WRONG_VERSION: u32 = 5754;
pub const H_ERR_HOM_MAT3D_NOSITEM: u32 = 5755;
pub const H_ERR_TUPLE_WRONG_VERSION: u32 = 5756;
pub const H_ERR_TUPLE_NOSITEM: u32 = 5757;
pub const H_ERR_TUPLE_DTLFTHV: u32 = 5758;
pub const H_ERR_POSE_WRONG_VERSION: u32 = 5759;
pub const H_ERR_POSE_NOSITEM: u32 = 5760;
pub const H_ERR_CAM_PAR_WRONG_VERSION: u32 = 5761;
pub const H_ERR_CAM_PAR_NOSITEM: u32 = 5762;
pub const H_ERR_DUAL_QUAT_WRONG_VERSION: u32 = 5763;
pub const H_ERR_DUAL_QUAT_NOSITEM: u32 = 5764;
pub const H_ERR_NP: u32 = 6000;
pub const H_ERR_MEM: u32 = 6001;
pub const H_ERR_ICM: u32 = 6002;
pub const H_ERR_WMS: u32 = 6003;
pub const H_ERR_NOTMP: u32 = 6004;
pub const H_ERR_TMPNULL: u32 = 6005;
pub const H_ERR_CNFMEM: u32 = 6006;
pub const H_ERR_WMT: u32 = 6007;
pub const H_ERR_MEM_VID: u32 = 6021;
pub const H_ERR_NRA: u32 = 6041;
pub const H_ERR_IAD: u32 = 6040;
pub const H_ERR_INVALID_ALIGN: u32 = 6042;
pub const H_ERR_NULL_PTR: u32 = 6043;
pub const H_ERR_CP_FAILED: u32 = 6500;
pub const H_ERR_WOCPI: u32 = 7000;
pub const H_ERR_WOCPVN: u32 = 7001;
pub const H_ERR_WOCPT: u32 = 7002;
pub const H_ERR_WKT: u32 = 7003;
pub const H_ERR_IOOR: u32 = 7004;
pub const H_ERR_IHV: u32 = 7005;
pub const H_ERR_NISS: u32 = 7006;
pub const H_ERR_PROC_NULL: u32 = 7007;
pub const H_ERR_UNKN: u32 = 7105;
pub const H_ERR_WOON: u32 = 7200;
pub const H_ERR_OTSE: u32 = 7400;
pub const H_ERR_OTLE: u32 = 7401;
pub const H_ERR_OTFE: u32 = 7402;
pub const H_ERR_OPINP: u32 = 7403;
pub const H_ERR_TWC: u32 = 7404;
pub const H_ERR_CNN_DATA: u32 = 7701;
pub const H_ERR_CNN_MEM: u32 = 7702;
pub const H_ERR_CNN_IO_INVALID: u32 = 7703;
pub const H_ERR_CNN_IMPL_NOT_AVAILABLE: u32 = 7704;
pub const H_ERR_CNN_NUM_INPUTS_INVALID: u32 = 7705;
pub const H_ERR_CNN_IMPL_INVALID: u32 = 7706;
pub const H_ERR_CNN_TRAINING_NOT_SUP: u32 = 7707;
pub const H_ERR_CNN_GPU_REQUIRED: u32 = 7708;
pub const H_ERR_CNN_CUDA_LIBS_MISSING: u32 = 7709;
pub const H_ERR_OCR_CNN_RE: u32 = 7710;
pub const H_ERR_OCR_CNN_WGPN: u32 = 7711;
pub const H_ERR_OCR_CNN_EXCLUSIV_PARAM: u32 = 7712;
pub const H_ERR_CNN_WGPN: u32 = 7713;
pub const H_ERR_CNN_INVALID_LABELS: u32 = 7714;
pub const H_ERR_OCR_CNN_FILE_WRONG_VERSION: u32 = 7715;
pub const H_ERR_CNN_MULTIPLE_CLASSES: u32 = 7716;
pub const H_ERR_CNN_CUBLAS_LIBS_MISSING: u32 = 7717;
pub const H_ERR_CNN_CUDNN_LIBS_MISSING: u32 = 7718;
pub const H_ERR_OCR_FNF_FIND_TEXT_SUPPORT: u32 = 7719;
pub const H_ERR_CNN_TRAINING_FAILED: u32 = 7720;
pub const H_ERR_CNN_NO_PRETRAINED_WEIGHTS: u32 = 7721;
pub const H_ERR_CNN_INVALID_INPUT_SIZE: u32 = 7722;
pub const H_ERR_CNN_RESULT_NOT_AVAILABLE: u32 = 7723;
pub const H_ERR_CNN_INVALID_INPUT_DEPTH: u32 = 7724;
pub const H_ERR_CNN_DEPTH_NOT_AVAILABLE: u32 = 7725;
pub const H_ERR_CNN_INVALID_BATCH_SIZE: u32 = 7726;
pub const H_ERR_CNN_INVALID_PARAM_SPEC: u32 = 7727;
pub const H_ERR_CNN_EXCEEDS_MAX_MEM: u32 = 7728;
pub const H_ERR_CNN_BATCH_SIZE_OVERFLOW: u32 = 7729;
pub const H_ERR_CNN_INVALID_IMAGE_SIZE: u32 = 7730;
pub const H_ERR_CNN_INVALID_LAYER_PARAM_VALUE: u32 = 7731;
pub const H_ERR_CNN_INVALID_LAYER_PARAM_NUM: u32 = 7732;
pub const H_ERR_CNN_INVALID_LAYER_PARAM_TYPE: u32 = 7733;
pub const H_ERR_CNN_NUM_OUTPUTS_INVALID: u32 = 7734;
pub const H_ERR_CNN_INVALID_SHAPE: u32 = 7735;
pub const H_ERR_CNN_INVALID_INPUT_DATA: u32 = 7736;
pub const H_ERR_CNN_CUDNN_CTC_LOSS_BUGGY: u32 = 7737;
pub const H_ERR_CNN_INVALID_PADDING: u32 = 7738;
pub const H_ERR_CNN_IO_INVALID_LAYER_TYPE: u32 = 7740;
pub const H_ERR_CNN_INFERENCE_FAILED: u32 = 7741;
pub const H_ERR_CNN_RUNTIME_FAILED: u32 = 7742;
pub const H_ERR_GRAPH_INTERNAL: u32 = 7751;
pub const H_ERR_GRAPH_IO_INVALID: u32 = 7752;
pub const H_ERR_GRAPH_INVALID_INDEX: u32 = 7753;
pub const H_ERR_CNNGRAPH_INTERNAL: u32 = 7760;
pub const H_ERR_CNNGRAPH_IO_INVALID: u32 = 7761;
pub const H_ERR_CNNGRAPH_LAYER_INVALID: u32 = 7762;
pub const H_ERR_CNNGRAPH_NOINIT: u32 = 7763;
pub const H_ERR_CNNGRAPH_INVALID_MEM: u32 = 7764;
pub const H_ERR_CNNGRAPH_INVALID_NUML: u32 = 7765;
pub const H_ERR_CNNGRAPH_INVALID_IDX: u32 = 7766;
pub const H_ERR_CNNGRAPH_SPEC_STATUS: u32 = 7767;
pub const H_ERR_CNNGRAPH_NOCHANGE: u32 = 7768;
pub const H_ERR_CNNGRAPH_PREPROC: u32 = 7769;
pub const H_ERR_CNNGRAPH_DEGREE: u32 = 7770;
pub const H_ERR_CNNGRAPH_OUTSHAPE: u32 = 7771;
pub const H_ERR_CNNGRAPH_SPEC: u32 = 7772;
pub const H_ERR_CNNGRAPH_DEF: u32 = 7773;
pub const H_ERR_CNNGRAPH_NO_CLASS_CHANGE: u32 = 7774;
pub const H_ERR_CNNGRAPH_NO_IMAGE_RESIZE: u32 = 7775;
pub const H_ERR_CNNGRAPH_AUX_INDEX_OOB: u32 = 7776;
pub const H_ERR_CNNGRAPH_AUX_SPEC: u32 = 7777;
pub const H_ERR_CNNGRAPH_LAYER_UNSUPPORTED: u32 = 7778;
pub const H_ERR_DL_INTERNAL: u32 = 7779;
pub const H_ERR_DL_FILE_READ: u32 = 7780;
pub const H_ERR_DL_FILE_WRITE: u32 = 7781;
pub const H_ERR_DL_FILE_WRONG_VERSION: u32 = 7782;
pub const H_ERR_DL_INPUTS_MISSING: u32 = 7783;
pub const H_ERR_DL_INPUT_WRONG_BS: u32 = 7784;
pub const H_ERR_DL_INVALID_NAME: u32 = 7785;
pub const H_ERR_DL_DUPLICATE_NAME: u32 = 7786;
pub const H_ERR_DL_INVALID_OUTPUT: u32 = 7787;
pub const H_ERR_DL_PARAM_NOT_AVAILABLE: u32 = 7788;
pub const H_ERR_DL_INPUT_WRONG_LENGTH: u32 = 7789;
pub const H_ERR_DL_INPUT_WRONG_TYPE: u32 = 7790;
pub const H_ERR_DL_INPUT_WRONG_VALUES: u32 = 7791;
pub const H_ERR_DL_CLASS_IDS_NOT_UNIQUE: u32 = 7792;
pub const H_ERR_DL_CLASS_IDS_INVALID: u32 = 7793;
pub const H_ERR_DL_CLASS_IDS_INVALID_CONV: u32 = 7794;
pub const H_ERR_DL_TYPE_ALREADY_DEFINED: u32 = 7795;
pub const H_ERR_DL_NO_INFERENCE_INPUTS: u32 = 7796;
pub const H_ERR_DL_CLASS_IDS_INVALID_OVERLAP: u32 = 7797;
pub const H_ERR_DL_WRONG_OUTPUT_LAYER_NUM: u32 = 7798;
pub const H_ERR_DL_WRONG_BS_MULTIPLIER: u32 = 7799;
pub const H_ERR_DL_INPUT_WRONG_BS_WITH_MULTIPLIER: u32 = 7800;
pub const H_ERR_DL_READ_ONNX: u32 = 7801;
pub const H_ERR_DL_CLASS_IDS_MISSING: u32 = 7802;
pub const H_ERR_DL_WRITE_ONNX: u32 = 7803;
pub const H_ERR_DL_ONNX_LOADER: u32 = 7804;
pub const H_ERR_DL_FPN_SCALES: u32 = 7810;
pub const H_ERR_DL_FPN_INVALID_BACKBONE: u32 = 7811;
pub const H_ERR_DL_FPN_INVALID_FEATURE_MAP_SIZE: u32 = 7812;
pub const H_ERR_DL_FPN_INVALID_LEVELS: u32 = 7813;
pub const H_ERR_DL_ANCHOR: u32 = 7820;
pub const H_ERR_DL_DETECTOR_INVALID_PARAM: u32 = 7821;
pub const H_ERR_DL_DETECTOR_INVALID_PARAM_VALUE: u32 = 7822;
pub const H_ERR_DL_DETECTOR_INVALID_DOCKING_LAYER: u32 = 7823;
pub const H_ERR_DL_DETECTOR_INVALID_INSTANCE_TYPE: u32 = 7824;
pub const H_ERR_DL_NODE_MISSING_PARAM_NAME: u32 = 7830;
pub const H_ERR_DL_NODE_GENPARAM_NAME_NOT_ALLOWED: u32 = 7831;
pub const H_ERR_DL_NODE_INVALID_SPEC: u32 = 7832;
pub const H_ERR_DL_NODE_DUPLICATE_EDGE: u32 = 7833;
pub const H_ERR_DL_SOLVER_INVALID_TYPE: u32 = 7840;
pub const H_ERR_DL_SOLVER_INVALID_UPDATE_FORMULA: u32 = 7841;
pub const H_ERR_DL_HEATMAP_UNSUPPORTED_RUNTIME: u32 = 7850;
pub const H_ERR_DL_HEATMAP_UNSUPPORTED_MODEL_TYPE: u32 = 7851;
pub const H_ERR_DL_HEATMAP_UNSUPPORTED_METHOD: u32 = 7852;
pub const H_ERR_DL_HEATMAP_WRONG_TARGET_CLASS_ID: u32 = 7853;
pub const H_ERR_DL_GCAD_NETWORK_NOT_AVAILABLE: u32 = 7870;
pub const H_ERR_DL_ANOMALY_MODEL_INTERNAL: u32 = 7880;
pub const H_ERR_DL_ANOMALY_MODEL_UNTRAINED: u32 = 7881;
pub const H_ERR_DL_ANOMALY_MODEL_TRAINING_FAILED: u32 = 7882;
pub const H_ERR_DL_ANOMALY_MODEL_PARAM_TRAINED: u32 = 7883;
pub const H_ERR_DL_ANOMALY_MODEL_RESIZE: u32 = 7884;
pub const H_ERR_DL_ANOMALY_MODEL_DEPTH: u32 = 7885;
pub const H_ERR_DL_ANOMALY_MODEL_INPUT_DOMAIN: u32 = 7886;
pub const H_ERR_DEEP_OCR_MODEL_INTERNAL: u32 = 7890;
pub const H_ERR_DEEP_OCR_MODEL_INVALID_ALPHABET: u32 = 7891;
pub const H_ERR_DEEP_OCR_MODEL_INVALID_ALPHABET_IDX: u32 = 7892;
pub const H_ERR_DEEP_OCR_MODEL_INVALID_MODEL_TYPE: u32 = 7893;
pub const H_ERR_DEEP_OCR_MODEL_NOT_AVAILABLE: u32 = 7894;
pub const H_ERR_DEEP_OCR_MODEL_INVALID_ALPHABET_MAPPING_NO_ALPHABET: u32 = 7895;
pub const H_ERR_DEEP_OCR_MODEL_INVALID_ALPHABET_MAPPING_IDX: u32 = 7896;
pub const H_ERR_DEEP_OCR_MODEL_INVALID_ALPHABET_MAPPING_LEN: u32 = 7897;
pub const H_ERR_DEEP_OCR_MODEL_FILE_NOT_FOUND: u32 = 7898;
pub const H_ERR_DEEP_OCR_MODEL_UNKNOWN_CHAR: u32 = 7899;
pub const H_ERR_DEEP_OCR_MODEL_INVALID_WORD_LENGTH: u32 = 7900;
pub const H_ERR_DEEP_OCR_MODEL_ALPHABET_NOT_UNIQUE: u32 = 7901;
pub const H_ERR_DL_MODEL_APPLY_NO_DEF_OUTPUTS: u32 = 7910;
pub const H_ERR_DL_MODEL_UNSUPPORTED_GENPARAM: u32 = 7911;
pub const H_ERR_DL_MODEL_OPERATOR_UNSUPPORTED: u32 = 7912;
pub const H_ERR_DL_MODEL_RUNTIME: u32 = 7913;
pub const H_ERR_DL_MODEL_UNSUPPORTED_GENVALUE: u32 = 7914;
pub const H_ERR_DL_MODEL_INVALID_NUM_SAMPLES: u32 = 7915;
pub const H_ERR_DL_MODEL_CONVERTED_PARAM: u32 = 7916;
pub const H_ERR_DL_MODEL_CONVERTED_UNSUPPORTED: u32 = 7917;
pub const H_ERR_DL_INVALID_DATASET: u32 = 7925;
pub const H_ERR_DL_INVALID_SAMPLE_INDEX: u32 = 7926;
pub const H_ERR_DEEP_COUNTING_NOT_PREPARED: u32 = 7940;
pub const H_ERR_DEEP_COUNTING_UNSUPPORTED_BACKBONE: u32 = 7941;
pub const H_ERR_DEEP_COUNTING_PREPARE_UNSUPPORTED: u32 = 7942;
pub const H_ERR_DEEP_COUNTING_NO_BACKBONE: u32 = 7943;
pub const H_ERR_DL_DEVICE_UNSUPPORTED_PRECISION: u32 = 7960;
pub const H_ERR_DL_PRUNING_WRONG_DATA: u32 = 7980;
pub const H_ERR_DL_PRUNING_UNSUPPORTED_BY_CNN: u32 = 7981;
pub const H_ERR_DL_OOD_UNSUPPORTED_MODEL_TYPE: u32 = 7985;
pub const H_ERR_DL_OOD_INSUFFICIENT_SAMPLE_DIVERSITY: u32 = 7986;
pub const H_ERR_DL_OOD_INTERNAL_ERROR: u32 = 7987;
pub const H_ERR_DL_OOD_INVALID: u32 = 7988;
pub const H_ERR_DL_MODULE_NOT_LOADED: u32 = 7990;
pub const H_ERR_WPRN: u32 = 8000;
pub const H_ERR_RCNA: u32 = 8001;
pub const H_ERR_WPC: u32 = 8002;
pub const H_ERR_ORMF: u32 = 8101;
pub const H_ERR_EOFRMF: u32 = 8102;
pub const H_ERR_CVTRMF: u32 = 8103;
pub const H_ERR_LCNRMF: u32 = 8104;
pub const H_ERR_WCOVRMF: u32 = 8105;
pub const H_ERR_NEOFRMF: u32 = 8106;
pub const H_ERR_WRRA: u32 = 8107;
pub const H_ERR_MCN0: u32 = 8108;
pub const H_ERR_WF0: u32 = 8110;
pub const H_ERR_NWC: u32 = 8111;
pub const H_ERR_WRRV: u32 = 8112;
pub const H_ERR_ROVFL: u32 = 8113;
pub const H_ERR_EWPMF: u32 = 8114;
pub const H_ERR_WNUMM: u32 = 8120;
pub const H_ERR_WBEDN: u32 = 8200;
pub const H_ERR_NBEDA: u32 = 8201;
pub const H_ERR_BEDNAU: u32 = 8202;
pub const H_ERR_NBEDC: u32 = 8204;
pub const H_ERR_NTM: u32 = 8205;
pub const H_ERR_WISBE: u32 = 8206;
pub const H_ERR_UDNSSBE: u32 = 8207;
pub const H_ERR_SNBETS: u32 = 8208;
pub const H_ERR_WAMBE: u32 = 8209;
pub const H_ERR_WFMBE: u32 = 8210;
pub const H_ERR_PE_NPCTS: u32 = 8250;
pub const H_ERR_PE_INVMET: u32 = 8251;
pub const H_ERR_OCR_MEM1: u32 = 8300;
pub const H_ERR_OCR_WID: u32 = 8301;
pub const H_ERR_OCR1: u32 = 8302;
pub const H_ERR_OCR_NNI: u32 = 8303;
pub const H_ERR_OCR_NAI: u32 = 8304;
pub const H_ERR_OCR_WTP: u32 = 8305;
pub const H_ERR_OCR_WF: u32 = 8306;
pub const H_ERR_OCR_READ: u32 = 8307;
pub const H_ERR_OCR_NODES: u32 = 8308;
pub const H_ERR_OCR_EOF: u32 = 8309;
pub const H_ERR_OCR_INC1: u32 = 8310;
pub const H_ERR_OCR_INC2: u32 = 8311;
pub const H_ERR_WOCRTYPE: u32 = 8312;
pub const H_ERR_OCR_TRF: u32 = 8313;
pub const H_ERR_TRF_ITL: u32 = 8314;
pub const H_ERR_TRF_RTL: u32 = 8315;
pub const H_ERR_TRF_PT: u32 = 8316;
pub const H_ERR_TRF_WPW: u32 = 8317;
pub const H_ERR_OCR_NOSITEM: u32 = 8318;
pub const H_ERR_TRF_CON_EIO: u32 = 8319;
pub const H_ERR_OCR_MLP_NOCLASSFILE: u32 = 8320;
pub const H_ERR_OCR_MLP_WRCLASSVERS: u32 = 8321;
pub const H_ERR_OCR_MLP_NOSITEM: u32 = 8322;
pub const H_ERR_OCR_SVM_NOCLASSFILE: u32 = 8330;
pub const H_ERR_OCR_SVM_WRCLASSVERS: u32 = 8331;
pub const H_ERR_OCR_SVM_NOSITEM: u32 = 8332;
pub const H_ERR_OCR_KNN_NOCLASSFILE: u32 = 8333;
pub const H_ERR_OCR_KNN_NOSITEM: u32 = 8334;
pub const H_ERR_OCR_CNN_NOCLASSFILE: u32 = 8335;
pub const H_ERR_OCR_CNN_WRCLASSVERS: u32 = 8336;
pub const H_ERR_OCR_CNN_NOSITEM: u32 = 8337;
pub const H_ERR_OCR_RESULT_NOT_AVAILABLE: u32 = 8338;
pub const H_ERR_OCV_NI: u32 = 8350;
pub const H_ERR_WOCVTYPE: u32 = 8351;
pub const H_ERR_OCV_WNAME: u32 = 8353;
pub const H_ERR_OCV_II: u32 = 8354;
pub const H_ERR_OCV_NOTTR: u32 = 8355;
pub const H_ERR_OCV_NOSITEM: u32 = 8356;
pub const H_ERR_WLENGTH: u32 = 8370;
pub const H_ERR_NO_FUNCTION: u32 = 8371;
pub const H_ERR_NOT_ASCENDING: u32 = 8372;
pub const H_ERR_ILLEGAL_DIST: u32 = 8373;
pub const H_ERR_NOT_MONOTONIC: u32 = 8374;
pub const H_ERR_WFUNCTION: u32 = 8375;
pub const H_ERR_SAME_XVAL_CONV: u32 = 8376;
pub const H_ERR_GRID_CONNECT_POINTS: u32 = 8390;
pub const H_ERR_GRID_GEN_MAP: u32 = 8391;
pub const H_ERR_GRID_AUTO_ROT: u32 = 8392;
pub const H_ERR_CAL_NO_COMM_PAR: u32 = 8393;
pub const H_ERR_CAL_NEGVY: u32 = 8394;
pub const H_ERR_CAL_IDENTICAL_FP: u32 = 8395;
pub const H_ERR_CAL_LSCPNA: u32 = 8396;
pub const H_ERR_CAL_MARK_SEGM: u32 = 8397;
pub const H_ERR_CAL_CONT_EXT: u32 = 8398;
pub const H_ERR_CAL_NO_FP: u32 = 8399;
pub const H_ERR_CAL_LCALP: u32 = 8400;
pub const H_ERR_CAL_INCONSISTENT_FP: u32 = 8401;
pub const H_ERR_CAL_NCPF: u32 = 8402;
pub const H_ERR_CAL_RECPF: u32 = 8403;
pub const H_ERR_CAL_LTMTH: u32 = 8404;
pub const H_ERR_CAL_FRCP: u32 = 8405;
pub const H_ERR_CAL_PROJ: u32 = 8406;
pub const H_ERR_CAL_UNPRO: u32 = 8407;
pub const H_ERR_CAL_RICPF: u32 = 8408;
pub const H_ERR_CAL_FICP1: u32 = 8409;
pub const H_ERR_CAL_FICP2: u32 = 8410;
pub const H_ERR_CAL_FICP3: u32 = 8411;
pub const H_ERR_CAL_REPOS: u32 = 8412;
pub const H_ERR_CAL_FOPOS: u32 = 8413;
pub const H_ERR_CAL_OCPDF: u32 = 8414;
pub const H_ERR_CAL_OCPPS: u32 = 8415;
pub const H_ERR_CAL_EVECN: u32 = 8416;
pub const H_ERR_CAL_NPLAN: u32 = 8417;
pub const H_ERR_CAL_NNMAR: u32 = 8418;
pub const H_ERR_CAL_NNEQU: u32 = 8419;
pub const H_ERR_CAL_QETHM: u32 = 8420;
pub const H_ERR_CAL_NOELL: u32 = 8421;
pub const H_ERR_CAL_WPARV: u32 = 8422;
pub const H_ERR_CAL_WFRES: u32 = 8423;
pub const H_ERR_CAL_ECPDI: u32 = 8424;
pub const H_ERR_CAL_WEFLA: u32 = 8425;
pub const H_ERR_CAL_NOMER: u32 = 8426;
pub const H_ERR_CAL_WPTYP: u32 = 8427;
pub const H_ERR_CAL_WIMSZ: u32 = 8428;
pub const H_ERR_CAL_NPILS: u32 = 8429;
pub const H_ERR_CAL_DIACM: u32 = 8430;
pub const H_ERR_CAL_ORICP: u32 = 8431;
pub const H_ERR_CAL_CPNII: u32 = 8432;
pub const H_ERR_CAL_WNCME: u32 = 8433;
pub const H_ERR_CAL_UNKPG: u32 = 8434;
pub const H_ERR_CAL_NEGFL: u32 = 8435;
pub const H_ERR_CAL_TELNA: u32 = 8436;
pub const H_ERR_CAL_LSCNA: u32 = 8437;
pub const H_ERR_CAL_ELLDP: u32 = 8438;
pub const H_ERR_CAL_NOMF: u32 = 8439;
pub const H_ERR_CAL_NCONV: u32 = 8440;
pub const H_ERR_CAL_HYPNA: u32 = 8441;
pub const H_ERR_CAL_DISTORT: u32 = 8442;
pub const H_ERR_CAL_WREDGFILT: u32 = 8443;
pub const H_ERR_CAL_NEGPS: u32 = 8444;
pub const H_ERR_CAL_NEGTS: u32 = 8445;
pub const H_ERR_CAL_NEGRS: u32 = 8446;
pub const H_ERR_CAL_INVCAMPAR: u32 = 8447;
pub const H_ERR_CAL_ILLFL: u32 = 8448;
pub const H_ERR_CAL_ILLMAG: u32 = 8449;
pub const H_ERR_CAL_ILLIPD: u32 = 8450;
pub const H_ERR_CM_NOT_OPTIMIZED: u32 = 8451;
pub const H_ERR_CM_NOT_POSTPROCC: u32 = 8452;
pub const H_ERR_CM_NOT_INTERCONN: u32 = 8453;
pub const H_ERR_CM_CAMPAR_MISMCH: u32 = 8454;
pub const H_ERR_CM_CAMTYP_MISMCH: u32 = 8455;
pub const H_ERR_CM_CAMTYP_UNSUPD: u32 = 8456;
pub const H_ERR_CM_INVALD_CAMIDX: u32 = 8457;
pub const H_ERR_CM_INVALD_DESCID: u32 = 8458;
pub const H_ERR_CM_INVALD_COBJID: u32 = 8459;
pub const H_ERR_CM_UNDEFINED_CAM: u32 = 8460;
pub const H_ERR_CM_REPEATD_INDEX: u32 = 8461;
pub const H_ERR_CM_UNDEFI_CADESC: u32 = 8462;
pub const H_ERR_CM_NO_DESCR_FILE: u32 = 8463;
pub const H_ERR_CM_WR_DESCR_VERS: u32 = 8464;
pub const H_ERR_CM_ZERO_MOTION: u32 = 8465;
pub const H_ERR_CM_MULTICAM_UNSP: u32 = 8466;
pub const H_ERR_CM_INCMPLTE_DATA: u32 = 8467;
pub const H_ERR_CSM_NO_DESCR_FIL: u32 = 8468;
pub const H_ERR_CSM_WR_DESCR_VER: u32 = 8469;
pub const H_ERR_CM_CALTAB_NOT_AV: u32 = 8470;
pub const H_ERR_CM_INVAL_OBSERID: u32 = 8471;
pub const H_ERR_CSM_NOSITEM: u32 = 8472;
pub const H_ERR_CM_NOSITEM: u32 = 8473;
pub const H_ERR_CM_INV_TOOLPOSID: u32 = 8474;
pub const H_ERR_CM_UNDEFINED_TOO: u32 = 8475;
pub const H_ERR_CM_INVLD_MODL_TY: u32 = 8476;
pub const H_ERR_CSM_UNINIT_CAM: u32 = 8477;
pub const H_ERR_CM_NO_VALID_SOL: u32 = 8478;
pub const H_ERR_CM_INVAL_OBS_POSE: u32 = 8479;
pub const H_ERR_CM_TOO_FEW_POSES: u32 = 8480;
pub const H_ERR_CM_UNDEF_CAM_TYP: u32 = 8481;
pub const H_ERR_SM_INVLD_IMG_PAIRS_DISP_VAL: u32 = 8482;
pub const H_ERR_SM_INVLD_DISP_VAL: u32 = 8483;
pub const H_ERR_SM_NO_IM_PAIR: u32 = 8484;
pub const H_ERR_SM_NO_VIS_COLOR: u32 = 8485;
pub const H_ERR_SM_NO_RECONSTRUCT: u32 = 8486;
pub const H_ERR_SM_INVLD_BB_PARTITION: u32 = 8487;
pub const H_ERR_SM_INVLD_DISP_RANGE: u32 = 8488;
pub const H_ERR_SM_INVLD_BIN_PAR: u32 = 8489;
pub const H_ERR_SM_INVLD_MODL_TY: u32 = 8490;
pub const H_ERR_SM_NOT_PERSISTEN: u32 = 8491;
pub const H_ERR_SM_INVLD_BOU_BOX: u32 = 8492;
pub const H_ERR_SR_INVLD_IMG_SIZ: u32 = 8493;
pub const H_ERR_SR_BBOX_BHND_CAM: u32 = 8494;
pub const H_ERR_CAL_AMBIGUOUS: u32 = 8495;
pub const H_ERR_CAL_PCPND: u32 = 8496;
pub const H_ERR_CAL_FAILED: u32 = 8497;
pub const H_ERR_CAL_MISSING_DATA: u32 = 8498;
pub const H_ERR_CAL_FEWER_FOUR: u32 = 8499;
pub const H_ERR_NOAP: u32 = 8500;
pub const H_ERR_WPFV: u32 = 8501;
pub const H_ERR_MATCH_MODE: u32 = 8502;
pub const H_ERR_MATCH_OOR: u32 = 8503;
pub const H_ERR_NOTAP: u32 = 8505;
pub const H_ERR_NGTPTS: u32 = 8506;
pub const H_ERR_PDTL: u32 = 8507;
pub const H_ERR_NCC_NOSITEM: u32 = 8508;
pub const H_ERR_MATCH_NOSITEM: u32 = 8509;
pub const H_ERR_NTPTS: u32 = 8510;
pub const H_ERR_CGSMM: u32 = 8511;
pub const H_ERR_SMTL: u32 = 8512;
pub const H_ERR_SMNXLD: u32 = 8513;
pub const H_ERR_SM_NOSITEM: u32 = 8514;
pub const H_ERR_SM_CL_CONT: u32 = 8515;
pub const H_ERR_SM_NO_CLUT: u32 = 8516;
pub const H_ERR_SM_SAME_CL: u32 = 8517;
pub const H_ERR_SM_WRONG_CLCO: u32 = 8518;
pub const H_ERR_SM_CL_NEG: u32 = 8519;
pub const H_ERR_FIND_BOX_UNSUP_GENPARAM: u32 = 8520;
pub const H_ERR_COMP_DRT: u32 = 8530;
pub const H_ERR_COMP_SAMF: u32 = 8531;
pub const H_ERR_IGF_NC: u32 = 8532;
pub const H_ERR_MSA_TMN: u32 = 8533;
pub const H_ERR_CTTL: u32 = 8534;
pub const H_ERR_CMTL: u32 = 8535;
pub const H_ERR_COMP_NOSITEM: u32 = 8536;
pub const H_ERR_TRAIN_COMP_NOSITEM: u32 = 8537;
pub const H_ERR_VARIATION_WS: u32 = 8540;
pub const H_ERR_VARIATION_PREP: u32 = 8541;
pub const H_ERR_VARIATION_WRMD: u32 = 8542;
pub const H_ERR_VARIATION_NOVF: u32 = 8543;
pub const H_ERR_VARIATION_WVFV: u32 = 8544;
pub const H_ERR_VARIATION_TRDC: u32 = 8545;
pub const H_ERR_VARIATION_NOSITEM: u32 = 8546;
pub const H_ERR_MEASURE_NA: u32 = 8550;
pub const H_ERR_MEASURE_NI: u32 = 8551;
pub const H_ERR_MEASURE_OOR: u32 = 8552;
pub const H_ERR_MEASURE_IS: u32 = 8553;
pub const H_ERR_MEASURE_WS: u32 = 8554;
pub const H_ERR_MEASURE_NO_MODEL_FILE: u32 = 8555;
pub const H_ERR_MEASURE_WRONG_VERSION: u32 = 8556;
pub const H_ERR_MEASURE_TL: u32 = 8557;
pub const H_ERR_MEASURE_NOSITEM: u32 = 8558;
pub const H_ERR_METROLOGY_MODEL_NI: u32 = 8570;
pub const H_ERR_METROLOGY_OBJECT_INVALID: u32 = 8572;
pub const H_ERR_METROLOGY_FIT_NOT_ENOUGH_MEASURES: u32 = 8573;
pub const H_ERR_METROLOGY_NO_MODEL_FILE: u32 = 8575;
pub const H_ERR_METROLOGY_WRONG_VERSION: u32 = 8576;
pub const H_ERR_METROLOGY_NO_FUZZY_FUNC: u32 = 8577;
pub const H_ERR_METROLOGY_NOSITEM: u32 = 8578;
pub const H_ERR_METROLOGY_UNDEF_CAMPAR: u32 = 8579;
pub const H_ERR_METROLOGY_UNDEF_POSE: u32 = 8580;
pub const H_ERR_METROLOGY_SET_MODE: u32 = 8581;
pub const H_ERR_METROLOGY_OP_NOT_ALLOWED: u32 = 8582;
pub const H_ERR_METROLOGY_MULTI_POSE_CAM_PAR: u32 = 8583;
pub const H_ERR_METROLOGY_WRONG_INPUT_MODE: u32 = 8584;
pub const H_ERR_DLOPEN: u32 = 8600;
pub const H_ERR_DLCLOSE: u32 = 8601;
pub const H_ERR_DLLOOKUP: u32 = 8602;
pub const H_ERR_COMPONENT_NOT_INSTALLED: u32 = 8603;
pub const H_ERR_EAD_CAL_NII: u32 = 8650;
pub const H_ERR_WGSMFV: u32 = 8670;
pub const H_ERR_GSM_INVALID_RES_SCALE: u32 = 8671;
pub const H_ERR_GSM_INVALID_ANGLE: u32 = 8672;
pub const H_ERR_GSM_NEEDS_TRAINING: u32 = 8673;
pub const H_ERR_GSM_CONTRAST_HYS: u32 = 8674;
pub const H_ERR_GSM_CONTRAST_MIN_CONTRAST: u32 = 8675;
pub const H_ERR_GSM_ISO_SCALE_PAIR: u32 = 8676;
pub const H_ERR_GSM_ANISO_SCALE_ROW: u32 = 8677;
pub const H_ERR_GSM_ANISO_SCALE_COLUMN: u32 = 8678;
pub const H_ERR_GSM_ISO_NOT_SET: u32 = 8679;
pub const H_ERR_GSM_ANISO_NOT_SET: u32 = 8680;
pub const H_ERR_GSM_INVALID_METRIC_XLD: u32 = 8681;
pub const H_ERR_GSM_SAME_IDENTIFIER: u32 = 8682;
pub const H_ERR_SM_INCONSISTENT_PER_LEVEL: u32 = 8683;
pub const H_ERR_GSM_EXT_PAR_EST: u32 = 8684;
pub const H_ERR_BAR_WNOM: u32 = 8701;
pub const H_ERR_BAR_WNOE: u32 = 8702;
pub const H_ERR_BAR_UNCHAR: u32 = 8703;
pub const H_ERR_BAR_WRONGDESCR: u32 = 8705;
pub const H_ERR_BAR_EL_LENGTH: u32 = 8706;
pub const H_ERR_BAR_NO_REG: u32 = 8707;
pub const H_ERR_BAR_WRONGCODE: u32 = 8708;
pub const H_ERR_BAR_INTERNAL: u32 = 8709;
pub const H_ERR_BAR_NO_DECODED_SCANLINE: u32 = 8710;
pub const H_ERR_BC_EMPTY_MODEL_LIST: u32 = 8721;
pub const H_ERR_BC_TRAIN_ONLY_SINGLE: u32 = 8722;
pub const H_ERR_BC_GET_SPECIFIC: u32 = 8723;
pub const H_ERR_BC_GET_OBJ_MULTI: u32 = 8724;
pub const H_ERR_BC_WR_FILE_FORMAT: u32 = 8725;
pub const H_ERR_BC_WR_FILE_VERS: u32 = 8726;
pub const H_ERR_BC_NOT_PERSISTANT: u32 = 8727;
pub const H_ERR_BC_GRAY_OUT_OF_RANGE: u32 = 8728;
pub const H_ERR_NO_PERSISTENT_OP_CALL: u32 = 8729;
pub const H_ERR_BC_ZOOMED_ABORTED: u32 = 8730;
pub const H_ERR_BC_ZOOMED_INVALID_INPUT: u32 = 8731;
pub const H_ERR_BC_XCORR_INVALID_INPUT: u32 = 8740;
pub const H_ERR_BC_XCORR_TOO_MANY_BAD_ROWS: u32 = 8741;
pub const H_ERR_BC_XCORR_NO_CORRELATION: u32 = 8742;
pub const H_ERR_INVALID_SYNTAX_DICTIONARY: u32 = 8743;
pub const H_ERR_BAR2D_UNKNOWN_TYPE: u32 = 8800;
pub const H_ERR_BAR2D_WRONG_FOREGROUND: u32 = 8801;
pub const H_ERR_BAR2D_WRONG_SIZE: u32 = 8802;
pub const H_ERR_BAR2D_WRONG_SHAPE: u32 = 8803;
pub const H_ERR_BAR2D_WRONG_PARAM_NAME: u32 = 8804;
pub const H_ERR_BAR2D_WRONG_PARAM_VAL: u32 = 8805;
pub const H_ERR_BAR2D_WRONG_MODE: u32 = 8806;
pub const H_ERR_BAR2D_SYMBOL_ON_BORDER: u32 = 8807;
pub const H_ERR_BAR2D_MODULE_CONT_NUM: u32 = 8808;
pub const H_ERR_BAR2D_SYMBOL_FINDER: u32 = 8809;
pub const H_ERR_BAR2D_SYMBOL_DIMENSION: u32 = 8810;
pub const H_ERR_BAR2D_CLASSIF_FAILED: u32 = 8811;
pub const H_ERR_BAR2D_DECODING_FAILED: u32 = 8812;
pub const H_ERR_BAR2D_DECODING_READER: u32 = 8813;
pub const H_ERR_DC2D_GENERAL: u32 = 8820;
pub const H_ERR_DC2D_BROKEN_SIGN: u32 = 8821;
pub const H_ERR_DC2D_INVALID_HANDLE: u32 = 8822;
pub const H_ERR_DC2D_EMPTY_MODEL_LIST: u32 = 8823;
pub const H_ERR_DC2D_NOT_INITIALIZED: u32 = 8824;
pub const H_ERR_DC2D_INVALID_CANDIDATE: u32 = 8825;
pub const H_ERR_DC2D_INDEX_PARNUM: u32 = 8826;
pub const H_ERR_DC2D_EXCLUSIV_PARAM: u32 = 8827;
pub const H_ERR_DC2D_DEF_SET_NOT_FIRST: u32 = 8828;
pub const H_ERR_DC2D_INTERNAL_UNEXPECTED: u32 = 8829;
pub const H_ERR_DC2D_WRONG_PARAM_VALUE: u32 = 8830;
pub const H_ERR_DC2D_WRONG_PARAM_NAME: u32 = 8831;
pub const H_ERR_DC2D_WRONG_POLARITY: u32 = 8832;
pub const H_ERR_DC2D_WRONG_SYMBOL_SHAPE: u32 = 8833;
pub const H_ERR_DC2D_WRONG_SYMBOL_SIZE: u32 = 8834;
pub const H_ERR_DC2D_WRONG_MODULE_SIZE: u32 = 8835;
pub const H_ERR_DC2D_WRONG_MODULE_SHAPE: u32 = 8836;
pub const H_ERR_DC2D_WRONG_ORIENTATION: u32 = 8837;
pub const H_ERR_DC2D_WRONG_CONTRAST: u32 = 8838;
pub const H_ERR_DC2D_WRONG_MEAS_THRESH: u32 = 8839;
pub const H_ERR_DC2D_WRONG_ALT_MEAS_RED: u32 = 8840;
pub const H_ERR_DC2D_WRONG_SLANT: u32 = 8841;
pub const H_ERR_DC2D_WRONG_L_DIST: u32 = 8842;
pub const H_ERR_DC2D_WRONG_L_LENGTH: u32 = 8843;
pub const H_ERR_DC2D_WRONG_GAP: u32 = 8844;
pub const H_ERR_DC2D_WRONG_DEF_SET: u32 = 8845;
pub const H_ERR_DC2D_WRONG_TEXTURED: u32 = 8846;
pub const H_ERR_DC2D_WRONG_MIRRORED: u32 = 8847;
pub const H_ERR_DC2D_WRONG_CLASSIFICATOR: u32 = 8848;
pub const H_ERR_DC2D_WRONG_PERSISTENCE: u32 = 8849;
pub const H_ERR_DC2D_WRONG_MODEL_TYPE: u32 = 8850;
pub const H_ERR_DC2D_WRONG_MOD_ROI_PART: u32 = 8851;
pub const H_ERR_DC2D_WRONG_FP_TOLERANCE: u32 = 8852;
pub const H_ERR_DC2D_WRONG_MOD_ASPECT: u32 = 8853;
pub const H_ERR_DC2D_WRONG_SM_ROBUSTNESS: u32 = 8854;
pub const H_ERR_DC2D_WRONG_CONTRAST_TOL: u32 = 8855;
pub const H_ERR_DC2D_WRONG_AP_TOLERANCE: u32 = 8856;
pub const H_ERR_DC2D_READ_HEAD_FORMAT: u32 = 8860;
pub const H_ERR_DC2D_READ_HEAD_SIGN: u32 = 8861;
pub const H_ERR_DC2D_READ_LINE_FORMAT: u32 = 8862;
pub const H_ERR_DC2D_WRONG_MODULE_ASPECT: u32 = 8863;
pub const H_ERR_DC2D_WRONG_LAYER_NUM: u32 = 8864;
pub const H_ERR_DCD_READ_WRONG_VERSION: u32 = 8865;
pub const H_ERR_DC2D_NOSITEM: u32 = 8866;
pub const H_ERR_DC2D_WR_FILE_FORMAT: u32 = 8867;
pub const H_ERR_SM3D_WRONG_PARAM_NAME: u32 = 8900;
pub const H_ERR_SM3D_WRONG_NUM_LEVELS: u32 = 8901;
pub const H_ERR_SM3D_WRONG_OPTIMIZATION: u32 = 8902;
pub const H_ERR_SM3D_WRONG_METRIC: u32 = 8903;
pub const H_ERR_SM3D_WRONG_MIN_FACE_ANGLE: u32 = 8904;
pub const H_ERR_SM3D_WRONG_MIN_SIZE: u32 = 8905;
pub const H_ERR_SM3D_WRONG_MODEL_TOLERANCE: u32 = 8906;
pub const H_ERR_SM3D_WRONG_FAST_POSE_REF: u32 = 8907;
pub const H_ERR_SM3D_WRONG_LOWEST_MODEL_LEVEL: u32 = 8908;
pub const H_ERR_SM3D_WRONG_PART_SIZE: u32 = 8909;
pub const H_ERR_SM3D_PROJECTION_TOO_LARGE: u32 = 8910;
pub const H_ERR_SM3D_WRONG_OPENGL_ACCURACY: u32 = 8911;
pub const H_ERR_SM3D_WRONG_RECOMPUTE_SCORE: u32 = 8913;
pub const H_ERR_SM3D_WRONG_LON_MIN: u32 = 8920;
pub const H_ERR_SM3D_WRONG_LON_MAX: u32 = 8921;
pub const H_ERR_SM3D_WRONG_LAT_MIN: u32 = 8922;
pub const H_ERR_SM3D_WRONG_LAT_MAX: u32 = 8923;
pub const H_ERR_SM3D_WRONG_ROL_MIN: u32 = 8924;
pub const H_ERR_SM3D_WRONG_ROL_MAX: u32 = 8925;
pub const H_ERR_SM3D_WRONG_DIST_MIN: u32 = 8926;
pub const H_ERR_SM3D_WRONG_DIST_MAX: u32 = 8927;
pub const H_ERR_SM3D_WRONG_NUM_MATCHES: u32 = 8928;
pub const H_ERR_SM3D_WRONG_MAX_OVERLAP: u32 = 8929;
pub const H_ERR_SM3D_WRONG_POSE_REFINEMENT: u32 = 8930;
pub const H_ERR_SM3D_WRONG_COV_POSE_MODE: u32 = 8931;
pub const H_ERR_SM3D_WRONG_OUTLIER_SUP: u32 = 8932;
pub const H_ERR_SM3D_WRONG_BORDER_MODEL: u32 = 8933;
pub const H_ERR_SM3D_UNDEFINED_POSE: u32 = 8940;
pub const H_ERR_SM3D_NO_SM3D_FILE: u32 = 8941;
pub const H_ERR_SM3D_WRONG_FILE_VERSION: u32 = 8942;
pub const H_ERR_SM3D_MTL: u32 = 8943;
pub const H_ERR_SM3D_NO_OM3D_FACES: u32 = 8944;
pub const H_ERR_SM3D_NOSITEM: u32 = 8945;
pub const H_ERR_SM3D_WRONG_UNION_ADJACENT_CONTOURS: u32 = 8946;
pub const H_ERR_DESCR_NODESCRFILE: u32 = 8960;
pub const H_ERR_DESCR_WRDESCRVERS: u32 = 8961;
pub const H_ERR_DM_WRONG_NUM_CIRC_RADIUS: u32 = 8962;
pub const H_ERR_DM_WRONG_NUM_CHECK_NEIGH: u32 = 8963;
pub const H_ERR_DM_WRONG_NUM_MIN_CHECK_NEIGH: u32 = 8964;
pub const H_ERR_DM_WRONG_NUM_MIN_SCORE: u32 = 8965;
pub const H_ERR_DM_WRONG_NUM_SIGMAGRAD: u32 = 8966;
pub const H_ERR_DM_WRONG_NUM_SIGMAINT: u32 = 8967;
pub const H_ERR_DM_WRONG_NUM_ALPHA: u32 = 8968;
pub const H_ERR_DM_WRONG_NUM_THRESHOLD: u32 = 8969;
pub const H_ERR_DM_WRONG_NUM_DEPTH: u32 = 8970;
pub const H_ERR_DM_WRONG_NUM_TREES: u32 = 8971;
pub const H_ERR_DM_WRONG_NUM_MIN_SCORE_DESCR: u32 = 8972;
pub const H_ERR_DM_WRONG_NUM_PATCH_SIZE: u32 = 8973;
pub const H_ERR_DM_WRONG_TILT: u32 = 8974;
pub const H_ERR_DM_WRONG_PAR_GUIDE: u32 = 8975;
pub const H_ERR_DM_WRONG_PAR_SUBPIX: u32 = 8976;
pub const H_ERR_DM_TOO_FEW_POINTS: u32 = 8977;
pub const H_ERR_DM_WRONG_NUM_MINROT: u32 = 8978;
pub const H_ERR_DM_WRONG_NUM_MAXROT: u32 = 8979;
pub const H_ERR_DM_WRONG_NUM_MINSCALE: u32 = 8980;
pub const H_ERR_DM_WRONG_NUM_MAXSCALE: u32 = 8981;
pub const H_ERR_DM_WRONG_NUM_MASKSIZEGRD: u32 = 8982;
pub const H_ERR_DM_WRONG_NUM_MASKSIZESMOOTH: u32 = 8983;
pub const H_ERR_BROKEN_MODEL: u32 = 8984;
pub const H_ERR_DM_WRONG_DESCR_TYPE: u32 = 8985;
pub const H_ERR_DM_WRONG_PAR_MATCHER: u32 = 8986;
pub const H_ERR_DM_TOO_MANY_CLASSES: u32 = 8987;
pub const H_ERR_DESCR_NOSITEM: u32 = 8988;
pub const H_ERR_NOT_IMPL: u32 = 9000;
pub const H_ERR_WIT: u32 = 9001;
pub const H_ERR_WIC: u32 = 9002;
pub const H_ERR_UNDI: u32 = 9003;
pub const H_ERR_WIS: u32 = 9004;
pub const H_ERR_WCN: u32 = 9005;
pub const H_ERR_STRTL: u32 = 9006;
pub const H_ERR_WITFO: u32 = 9007;
pub const H_ERR_NIIT: u32 = 9008;
pub const H_ERR_NOCIMA: u32 = 9009;
pub const H_ERR_DEMO_NOFG: u32 = 9010;
pub const H_ERR_DEMO_NOPA: u32 = 9011;
pub const H_ERR_IEUNKV: u32 = 9020;
pub const H_ERR_WPFO: u32 = 9021;
pub const H_ERR_IDTS: u32 = 9022;
pub const H_ERR_CNCLDRW: u32 = 9023;
pub const H_ERR_REGEX_MATCH: u32 = 9024;
pub const H_ERR_STUD_OPNA: u32 = 9050;
pub const H_ERR_STUD_PANA: u32 = 9051;
pub const H_ERR_STUD_FGNA: u32 = 9052;
pub const H_ERR_NDPA: u32 = 9053;
pub const H_ERR_WR_OBJ_TYPE: u32 = 9054;
pub const H_ERR_OP_DISABLED: u32 = 9055;
pub const H_ERR_TMU: u32 = 9100;
pub const H_ERR_NUS: u32 = 9101;
pub const H_ERR_NEE: u32 = 9102;
pub const H_ERR_PDDL: u32 = 9150;
pub const H_ERR_MNI: u32 = 9200;
pub const H_ERR_SVD_CNVRG: u32 = 9201;
pub const H_ERR_SVD_FEWROW: u32 = 9202;
pub const H_ERR_TQLI_CNVRG: u32 = 9203;
pub const H_ERR_JACOBI_CNVRG: u32 = 9204;
pub const H_ERR_MATRIX_SING: u32 = 9205;
pub const H_ERR_MATCH_CNVRG: u32 = 9206;
pub const H_ERR_MAT_UNDEF: u32 = 9207;
pub const H_ERR_MAT_WDIM: u32 = 9208;
pub const H_ERR_MAT_NSQR: u32 = 9209;
pub const H_ERR_MAT_FAIL: u32 = 9210;
pub const H_ERR_MAT_NPD: u32 = 9211;
pub const H_ERR_MAT_DBZ: u32 = 9212;
pub const H_ERR_MAT_NUT: u32 = 9213;
pub const H_ERR_MAT_NLT: u32 = 9214;
pub const H_ERR_MAT_NEG: u32 = 9215;
pub const H_ERR_MAT_UNCHAR: u32 = 9216;
pub const H_ERR_MAT_NOT_COMPLETE: u32 = 9217;
pub const H_ERR_MAT_READ: u32 = 9218;
pub const H_ERR_MAT_COMPLEX: u32 = 9219;
pub const H_ERR_WMATEXP: u32 = 9220;
pub const H_ERR_MAT_WRONG_VERSION: u32 = 9221;
pub const H_ERR_MAT_NOSITEM: u32 = 9222;
pub const H_ERR_WNODE: u32 = 9230;
pub const H_ERR_CMP_INCONSISTENT: u32 = 9231;
pub const H_ERR_LAPACK_PAR: u32 = 9250;
pub const H_ERR_STRI_NPNT: u32 = 9260;
pub const H_ERR_STRI_COLL: u32 = 9261;
pub const H_ERR_STRI_IDPNT: u32 = 9262;
pub const H_ERR_STRI_NALLOC: u32 = 9263;
pub const H_ERR_STRI_DEGEN: u32 = 9264;
pub const H_ERR_STRI_ITRI: u32 = 9265;
pub const H_ERR_STRI_SELFINT: u32 = 9266;
pub const H_ERR_STRI_INCONS: u32 = 9267;
pub const H_ERR_STRI_AMBINT: u32 = 9268;
pub const H_ERR_STRI_AMBARC: u32 = 9269;
pub const H_ERR_STRI_ILLPAR: u32 = 9270;
pub const H_ERR_TRI_NPNT: u32 = 9280;
pub const H_ERR_TRI_COLL: u32 = 9281;
pub const H_ERR_TRI_IDPNT: u32 = 9282;
pub const H_ERR_TRI_IDPNTIN: u32 = 9283;
pub const H_ERR_TRI_NALLOC: u32 = 9284;
pub const H_ERR_TRI_ITRI: u32 = 9285;
pub const H_ERR_TRI_OUTR: u32 = 9286;
pub const H_ERR_TRI_LOCINC: u32 = 9290;
pub const H_ERR_WSPVP: u32 = 9300;
pub const H_ERR_DQ_ZERO_NORM: u32 = 9310;
pub const H_ERR_TIMEOUT: u32 = 9400;
pub const H_ERR_WRONG_TIMEOUT: u32 = 9401;
pub const H_ERR_DEFORM_WRONG_NUM_CLUSTER: u32 = 9450;
pub const H_ERR_DEFORM_WRONG_NUM_MIN_SIZE: u32 = 9451;
pub const H_ERR_DEFORM_WRONG_NUM_LSQ: u32 = 9452;
pub const H_ERR_DEFORM_WRONG_ANGLE_STEP: u32 = 9453;
pub const H_ERR_DEFORM_WRONG_SCALE_R_STEP: u32 = 9454;
pub const H_ERR_DEFORM_WRONG_SCALE_C_STEP: u32 = 9455;
pub const H_ERR_DEFORM_WRONG_MAX_ANGLE: u32 = 9456;
pub const H_ERR_DEFORM_WRONG_MAX_ANISO: u32 = 9457;
pub const H_ERR_DEFORM_WRONG_MIN_SIZE: u32 = 9458;
pub const H_ERR_DEFORM_WRONG_COV_POSE_MODE: u32 = 9459;
pub const H_ERR_DEFORM_NO_CALIBRATION_INFO: u32 = 9460;
pub const H_ERR_DEFORM_WRONG_PARAM_NAME: u32 = 9461;
pub const H_ERR_DEFORM_IMAGE_TO_CAMERA_DIFF: u32 = 9462;
pub const H_ERR_DEFORM_NO_MODEL_IN_FILE: u32 = 9463;
pub const H_ERR_DEFORM_WRONG_VERSION: u32 = 9464;
pub const H_ERR_DEFORM_WRONG_SMOOTH_DEFORM: u32 = 9465;
pub const H_ERR_DEFORM_WRONG_EXPAND_BORDER: u32 = 9466;
pub const H_ERR_DEFORM_ORIGIN_OUTSIDE_TEMPLATE: u32 = 9467;
pub const H_ERR_DEFORM_NOSITEM: u32 = 9468;
pub const H_ERR_VIEW_ESTIM_FAIL: u32 = 9499;
pub const H_ERR_SFM_NO_POINTS: u32 = 9500;
pub const H_ERR_SFM_NO_FACES: u32 = 9501;
pub const H_ERR_SFM_NO_NORMALS: u32 = 9502;
pub const H_ERR_SFM_NO_VISIBILITY: u32 = 9503;
pub const H_ERR_SFM_NO_3D_EDGES: u32 = 9504;
pub const H_ERR_SFM_NO_SFM_FILE: u32 = 9506;
pub const H_ERR_SFM_WRONG_FILE_VERSION: u32 = 9507;
pub const H_ERR_SFM_NOSITEM: u32 = 9508;
pub const H_ERR_SFM_TOO_MANY_SYMMS: u32 = 9509;
pub const H_ERR_OM3D_INVALID_FILE: u32 = 9510;
pub const H_ERR_OM3D_INVALID_MODEL: u32 = 9511;
pub const H_ERR_OM3D_UNKNOWN_FILE_TYPE: u32 = 9512;
pub const H_ERR_OM3D_WRONG_FILE_VERSION: u32 = 9513;
pub const H_ERR_OM3D_MISSING_ATTRIB: u32 = 9514;
pub const H_ERR_OM3D_MISSING_ATTRIB_V_COORD: u32 = 9515;
pub const H_ERR_OM3D_MISSING_ATTRIB_V_NORMALS: u32 = 9516;
pub const H_ERR_OM3D_MISSING_ATTRIB_F_TRIANGLES: u32 = 9517;
pub const H_ERR_OM3D_MISSING_ATTRIB_F_LINES: u32 = 9518;
pub const H_ERR_OM3D_MISSING_ATTRIB_F_TRINEIGB: u32 = 9519;
pub const H_ERR_OM3D_MISSING_ATTRIB_F_POLYGONS: u32 = 9520;
pub const H_ERR_OM3D_MISSING_ATTRIB_V_2DMAP: u32 = 9521;
pub const H_ERR_OM3D_MISSING_ATTRIB_O_PRIMITIVE: u32 = 9522;
pub const H_ERR_OM3D_MISSING_ATTRIB_SHAPE_MODEL: u32 = 9523;
pub const H_ERR_OM3D_MISSING_ATTRIB_EXTENDED: u32 = 9524;
pub const H_ERR_OM3D_NOSITEM: u32 = 9525;
pub const H_ERR_OM3D_MISSING_O_PRIMITIVE_EXTENSION: u32 = 9526;
pub const H_ERR_OM3D_CONTAIN_ATTRIB_F_TRIANGLES: u32 = 9527;
pub const H_ERR_OM3D_CONTAIN_ATTRIB_F_LINES: u32 = 9528;
pub const H_ERR_OM3D_CONTAIN_ATTRIB_F_POLYGONS: u32 = 9529;
pub const H_ERR_OM3D_ISOLATED_OBJECT: u32 = 9530;
pub const H_ERR_OM3D_SET_ALL_COORD: u32 = 9531;
pub const H_ERR_OM3D_SET_ALL_NORMALS: u32 = 9532;
pub const H_ERR_OM3D_NUM_NOT_FIT_COORD: u32 = 9533;
pub const H_ERR_OM3D_NUM_NOT_FIT_NORMALS: u32 = 9534;
pub const H_ERR_OM3D_NUM_NOT_FIT_TRIANGLES: u32 = 9535;
pub const H_ERR_OM3D_NUM_NOT_FIT_POLYGONS: u32 = 9536;
pub const H_ERR_OM3D_NUM_NOT_FIT_LINES: u32 = 9537;
pub const H_ERR_OM3D_NUM_NOT_FIT_2DMAP: u32 = 9538;
pub const H_ERR_OM3D_NUM_NOT_FIT_EXTENDED: u32 = 9539;
pub const H_ERR_OM3D_FACE_INTENSITY_WITH_POINTS: u32 = 9540;
pub const H_ERR_OM3D_ATTRIBUTE_NOT_SUPPORTED: u32 = 9541;
pub const H_ERR_OM3D_NOT_IN_BB: u32 = 9542;
pub const H_ERR_DIF_TOO_SMALL: u32 = 9543;
pub const H_ERR_MINTH_TOO_SMALL: u32 = 9544;
pub const H_ERR_OM3D_WRONG_DIMENSION: u32 = 9545;
pub const H_ERR_OM3D_MISSING_DIMENSION: u32 = 9546;
pub const H_ERR_SF_OM3D_TRIANGLES_NOT_SUITABLE: u32 = 9550;
pub const H_ERR_SF_OM3D_FEW_POINTS: u32 = 9551;
pub const H_ERR_NO_SERIALIZED_ITEM: u32 = 9580;
pub const H_ERR_END_OF_FILE: u32 = 9581;
pub const H_ERR_SID_WRONG_RESIZE_METHOD: u32 = 9600;
pub const H_ERR_SID_WRONG_RESIZE_VALUE: u32 = 9601;
pub const H_ERR_SID_WRONG_RATING_METHOD: u32 = 9602;
pub const H_ERR_SID_NO_IMAGE_INFO_TYPE: u32 = 9603;
pub const H_ERR_SID_MODEL_NO_COLOR: u32 = 9604;
pub const H_ERR_SID_MODEL_NO_TEXTURE: u32 = 9605;
pub const H_ERR_SID_NO_IMAGE_INFO: u32 = 9606;
pub const H_ERR_SID_NO_UNPREPARED_DATA: u32 = 9607;
pub const H_ERR_SID_MODEL_NOT_PREPARED: u32 = 9608;
pub const H_ERR_SID_NO_UNTRAINED_DATA: u32 = 9609;
pub const H_ERR_SID_MODEL_NOT_TRAINED: u32 = 9610;
pub const H_ERR_SID_NO_RESULT_DATA: u32 = 9611;
pub const H_ERR_SID_NUM_TRAIN_OBJ: u32 = 9612;
pub const H_ERR_FINI_USR_THREADS: u32 = 9700;
pub const H_ERR_NO_ENCRYPTED_ITEM: u32 = 9800;
pub const H_ERR_WRONG_PASSWORD: u32 = 9801;
pub const H_ERR_ENCRYPT_FAILED: u32 = 9802;
pub const H_ERR_DECRYPT_FAILED: u32 = 9803;
pub const H_ERR_START_EXT: u32 = 10000;
pub const H_ERR_NO_LICENSE: u32 = 2003;
pub const H_ERR_NO_MODULES: u32 = 2005;
pub const H_ERR_NO_LIC_OPER: u32 = 2006;
pub const H_ERR_LAST_LIC_ERROR: u32 = 2384;
pub const IMAGE_INDEX: u32 = 1;
pub const HAG_PAR_INDEPENDENT: u32 = 0;
pub const HAG_PAR_NO_RESTRICT: u32 = 1;
pub const HAG_PAR_LOCAL: u32 = 2;
pub const HAG_PAR_MUTUAL: u32 = 4;
pub const HAG_PAR_EXCLUSIVE: u32 = 8;
pub const HAG_KW_CHORD_NUM: u32 = 1;
pub const HAG_KW_MIN_COSTS: u32 = 16300;
pub const HAG_KW_PAR_COSTS: u32 = 308;
pub const HAG_KW_CPU_RATING: u32 = 10;
pub const HAG_PAR_NOCT: u32 = 1;
pub const HAG_PAR_TUCT_ADD: u32 = 2;
pub const HAG_PAR_CHCT_ADD: u32 = 4;
pub const HAG_PAR_RECT_ADD: u32 = 8;
pub const HAG_PAR_TUCT_MIN: u32 = 16;
pub const HAG_PAR_CHCT_MIN: u32 = 32;
pub const HAG_PAR_RECT_MIN: u32 = 64;
pub const HAG_PAR_TUCT_MAX: u32 = 128;
pub const HAG_PAR_CHCT_MAX: u32 = 256;
pub const HAG_PAR_RECT_MAX: u32 = 512;
pub const HAG_PAR_TUCT_CON: u32 = 1024;
pub const HAG_PAR_CHCT_CON: u32 = 2048;
pub const HAG_PAR_RECT_CON: u32 = 4096;
pub const HAG_PAR_TUCT: u32 = 1170;
pub const HAG_PAR_CHCT: u32 = 2340;
pub const HAG_PAR_RECT: u32 = 4680;
pub const HAG_PAR_REG_NONE: u32 = 0;
pub const HAG_PAR_REG_CONSI: u32 = 1;
pub const HAG_PAR_REG_CONMU: u32 = 2;
pub const HAG_PAR_REG_CONMAN: u32 = 4;
pub const HAG_PAR_SEQ: u32 = 0;
pub const HAG_PAR_MT: u32 = 1;
pub const HAG_PAR_FORCE: u32 = 2;
pub const HAG_PAR_NONE: u32 = 4;
pub const HAG_PAR_TUPL: u32 = 32;
pub const HAG_PAR_CHNL: u32 = 64;
pub const HAG_PAR_RESC: u32 = 128;
pub const HAG_PAR_REIF: u32 = 256;
pub const HAG_PAR_PART: u32 = 512;
pub const HAG_PAR_PAIF: u32 = 1024;
pub const HAG_PAR_SPLIT_NONE: u32 = 0;
pub const HAG_PAR_SPLIT_DOMAIN: u32 = 384;
pub const HAG_PAR_INTERFACE: u32 = 352;
pub const HAG_PAR_INTERNAL: u32 = 1536;
pub const HAG_PAR_ALL: u32 = 2016;
pub const HAG_PAR_TUPL_MT: u32 = 33;
pub const HAG_PAR_CHNL_MT: u32 = 65;
pub const HAG_PAR_RESC_MT: u32 = 129;
pub const HAG_PAR_REIF_MT: u32 = 257;
pub const HAG_PAR_DOM_MT: u32 = 385;
pub const HAG_PAR_PART_MT: u32 = 513;
pub const HAG_PAR_PAIF_MT: u32 = 1025;
pub const HAG_PAR_DPAR_MT: u32 = 2017;
pub const HAG_PAR_TUPLED: u32 = 16777216;
pub const HAG_PAR_CHNLED: u32 = 33554432;
pub const HAG_PAR_RESCED: u32 = 67108864;
pub const HAG_PAR_REIFED: u32 = 134217728;
pub const COMPUTE_DEVICE_NONE: u32 = 0;
pub const COMPUTE_DEVICE_OpenCL: u32 = 1;
pub const COMPUTE_DEVICE_BIT_NONE: u32 = 0;
pub const COMPUTE_DEVICE_BIT_OpenCL: u32 = 2;
pub const MAX_COORD: u32 = 32767;
pub const MIN_COORD: i32 = -32767;
pub const HISTO_LEN: u32 = 256;
pub const MAX_DISTR: u32 = 513;
pub const NULL_DISTR: u32 = 256;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const UNDEF_TYPE: i32 = -1;
pub const HVECTOR_UNDEF: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
unsafe extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
unsafe extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
unsafe extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
unsafe extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _div_t"][::std::mem::size_of::<_div_t>() - 8usize];
    ["Alignment of _div_t"][::std::mem::align_of::<_div_t>() - 4usize];
    ["Offset of field: _div_t::quot"][::std::mem::offset_of!(_div_t, quot) - 0usize];
    ["Offset of field: _div_t::rem"][::std::mem::offset_of!(_div_t, rem) - 4usize];
};
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldiv_t"][::std::mem::size_of::<_ldiv_t>() - 8usize];
    ["Alignment of _ldiv_t"][::std::mem::align_of::<_ldiv_t>() - 4usize];
    ["Offset of field: _ldiv_t::quot"][::std::mem::offset_of!(_ldiv_t, quot) - 0usize];
    ["Offset of field: _ldiv_t::rem"][::std::mem::offset_of!(_ldiv_t, rem) - 4usize];
};
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _lldiv_t"][::std::mem::size_of::<_lldiv_t>() - 16usize];
    ["Alignment of _lldiv_t"][::std::mem::align_of::<_lldiv_t>() - 8usize];
    ["Offset of field: _lldiv_t::quot"][::std::mem::offset_of!(_lldiv_t, quot) - 0usize];
    ["Offset of field: _lldiv_t::rem"][::std::mem::offset_of!(_lldiv_t, rem) - 8usize];
};
pub type lldiv_t = _lldiv_t;
unsafe extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
    -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDOUBLE"][::std::mem::size_of::<_LDOUBLE>() - 10usize];
    ["Alignment of _LDOUBLE"][::std::mem::align_of::<_LDOUBLE>() - 1usize];
    ["Offset of field: _LDOUBLE::ld"][::std::mem::offset_of!(_LDOUBLE, ld) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_DOUBLE"][::std::mem::size_of::<_CRT_DOUBLE>() - 8usize];
    ["Alignment of _CRT_DOUBLE"][::std::mem::align_of::<_CRT_DOUBLE>() - 8usize];
    ["Offset of field: _CRT_DOUBLE::x"][::std::mem::offset_of!(_CRT_DOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_FLOAT"][::std::mem::size_of::<_CRT_FLOAT>() - 4usize];
    ["Alignment of _CRT_FLOAT"][::std::mem::align_of::<_CRT_FLOAT>() - 4usize];
    ["Offset of field: _CRT_FLOAT::f"][::std::mem::offset_of!(_CRT_FLOAT, f) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LONGDOUBLE"][::std::mem::size_of::<_LONGDOUBLE>() - 8usize];
    ["Alignment of _LONGDOUBLE"][::std::mem::align_of::<_LONGDOUBLE>() - 8usize];
    ["Offset of field: _LONGDOUBLE::x"][::std::mem::offset_of!(_LONGDOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDBL12"][::std::mem::size_of::<_LDBL12>() - 12usize];
    ["Alignment of _LDBL12"][::std::mem::align_of::<_LDBL12>() - 1usize];
    ["Offset of field: _LDBL12::ld12"][::std::mem::offset_of!(_LDBL12, ld12) - 0usize];
};
unsafe extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
unsafe extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _fpreset();
}
unsafe extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
unsafe extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
unsafe extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
unsafe extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isnan(_X: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn fpreset();
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type HBOOL = bool;
pub type HBYTE = u8;
pub type HINT = ::std::os::raw::c_int;
pub type HUINT = ::std::os::raw::c_uint;
pub type DOUBLE8 = f64;
pub type INT1 = i8;
pub type UINT1 = u8;
pub type INT2 = i16;
pub type UINT2 = u16;
pub type INT4 = i32;
pub type UINT4 = u32;
pub type HINT4_8 = ::std::os::raw::c_longlong;
pub type INT4_8 = ::std::os::raw::c_longlong;
pub type UINT4_8 = ::std::os::raw::c_ulonglong;
pub type Hlong = INT4_8;
pub type Hulong = UINT4_8;
pub type HINT8 = i64;
pub type HUINT8 = u64;
pub type MACHINE_WORD = isize;
pub type VOIDP = *mut ::std::os::raw::c_void;
pub type Herror = u32;
pub type Hkey = *mut ::std::os::raw::c_long;
pub type Hproc_handle = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HStreamBufferT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HhandleListT {
    _unused: [u8; 0],
}
#[doc = "< No signal"]
pub const HSignalTypeEnum_eSignalNone: HSignalTypeEnum = 0;
#[doc = "< Initiate abort: stop running, abort mutexes etc."]
pub const HSignalTypeEnum_eSignalStartAbort: HSignalTypeEnum = 1;
#[doc = "< Finalize abort, wait for resources to finish"]
pub const HSignalTypeEnum_eSignalAbort: HSignalTypeEnum = 2;
#[doc = "< After abortion is complete, restore mutexes etc."]
pub const HSignalTypeEnum_eSignalRestore: HSignalTypeEnum = 3;
#[doc = "/\n/** HSignalTypeEnum: List of signals that can be sent to handles\n\n This enum defines a set of signals that can be sent to the\n signalling callback of handles.  Note that the callback functions must\n ignore any signal that they do not understand."]
pub type HSignalTypeEnum = ::std::os::raw::c_int;
pub type HHandleSerializeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: Hproc_handle,
        arg2: *mut HStreamBufferT,
        arg3: *mut ::std::os::raw::c_void,
    ) -> Herror,
>;
pub type HHandleDeserializeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: Hproc_handle,
        arg2: *mut HStreamBufferT,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> Herror,
>;
pub type HHandleDestructorFunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: Hproc_handle, arg2: *mut ::std::os::raw::c_void) -> Herror,
>;
pub type HHandleSignalFunc = ::std::option::Option<
    unsafe extern "C" fn(signal: HSignalTypeEnum, arg1: *mut ::std::os::raw::c_void) -> Herror,
>;
#[doc = "/\n/** HHandleInfo holds handle type information.\n\n This structure exists once per handle type (usually per sem_type).\n It contains basic, static, constant information about that type.\n Most notably, it contains pointers to the functions that operate on the\n handles (clear, serialize, deserialize and signal).\n\n Handles (instances) of types where the cb_signal callback is not NULL are\n stored in a list that allows calling the signal callback for each of them.\n\n All serialized items must have a unique header, usually a string, that\n identifies them. 'header' contains a pointer to that header, allowing\n other functions to identify a serialized item based on its header.\n If no (de)serialization function is set, header must be NULL.\n\n \\ingroup data_structures_handles"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct H_HANDLE_TYPE {
    #[doc = "< Type ID"]
    pub type_id: INT4_8,
    #[doc = "< sem_type of the handle"]
    pub sem_type: *const ::std::os::raw::c_char,
    #[doc = "< Serialize this handle type"]
    pub cb_serialize: HHandleSerializeFunc,
    #[doc = "< Deserialize this handle type"]
    pub cb_deserialize: HHandleDeserializeFunc,
    #[doc = "< Serialization header"]
    pub header: *const ::std::os::raw::c_char,
    #[doc = "< Clear this handle type"]
    pub cb_clear: HHandleDestructorFunc,
    #[doc = "< Signal (for semaphores etc.)"]
    pub cb_signal: HHandleSignalFunc,
    #[doc = "< List of handles, or NULL"]
    pub list: *mut HhandleListT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of H_HANDLE_TYPE"][::std::mem::size_of::<H_HANDLE_TYPE>() - 64usize];
    ["Alignment of H_HANDLE_TYPE"][::std::mem::align_of::<H_HANDLE_TYPE>() - 8usize];
    ["Offset of field: H_HANDLE_TYPE::type_id"]
        [::std::mem::offset_of!(H_HANDLE_TYPE, type_id) - 0usize];
    ["Offset of field: H_HANDLE_TYPE::sem_type"]
        [::std::mem::offset_of!(H_HANDLE_TYPE, sem_type) - 8usize];
    ["Offset of field: H_HANDLE_TYPE::cb_serialize"]
        [::std::mem::offset_of!(H_HANDLE_TYPE, cb_serialize) - 16usize];
    ["Offset of field: H_HANDLE_TYPE::cb_deserialize"]
        [::std::mem::offset_of!(H_HANDLE_TYPE, cb_deserialize) - 24usize];
    ["Offset of field: H_HANDLE_TYPE::header"]
        [::std::mem::offset_of!(H_HANDLE_TYPE, header) - 32usize];
    ["Offset of field: H_HANDLE_TYPE::cb_clear"]
        [::std::mem::offset_of!(H_HANDLE_TYPE, cb_clear) - 40usize];
    ["Offset of field: H_HANDLE_TYPE::cb_signal"]
        [::std::mem::offset_of!(H_HANDLE_TYPE, cb_signal) - 48usize];
    ["Offset of field: H_HANDLE_TYPE::list"][::std::mem::offset_of!(H_HANDLE_TYPE, list) - 56usize];
};
#[doc = "/\n/** HHandleInfo holds handle type information.\n\n This structure exists once per handle type (usually per sem_type).\n It contains basic, static, constant information about that type.\n Most notably, it contains pointers to the functions that operate on the\n handles (clear, serialize, deserialize and signal).\n\n Handles (instances) of types where the cb_signal callback is not NULL are\n stored in a list that allows calling the signal callback for each of them.\n\n All serialized items must have a unique header, usually a string, that\n identifies them. 'header' contains a pointer to that header, allowing\n other functions to identify a serialized item based on its header.\n If no (de)serialization function is set, header must be NULL.\n\n \\ingroup data_structures_handles"]
pub type HHandleInfo = H_HANDLE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HhandleT {
    _unused: [u8; 0],
}
pub type Hphandle = *mut HhandleT;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Hpar {
    pub l: INT4_8,
    pub d: f64,
    pub s: *mut ::std::os::raw::c_char,
    pub h: Hphandle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hpar"][::std::mem::size_of::<Hpar>() - 8usize];
    ["Alignment of Hpar"][::std::mem::align_of::<Hpar>() - 8usize];
    ["Offset of field: Hpar::l"][::std::mem::offset_of!(Hpar, l) - 0usize];
    ["Offset of field: Hpar::d"][::std::mem::offset_of!(Hpar, d) - 0usize];
    ["Offset of field: Hpar::s"][::std::mem::offset_of!(Hpar, s) - 0usize];
    ["Offset of field: Hpar::h"][::std::mem::offset_of!(Hpar, h) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hcpar {
    pub par: Hpar,
    pub type_: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hcpar"][::std::mem::size_of::<Hcpar>() - 16usize];
    ["Alignment of Hcpar"][::std::mem::align_of::<Hcpar>() - 8usize];
    ["Offset of field: Hcpar::par"][::std::mem::offset_of!(Hcpar, par) - 0usize];
    ["Offset of field: Hcpar::type_"][::std::mem::offset_of!(Hcpar, type_) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Hcelem {
    pub l: *mut INT4_8,
    pub d: *mut f64,
    pub s: *mut *mut ::std::os::raw::c_char,
    pub cpar: *mut Hcpar,
    pub h: *mut Hphandle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hcelem"][::std::mem::size_of::<Hcelem>() - 8usize];
    ["Alignment of Hcelem"][::std::mem::align_of::<Hcelem>() - 8usize];
    ["Offset of field: Hcelem::l"][::std::mem::offset_of!(Hcelem, l) - 0usize];
    ["Offset of field: Hcelem::d"][::std::mem::offset_of!(Hcelem, d) - 0usize];
    ["Offset of field: Hcelem::s"][::std::mem::offset_of!(Hcelem, s) - 0usize];
    ["Offset of field: Hcelem::cpar"][::std::mem::offset_of!(Hcelem, cpar) - 0usize];
    ["Offset of field: Hcelem::h"][::std::mem::offset_of!(Hcelem, h) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hctuple {
    pub val: Hcpar,
    pub num: INT4_8,
    pub capacity: INT4_8,
    pub flags: ::std::os::raw::c_int,
    pub elem: Hcelem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hctuple"][::std::mem::size_of::<Hctuple>() - 48usize];
    ["Alignment of Hctuple"][::std::mem::align_of::<Hctuple>() - 8usize];
    ["Offset of field: Hctuple::val"][::std::mem::offset_of!(Hctuple, val) - 0usize];
    ["Offset of field: Hctuple::num"][::std::mem::offset_of!(Hctuple, num) - 16usize];
    ["Offset of field: Hctuple::capacity"][::std::mem::offset_of!(Hctuple, capacity) - 24usize];
    ["Offset of field: Hctuple::flags"][::std::mem::offset_of!(Hctuple, flags) - 32usize];
    ["Offset of field: Hctuple::elem"][::std::mem::offset_of!(Hctuple, elem) - 40usize];
};
pub type H_pthread_t = *mut ::std::os::raw::c_void;
pub type H_pthread_mutex_t = *mut ::std::os::raw::c_void;
pub type H_pthread_cond_t = *mut ::std::os::raw::c_void;
pub type H_pthread_barrier_t = *mut ::std::os::raw::c_void;
pub type HDrawObjectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        DrawHandle: Hphandle,
        WindowHandle: Hphandle,
        type_: *mut ::std::os::raw::c_char,
    ) -> Herror,
>;
pub type HUpdateContentCallback =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void) -> Herror>;
pub type HLicenseRecheckFailedCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, error: Herror),
>;
unsafe extern "C" {
    pub static mut HDoLowError: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut HLowErrorAction: [i32; 4usize];
}
unsafe extern "C" {
    pub static mut HDoMessageBoxOnError: i32;
}
unsafe extern "C" {
    pub static mut HDoLicenseError: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut HUseSpinLock: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut HStartUpThreadPool: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut HShutdownThreadPool: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut HShuttingDown: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HSetDoMessageBoxOnError(value: i32);
}
unsafe extern "C" {
    pub fn HSetDoLicenseError(value: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HSetUseSpinLock(value: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HSetStartUpThreadPool(value: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HSetShutdownThreadPool(value: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HGetDoMessageBoxOnError() -> i32;
}
unsafe extern "C" {
    pub fn HGetDoLicenseError() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HGetUseSpinLock() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HGetStartUpThreadPool() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HGetShutdownThreadPool() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HGetShuttingDown() -> ::std::os::raw::c_int;
}
pub const eHMemoryAllocatorType_eHMemoryAllocatorTypeInvalid: eHMemoryAllocatorType = -1;
pub const eHMemoryAllocatorType_eHMemoryAllocatorTypeSystem: eHMemoryAllocatorType = 0;
pub const eHMemoryAllocatorType_eHMemoryAllocatorTypeMiMalloc: eHMemoryAllocatorType = 1;
pub type eHMemoryAllocatorType = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn HGetMemoryAllocatorType() -> eHMemoryAllocatorType;
}
unsafe extern "C" {
    pub fn HSetMemoryAllocatorType(allocator: eHMemoryAllocatorType) -> Herror;
}
unsafe extern "C" {
    pub fn HSetHDevelopInt(AccessByHDevelop: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HGetHDevelopInt() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HSetLicenseRecheckFailedCallback(
        callback: HLicenseRecheckFailedCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn FinalizeHALCONLibrary() -> ::std::os::raw::c_int;
}
pub type HProgressBarCallback = ::std::option::Option<
    unsafe extern "C" fn(
        id: Hlong,
        operator_name: *const ::std::os::raw::c_char,
        progress: f64,
        message: *const ::std::os::raw::c_char,
    ),
>;
unsafe extern "C" {
    pub fn HVerifyXMLFile(
        path: *const ::std::os::raw::c_char,
        pk: *const ::std::os::raw::c_void,
    ) -> Herror;
}
pub type HIMGDIM = i32;
pub type HIMGCOOR = i16;
pub type HLINCOOR = i32;
pub type HIMGCNT = i32;
pub type HITEMCNT = i32;
pub type HSUBCOOR = f32;
pub type HSUBATTR = f32;
pub type HImageAllocProc =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type HImageFreeProc =
    ::std::option::Option<unsafe extern "C" fn(mem: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HComplexPixel {
    pub re: f32,
    pub im: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HComplexPixel"][::std::mem::size_of::<HComplexPixel>() - 8usize];
    ["Alignment of HComplexPixel"][::std::mem::align_of::<HComplexPixel>() - 4usize];
    ["Offset of field: HComplexPixel::re"][::std::mem::offset_of!(HComplexPixel, re) - 0usize];
    ["Offset of field: HComplexPixel::im"][::std::mem::offset_of!(HComplexPixel, im) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HInt2Pixel {
    pub p: *mut i16,
    pub num_bits: i8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HInt2Pixel"][::std::mem::size_of::<HInt2Pixel>() - 16usize];
    ["Alignment of HInt2Pixel"][::std::mem::align_of::<HInt2Pixel>() - 8usize];
    ["Offset of field: HInt2Pixel::p"][::std::mem::offset_of!(HInt2Pixel, p) - 0usize];
    ["Offset of field: HInt2Pixel::num_bits"]
        [::std::mem::offset_of!(HInt2Pixel, num_bits) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HUInt2Pixel {
    pub p: *mut u16,
    pub num_bits: i8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HUInt2Pixel"][::std::mem::size_of::<HUInt2Pixel>() - 16usize];
    ["Alignment of HUInt2Pixel"][::std::mem::align_of::<HUInt2Pixel>() - 8usize];
    ["Offset of field: HUInt2Pixel::p"][::std::mem::offset_of!(HUInt2Pixel, p) - 0usize];
    ["Offset of field: HUInt2Pixel::num_bits"]
        [::std::mem::offset_of!(HUInt2Pixel, num_bits) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HVFPixel {
    pub row: *mut f32,
    pub col: *mut f32,
    pub kind: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HVFPixel"][::std::mem::size_of::<HVFPixel>() - 24usize];
    ["Alignment of HVFPixel"][::std::mem::align_of::<HVFPixel>() - 8usize];
    ["Offset of field: HVFPixel::row"][::std::mem::offset_of!(HVFPixel, row) - 0usize];
    ["Offset of field: HVFPixel::col"][::std::mem::offset_of!(HVFPixel, col) - 8usize];
    ["Offset of field: HVFPixel::kind"][::std::mem::offset_of!(HVFPixel, kind) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union HPixelImage {
    pub b: *mut u8,
    pub z: *mut u8,
    pub d: *mut u8,
    pub i: *mut i8,
    pub l: *mut i32,
    pub i8_: *mut i64,
    pub f: *mut f32,
    pub vf: HVFPixel,
    pub c: *mut HComplexPixel,
    pub s: HInt2Pixel,
    pub u: HUInt2Pixel,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HPixelImage"][::std::mem::size_of::<HPixelImage>() - 24usize];
    ["Alignment of HPixelImage"][::std::mem::align_of::<HPixelImage>() - 8usize];
    ["Offset of field: HPixelImage::b"][::std::mem::offset_of!(HPixelImage, b) - 0usize];
    ["Offset of field: HPixelImage::z"][::std::mem::offset_of!(HPixelImage, z) - 0usize];
    ["Offset of field: HPixelImage::d"][::std::mem::offset_of!(HPixelImage, d) - 0usize];
    ["Offset of field: HPixelImage::i"][::std::mem::offset_of!(HPixelImage, i) - 0usize];
    ["Offset of field: HPixelImage::l"][::std::mem::offset_of!(HPixelImage, l) - 0usize];
    ["Offset of field: HPixelImage::i8_"][::std::mem::offset_of!(HPixelImage, i8_) - 0usize];
    ["Offset of field: HPixelImage::f"][::std::mem::offset_of!(HPixelImage, f) - 0usize];
    ["Offset of field: HPixelImage::vf"][::std::mem::offset_of!(HPixelImage, vf) - 0usize];
    ["Offset of field: HPixelImage::c"][::std::mem::offset_of!(HPixelImage, c) - 0usize];
    ["Offset of field: HPixelImage::s"][::std::mem::offset_of!(HPixelImage, s) - 0usize];
    ["Offset of field: HPixelImage::u"][::std::mem::offset_of!(HPixelImage, u) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Himage {
    pub kind: ::std::os::raw::c_int,
    pub pixel: HPixelImage,
    pub width: HIMGDIM,
    pub height: HIMGDIM,
    pub free_proc: HImageFreeProc,
    pub free: bool,
    pub msec: u16,
    pub sec: u8,
    pub min: u8,
    pub hour: u8,
    pub day: u8,
    pub yday: u16,
    pub mon: u8,
    pub year: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Himage"][::std::mem::size_of::<Himage>() - 64usize];
    ["Alignment of Himage"][::std::mem::align_of::<Himage>() - 8usize];
    ["Offset of field: Himage::kind"][::std::mem::offset_of!(Himage, kind) - 0usize];
    ["Offset of field: Himage::pixel"][::std::mem::offset_of!(Himage, pixel) - 8usize];
    ["Offset of field: Himage::width"][::std::mem::offset_of!(Himage, width) - 32usize];
    ["Offset of field: Himage::height"][::std::mem::offset_of!(Himage, height) - 36usize];
    ["Offset of field: Himage::free_proc"][::std::mem::offset_of!(Himage, free_proc) - 40usize];
    ["Offset of field: Himage::free"][::std::mem::offset_of!(Himage, free) - 48usize];
    ["Offset of field: Himage::msec"][::std::mem::offset_of!(Himage, msec) - 50usize];
    ["Offset of field: Himage::sec"][::std::mem::offset_of!(Himage, sec) - 52usize];
    ["Offset of field: Himage::min"][::std::mem::offset_of!(Himage, min) - 53usize];
    ["Offset of field: Himage::hour"][::std::mem::offset_of!(Himage, hour) - 54usize];
    ["Offset of field: Himage::day"][::std::mem::offset_of!(Himage, day) - 55usize];
    ["Offset of field: Himage::yday"][::std::mem::offset_of!(Himage, yday) - 56usize];
    ["Offset of field: Himage::mon"][::std::mem::offset_of!(Himage, mon) - 58usize];
    ["Offset of field: Himage::year"][::std::mem::offset_of!(Himage, year) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Himage_exp {
    pub width: i32,
    pub kind: i32,
    pub height: i32,
    pub info: [::std::os::raw::c_char; 996usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Himage_exp"][::std::mem::size_of::<Himage_exp>() - 1008usize];
    ["Alignment of Himage_exp"][::std::mem::align_of::<Himage_exp>() - 4usize];
    ["Offset of field: Himage_exp::width"][::std::mem::offset_of!(Himage_exp, width) - 0usize];
    ["Offset of field: Himage_exp::kind"][::std::mem::offset_of!(Himage_exp, kind) - 4usize];
    ["Offset of field: Himage_exp::height"][::std::mem::offset_of!(Himage_exp, height) - 8usize];
    ["Offset of field: Himage_exp::info"][::std::mem::offset_of!(Himage_exp, info) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Himage_hobj_file_header {
    pub version_number: i32,
    pub num_images: i32,
    pub is_msb_first: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Himage_hobj_file_header"][::std::mem::size_of::<Himage_hobj_file_header>() - 12usize];
    ["Alignment of Himage_hobj_file_header"]
        [::std::mem::align_of::<Himage_hobj_file_header>() - 4usize];
    ["Offset of field: Himage_hobj_file_header::version_number"]
        [::std::mem::offset_of!(Himage_hobj_file_header, version_number) - 0usize];
    ["Offset of field: Himage_hobj_file_header::num_images"]
        [::std::mem::offset_of!(Himage_hobj_file_header, num_images) - 4usize];
    ["Offset of field: Himage_hobj_file_header::is_msb_first"]
        [::std::mem::offset_of!(Himage_hobj_file_header, is_msb_first) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Himage_hobj_image_header {
    pub width: i32,
    pub height: i32,
    pub num_channels: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Himage_hobj_image_header"]
        [::std::mem::size_of::<Himage_hobj_image_header>() - 12usize];
    ["Alignment of Himage_hobj_image_header"]
        [::std::mem::align_of::<Himage_hobj_image_header>() - 4usize];
    ["Offset of field: Himage_hobj_image_header::width"]
        [::std::mem::offset_of!(Himage_hobj_image_header, width) - 0usize];
    ["Offset of field: Himage_hobj_image_header::height"]
        [::std::mem::offset_of!(Himage_hobj_image_header, height) - 4usize];
    ["Offset of field: Himage_hobj_image_header::num_channels"]
        [::std::mem::offset_of!(Himage_hobj_image_header, num_channels) - 8usize];
};
pub type Hbits = *mut u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hrun {
    pub l: HIMGCOOR,
    pub cb: HIMGCOOR,
    pub ce: HIMGCOOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hrun"][::std::mem::size_of::<Hrun>() - 6usize];
    ["Alignment of Hrun"][::std::mem::align_of::<Hrun>() - 2usize];
    ["Offset of field: Hrun::l"][::std::mem::offset_of!(Hrun, l) - 0usize];
    ["Offset of field: Hrun::cb"][::std::mem::offset_of!(Hrun, cb) - 2usize];
    ["Offset of field: Hrun::ce"][::std::mem::offset_of!(Hrun, ce) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hvrun {
    pub c: HIMGCOOR,
    pub lb: HIMGCOOR,
    pub le: HIMGCOOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hvrun"][::std::mem::size_of::<Hvrun>() - 6usize];
    ["Alignment of Hvrun"][::std::mem::align_of::<Hvrun>() - 2usize];
    ["Offset of field: Hvrun::c"][::std::mem::offset_of!(Hvrun, c) - 0usize];
    ["Offset of field: Hvrun::lb"][::std::mem::offset_of!(Hvrun, lb) - 2usize];
    ["Offset of field: Hvrun::le"][::std::mem::offset_of!(Hvrun, le) - 4usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct HFeatureFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HFeatureFlags"][::std::mem::size_of::<HFeatureFlags>() - 4usize];
    ["Alignment of HFeatureFlags"][::std::mem::align_of::<HFeatureFlags>() - 4usize];
};
impl HFeatureFlags {
    #[inline]
    pub fn shape(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shape(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn shape_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_shape_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_convex(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_convex(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_convex_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_convex_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_filled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_filled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_filled_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_filled_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_connected4(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_connected4(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_connected4_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_connected4_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_connected8(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_connected8(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_connected8_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_connected8_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_thin(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_thin(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_thin_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_thin_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn circularity(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_circularity(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn circularity_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_circularity_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn compactness(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_compactness(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn compactness_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_compactness_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn contlength(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_contlength(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn contlength_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_contlength_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn convexity(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_convexity(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn convexity_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_convexity_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn phi(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phi(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn phi_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_phi_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn elliptic_axis(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_elliptic_axis(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn elliptic_axis_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_elliptic_axis_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn elliptic_shape(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_elliptic_shape(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn elliptic_shape_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_elliptic_shape_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn excentricity(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_excentricity(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn excentricity_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_excentricity_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn moments(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_moments(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn moments_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_moments_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn center_area(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_center_area(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn center_area_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_center_area_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn smallest_rectangle1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_smallest_rectangle1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn smallest_rectangle1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_smallest_rectangle1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn smallest_rectangle2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_smallest_rectangle2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn smallest_rectangle2_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_smallest_rectangle2_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn smallest_circle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_smallest_circle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn smallest_circle_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_smallest_circle_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn min_max_chord(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_min_max_chord(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn min_max_chord_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_min_max_chord_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn min_max_chord_gap(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_min_max_chord_gap(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn min_max_chord_gap_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_min_max_chord_gap_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rectangularity(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rectangularity(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rectangularity_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_rectangularity_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        shape: ::std::os::raw::c_uint,
        is_convex: ::std::os::raw::c_uint,
        is_filled: ::std::os::raw::c_uint,
        is_connected4: ::std::os::raw::c_uint,
        is_connected8: ::std::os::raw::c_uint,
        is_thin: ::std::os::raw::c_uint,
        circularity: ::std::os::raw::c_uint,
        compactness: ::std::os::raw::c_uint,
        contlength: ::std::os::raw::c_uint,
        convexity: ::std::os::raw::c_uint,
        phi: ::std::os::raw::c_uint,
        elliptic_axis: ::std::os::raw::c_uint,
        elliptic_shape: ::std::os::raw::c_uint,
        excentricity: ::std::os::raw::c_uint,
        moments: ::std::os::raw::c_uint,
        center_area: ::std::os::raw::c_uint,
        smallest_rectangle1: ::std::os::raw::c_uint,
        smallest_rectangle2: ::std::os::raw::c_uint,
        smallest_circle: ::std::os::raw::c_uint,
        min_max_chord: ::std::os::raw::c_uint,
        min_max_chord_gap: ::std::os::raw::c_uint,
        rectangularity: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let shape: u32 = unsafe { ::std::mem::transmute(shape) };
            shape as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_convex: u32 = unsafe { ::std::mem::transmute(is_convex) };
            is_convex as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_filled: u32 = unsafe { ::std::mem::transmute(is_filled) };
            is_filled as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_connected4: u32 = unsafe { ::std::mem::transmute(is_connected4) };
            is_connected4 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_connected8: u32 = unsafe { ::std::mem::transmute(is_connected8) };
            is_connected8 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_thin: u32 = unsafe { ::std::mem::transmute(is_thin) };
            is_thin as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let circularity: u32 = unsafe { ::std::mem::transmute(circularity) };
            circularity as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let compactness: u32 = unsafe { ::std::mem::transmute(compactness) };
            compactness as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let contlength: u32 = unsafe { ::std::mem::transmute(contlength) };
            contlength as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let convexity: u32 = unsafe { ::std::mem::transmute(convexity) };
            convexity as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let phi: u32 = unsafe { ::std::mem::transmute(phi) };
            phi as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let elliptic_axis: u32 = unsafe { ::std::mem::transmute(elliptic_axis) };
            elliptic_axis as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let elliptic_shape: u32 = unsafe { ::std::mem::transmute(elliptic_shape) };
            elliptic_shape as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let excentricity: u32 = unsafe { ::std::mem::transmute(excentricity) };
            excentricity as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let moments: u32 = unsafe { ::std::mem::transmute(moments) };
            moments as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let center_area: u32 = unsafe { ::std::mem::transmute(center_area) };
            center_area as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let smallest_rectangle1: u32 = unsafe { ::std::mem::transmute(smallest_rectangle1) };
            smallest_rectangle1 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let smallest_rectangle2: u32 = unsafe { ::std::mem::transmute(smallest_rectangle2) };
            smallest_rectangle2 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let smallest_circle: u32 = unsafe { ::std::mem::transmute(smallest_circle) };
            smallest_circle as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let min_max_chord: u32 = unsafe { ::std::mem::transmute(min_max_chord) };
            min_max_chord as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let min_max_chord_gap: u32 = unsafe { ::std::mem::transmute(min_max_chord_gap) };
            min_max_chord_gap as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let rectangularity: u32 = unsafe { ::std::mem::transmute(rectangularity) };
            rectangularity as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HRegFeature {
    pub def: HRegFeature__bindgen_ty_1,
    pub shape: u8,
    pub is_convex: bool,
    pub is_filled: bool,
    pub is_connected4: bool,
    pub is_connected8: bool,
    pub is_thin: bool,
    pub circularity: f64,
    pub compactness: f64,
    pub contlength: f64,
    pub convexity: f64,
    pub phi: f64,
    pub ra: f64,
    pub rb: f64,
    pub ra_: f64,
    pub rb_: f64,
    pub anisometry: f64,
    pub bulkiness: f64,
    pub structure_factor: f64,
    pub m11: f64,
    pub m20: f64,
    pub m02: f64,
    pub ia: f64,
    pub ib: f64,
    pub row: f64,
    pub col: f64,
    pub area: HIMGCNT,
    pub row1: HIMGCOOR,
    pub col1: HIMGCOOR,
    pub row2: HIMGCOOR,
    pub col2: HIMGCOOR,
    pub row_rect: f64,
    pub col_rect: f64,
    pub phi_rect: f64,
    pub length1: f64,
    pub length2: f64,
    pub row_circle: f64,
    pub col_circle: f64,
    pub radius: f64,
    pub min_chord: HIMGCOOR,
    pub max_chord: HIMGCOOR,
    pub min_chord_gap: HIMGCOOR,
    pub max_chord_gap: HIMGCOOR,
    pub rectangularity: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HRegFeature__bindgen_ty_1 {
    pub single: HFeatureFlags,
    pub all: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HRegFeature__bindgen_ty_1"]
        [::std::mem::size_of::<HRegFeature__bindgen_ty_1>() - 4usize];
    ["Alignment of HRegFeature__bindgen_ty_1"]
        [::std::mem::align_of::<HRegFeature__bindgen_ty_1>() - 4usize];
    ["Offset of field: HRegFeature__bindgen_ty_1::single"]
        [::std::mem::offset_of!(HRegFeature__bindgen_ty_1, single) - 0usize];
    ["Offset of field: HRegFeature__bindgen_ty_1::all"]
        [::std::mem::offset_of!(HRegFeature__bindgen_ty_1, all) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HRegFeature"][::std::mem::size_of::<HRegFeature>() - 264usize];
    ["Alignment of HRegFeature"][::std::mem::align_of::<HRegFeature>() - 8usize];
    ["Offset of field: HRegFeature::def"][::std::mem::offset_of!(HRegFeature, def) - 0usize];
    ["Offset of field: HRegFeature::shape"][::std::mem::offset_of!(HRegFeature, shape) - 4usize];
    ["Offset of field: HRegFeature::is_convex"]
        [::std::mem::offset_of!(HRegFeature, is_convex) - 5usize];
    ["Offset of field: HRegFeature::is_filled"]
        [::std::mem::offset_of!(HRegFeature, is_filled) - 6usize];
    ["Offset of field: HRegFeature::is_connected4"]
        [::std::mem::offset_of!(HRegFeature, is_connected4) - 7usize];
    ["Offset of field: HRegFeature::is_connected8"]
        [::std::mem::offset_of!(HRegFeature, is_connected8) - 8usize];
    ["Offset of field: HRegFeature::is_thin"]
        [::std::mem::offset_of!(HRegFeature, is_thin) - 9usize];
    ["Offset of field: HRegFeature::circularity"]
        [::std::mem::offset_of!(HRegFeature, circularity) - 16usize];
    ["Offset of field: HRegFeature::compactness"]
        [::std::mem::offset_of!(HRegFeature, compactness) - 24usize];
    ["Offset of field: HRegFeature::contlength"]
        [::std::mem::offset_of!(HRegFeature, contlength) - 32usize];
    ["Offset of field: HRegFeature::convexity"]
        [::std::mem::offset_of!(HRegFeature, convexity) - 40usize];
    ["Offset of field: HRegFeature::phi"][::std::mem::offset_of!(HRegFeature, phi) - 48usize];
    ["Offset of field: HRegFeature::ra"][::std::mem::offset_of!(HRegFeature, ra) - 56usize];
    ["Offset of field: HRegFeature::rb"][::std::mem::offset_of!(HRegFeature, rb) - 64usize];
    ["Offset of field: HRegFeature::ra_"][::std::mem::offset_of!(HRegFeature, ra_) - 72usize];
    ["Offset of field: HRegFeature::rb_"][::std::mem::offset_of!(HRegFeature, rb_) - 80usize];
    ["Offset of field: HRegFeature::anisometry"]
        [::std::mem::offset_of!(HRegFeature, anisometry) - 88usize];
    ["Offset of field: HRegFeature::bulkiness"]
        [::std::mem::offset_of!(HRegFeature, bulkiness) - 96usize];
    ["Offset of field: HRegFeature::structure_factor"]
        [::std::mem::offset_of!(HRegFeature, structure_factor) - 104usize];
    ["Offset of field: HRegFeature::m11"][::std::mem::offset_of!(HRegFeature, m11) - 112usize];
    ["Offset of field: HRegFeature::m20"][::std::mem::offset_of!(HRegFeature, m20) - 120usize];
    ["Offset of field: HRegFeature::m02"][::std::mem::offset_of!(HRegFeature, m02) - 128usize];
    ["Offset of field: HRegFeature::ia"][::std::mem::offset_of!(HRegFeature, ia) - 136usize];
    ["Offset of field: HRegFeature::ib"][::std::mem::offset_of!(HRegFeature, ib) - 144usize];
    ["Offset of field: HRegFeature::row"][::std::mem::offset_of!(HRegFeature, row) - 152usize];
    ["Offset of field: HRegFeature::col"][::std::mem::offset_of!(HRegFeature, col) - 160usize];
    ["Offset of field: HRegFeature::area"][::std::mem::offset_of!(HRegFeature, area) - 168usize];
    ["Offset of field: HRegFeature::row1"][::std::mem::offset_of!(HRegFeature, row1) - 172usize];
    ["Offset of field: HRegFeature::col1"][::std::mem::offset_of!(HRegFeature, col1) - 174usize];
    ["Offset of field: HRegFeature::row2"][::std::mem::offset_of!(HRegFeature, row2) - 176usize];
    ["Offset of field: HRegFeature::col2"][::std::mem::offset_of!(HRegFeature, col2) - 178usize];
    ["Offset of field: HRegFeature::row_rect"]
        [::std::mem::offset_of!(HRegFeature, row_rect) - 184usize];
    ["Offset of field: HRegFeature::col_rect"]
        [::std::mem::offset_of!(HRegFeature, col_rect) - 192usize];
    ["Offset of field: HRegFeature::phi_rect"]
        [::std::mem::offset_of!(HRegFeature, phi_rect) - 200usize];
    ["Offset of field: HRegFeature::length1"]
        [::std::mem::offset_of!(HRegFeature, length1) - 208usize];
    ["Offset of field: HRegFeature::length2"]
        [::std::mem::offset_of!(HRegFeature, length2) - 216usize];
    ["Offset of field: HRegFeature::row_circle"]
        [::std::mem::offset_of!(HRegFeature, row_circle) - 224usize];
    ["Offset of field: HRegFeature::col_circle"]
        [::std::mem::offset_of!(HRegFeature, col_circle) - 232usize];
    ["Offset of field: HRegFeature::radius"]
        [::std::mem::offset_of!(HRegFeature, radius) - 240usize];
    ["Offset of field: HRegFeature::min_chord"]
        [::std::mem::offset_of!(HRegFeature, min_chord) - 248usize];
    ["Offset of field: HRegFeature::max_chord"]
        [::std::mem::offset_of!(HRegFeature, max_chord) - 250usize];
    ["Offset of field: HRegFeature::min_chord_gap"]
        [::std::mem::offset_of!(HRegFeature, min_chord_gap) - 252usize];
    ["Offset of field: HRegFeature::max_chord_gap"]
        [::std::mem::offset_of!(HRegFeature, max_chord_gap) - 254usize];
    ["Offset of field: HRegFeature::rectangularity"]
        [::std::mem::offset_of!(HRegFeature, rectangularity) - 256usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hrlregion {
    pub is_compl: bool,
    pub num: HITEMCNT,
    pub num_max: HITEMCNT,
    pub feature: HRegFeature,
    pub rl: *mut Hrun,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hrlregion"][::std::mem::size_of::<Hrlregion>() - 288usize];
    ["Alignment of Hrlregion"][::std::mem::align_of::<Hrlregion>() - 8usize];
    ["Offset of field: Hrlregion::is_compl"][::std::mem::offset_of!(Hrlregion, is_compl) - 0usize];
    ["Offset of field: Hrlregion::num"][::std::mem::offset_of!(Hrlregion, num) - 4usize];
    ["Offset of field: Hrlregion::num_max"][::std::mem::offset_of!(Hrlregion, num_max) - 8usize];
    ["Offset of field: Hrlregion::feature"][::std::mem::offset_of!(Hrlregion, feature) - 16usize];
    ["Offset of field: Hrlregion::rl"][::std::mem::offset_of!(Hrlregion, rl) - 280usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hvrlregion {
    pub is_compl: bool,
    pub num: HITEMCNT,
    pub num_max: HITEMCNT,
    pub feature: HRegFeature,
    pub rc: *mut Hvrun,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hvrlregion"][::std::mem::size_of::<Hvrlregion>() - 288usize];
    ["Alignment of Hvrlregion"][::std::mem::align_of::<Hvrlregion>() - 8usize];
    ["Offset of field: Hvrlregion::is_compl"]
        [::std::mem::offset_of!(Hvrlregion, is_compl) - 0usize];
    ["Offset of field: Hvrlregion::num"][::std::mem::offset_of!(Hvrlregion, num) - 4usize];
    ["Offset of field: Hvrlregion::num_max"][::std::mem::offset_of!(Hvrlregion, num_max) - 8usize];
    ["Offset of field: Hvrlregion::feature"][::std::mem::offset_of!(Hvrlregion, feature) - 16usize];
    ["Offset of field: Hvrlregion::rc"][::std::mem::offset_of!(Hvrlregion, rc) - 280usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hrlaccess {
    pub min: HIMGCOOR,
    pub max: HIMGCOOR,
    pub rl: *mut Hrun,
    pub first: *mut HITEMCNT,
    pub last: *mut HITEMCNT,
    pub no_row: *mut bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hrlaccess"][::std::mem::size_of::<Hrlaccess>() - 40usize];
    ["Alignment of Hrlaccess"][::std::mem::align_of::<Hrlaccess>() - 8usize];
    ["Offset of field: Hrlaccess::min"][::std::mem::offset_of!(Hrlaccess, min) - 0usize];
    ["Offset of field: Hrlaccess::max"][::std::mem::offset_of!(Hrlaccess, max) - 2usize];
    ["Offset of field: Hrlaccess::rl"][::std::mem::offset_of!(Hrlaccess, rl) - 8usize];
    ["Offset of field: Hrlaccess::first"][::std::mem::offset_of!(Hrlaccess, first) - 16usize];
    ["Offset of field: Hrlaccess::last"][::std::mem::offset_of!(Hrlaccess, last) - 24usize];
    ["Offset of field: Hrlaccess::no_row"][::std::mem::offset_of!(Hrlaccess, no_row) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMultiChannelImage {
    pub channels: *mut Himage,
    pub region: *mut Hrlregion,
    pub num_channels: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HMultiChannelImage"][::std::mem::size_of::<HMultiChannelImage>() - 24usize];
    ["Alignment of HMultiChannelImage"][::std::mem::align_of::<HMultiChannelImage>() - 8usize];
    ["Offset of field: HMultiChannelImage::channels"]
        [::std::mem::offset_of!(HMultiChannelImage, channels) - 0usize];
    ["Offset of field: HMultiChannelImage::region"]
        [::std::mem::offset_of!(HMultiChannelImage, region) - 8usize];
    ["Offset of field: HMultiChannelImage::num_channels"]
        [::std::mem::offset_of!(HMultiChannelImage, num_channels) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hcontvar {
    pub row: *mut HIMGCOOR,
    pub col: *mut HIMGCOOR,
    pub num: HITEMCNT,
    pub max_num: HITEMCNT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hcontvar"][::std::mem::size_of::<Hcontvar>() - 24usize];
    ["Alignment of Hcontvar"][::std::mem::align_of::<Hcontvar>() - 8usize];
    ["Offset of field: Hcontvar::row"][::std::mem::offset_of!(Hcontvar, row) - 0usize];
    ["Offset of field: Hcontvar::col"][::std::mem::offset_of!(Hcontvar, col) - 8usize];
    ["Offset of field: Hcontvar::num"][::std::mem::offset_of!(Hcontvar, num) - 16usize];
    ["Offset of field: Hcontvar::max_num"][::std::mem::offset_of!(Hcontvar, max_num) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hfcontvar {
    pub row: *mut HSUBCOOR,
    pub col: *mut HSUBCOOR,
    pub num: HITEMCNT,
    pub max_num: HITEMCNT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hfcontvar"][::std::mem::size_of::<Hfcontvar>() - 24usize];
    ["Alignment of Hfcontvar"][::std::mem::align_of::<Hfcontvar>() - 8usize];
    ["Offset of field: Hfcontvar::row"][::std::mem::offset_of!(Hfcontvar, row) - 0usize];
    ["Offset of field: Hfcontvar::col"][::std::mem::offset_of!(Hfcontvar, col) - 8usize];
    ["Offset of field: Hfcontvar::num"][::std::mem::offset_of!(Hfcontvar, num) - 16usize];
    ["Offset of field: Hfcontvar::max_num"][::std::mem::offset_of!(Hfcontvar, max_num) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hchain_code {
    pub l: HIMGCOOR,
    pub c: HIMGCOOR,
    pub cc: *mut u8,
    pub num: HITEMCNT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hchain_code"][::std::mem::size_of::<Hchain_code>() - 24usize];
    ["Alignment of Hchain_code"][::std::mem::align_of::<Hchain_code>() - 8usize];
    ["Offset of field: Hchain_code::l"][::std::mem::offset_of!(Hchain_code, l) - 0usize];
    ["Offset of field: Hchain_code::c"][::std::mem::offset_of!(Hchain_code, c) - 2usize];
    ["Offset of field: Hchain_code::cc"][::std::mem::offset_of!(Hchain_code, cc) - 8usize];
    ["Offset of field: Hchain_code::num"][::std::mem::offset_of!(Hchain_code, num) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hline {
    pub row1: HSUBCOOR,
    pub col1: HSUBCOOR,
    pub row2: HSUBCOOR,
    pub col2: HSUBCOOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hline"][::std::mem::size_of::<Hline>() - 16usize];
    ["Alignment of Hline"][::std::mem::align_of::<Hline>() - 4usize];
    ["Offset of field: Hline::row1"][::std::mem::offset_of!(Hline, row1) - 0usize];
    ["Offset of field: Hline::col1"][::std::mem::offset_of!(Hline, col1) - 4usize];
    ["Offset of field: Hline::row2"][::std::mem::offset_of!(Hline, row2) - 8usize];
    ["Offset of field: Hline::col2"][::std::mem::offset_of!(Hline, col2) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hlines {
    pub num: HITEMCNT,
    pub line: *mut Hline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hlines"][::std::mem::size_of::<Hlines>() - 16usize];
    ["Alignment of Hlines"][::std::mem::align_of::<Hlines>() - 8usize];
    ["Offset of field: Hlines::num"][::std::mem::offset_of!(Hlines, num) - 0usize];
    ["Offset of field: Hlines::line"][::std::mem::offset_of!(Hlines, line) - 8usize];
};
pub type Hhisto_abs = [HIMGCNT; 256usize];
pub type Hhisto_rel = [f64; 256usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hconv_mask_s {
    pub f: i32,
    pub gk: *mut i32,
    pub num_max: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hconv_mask_s"][::std::mem::size_of::<Hconv_mask_s>() - 24usize];
    ["Alignment of Hconv_mask_s"][::std::mem::align_of::<Hconv_mask_s>() - 8usize];
    ["Offset of field: Hconv_mask_s::f"][::std::mem::offset_of!(Hconv_mask_s, f) - 0usize];
    ["Offset of field: Hconv_mask_s::gk"][::std::mem::offset_of!(Hconv_mask_s, gk) - 8usize];
    ["Offset of field: Hconv_mask_s::num_max"]
        [::std::mem::offset_of!(Hconv_mask_s, num_max) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hconv_mask_2 {
    pub min_row: HIMGCOOR,
    pub max_row: HIMGCOOR,
    pub min_col: HIMGCOOR,
    pub max_col: HIMGCOOR,
    pub norm: i32,
    pub num: i32,
    pub row: [HIMGCOOR; 50000usize],
    pub col: [HIMGCOOR; 50000usize],
    pub koor: [HLINCOOR; 50000usize],
    pub m: [i32; 50000usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hconv_mask_2"][::std::mem::size_of::<Hconv_mask_2>() - 600016usize];
    ["Alignment of Hconv_mask_2"][::std::mem::align_of::<Hconv_mask_2>() - 4usize];
    ["Offset of field: Hconv_mask_2::min_row"]
        [::std::mem::offset_of!(Hconv_mask_2, min_row) - 0usize];
    ["Offset of field: Hconv_mask_2::max_row"]
        [::std::mem::offset_of!(Hconv_mask_2, max_row) - 2usize];
    ["Offset of field: Hconv_mask_2::min_col"]
        [::std::mem::offset_of!(Hconv_mask_2, min_col) - 4usize];
    ["Offset of field: Hconv_mask_2::max_col"]
        [::std::mem::offset_of!(Hconv_mask_2, max_col) - 6usize];
    ["Offset of field: Hconv_mask_2::norm"][::std::mem::offset_of!(Hconv_mask_2, norm) - 8usize];
    ["Offset of field: Hconv_mask_2::num"][::std::mem::offset_of!(Hconv_mask_2, num) - 12usize];
    ["Offset of field: Hconv_mask_2::row"][::std::mem::offset_of!(Hconv_mask_2, row) - 16usize];
    ["Offset of field: Hconv_mask_2::col"][::std::mem::offset_of!(Hconv_mask_2, col) - 100016usize];
    ["Offset of field: Hconv_mask_2::koor"]
        [::std::mem::offset_of!(Hconv_mask_2, koor) - 200016usize];
    ["Offset of field: Hconv_mask_2::m"][::std::mem::offset_of!(Hconv_mask_2, m) - 400016usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hconv_mask_1 {
    pub min_col: HIMGCOOR,
    pub max_col: HIMGCOOR,
    pub norm: i32,
    pub num: i32,
    pub col: [HIMGCOOR; 50000usize],
    pub m: [i32; 50000usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hconv_mask_1"][::std::mem::size_of::<Hconv_mask_1>() - 300012usize];
    ["Alignment of Hconv_mask_1"][::std::mem::align_of::<Hconv_mask_1>() - 4usize];
    ["Offset of field: Hconv_mask_1::min_col"]
        [::std::mem::offset_of!(Hconv_mask_1, min_col) - 0usize];
    ["Offset of field: Hconv_mask_1::max_col"]
        [::std::mem::offset_of!(Hconv_mask_1, max_col) - 2usize];
    ["Offset of field: Hconv_mask_1::norm"][::std::mem::offset_of!(Hconv_mask_1, norm) - 4usize];
    ["Offset of field: Hconv_mask_1::num"][::std::mem::offset_of!(Hconv_mask_1, num) - 8usize];
    ["Offset of field: Hconv_mask_1::col"][::std::mem::offset_of!(Hconv_mask_1, col) - 12usize];
    ["Offset of field: Hconv_mask_1::m"][::std::mem::offset_of!(Hconv_mask_1, m) - 100012usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hcolor {
    pub red: u8,
    pub green: u8,
    pub blue: u8,
    pub name: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hcolor"][::std::mem::size_of::<Hcolor>() - 43usize];
    ["Alignment of Hcolor"][::std::mem::align_of::<Hcolor>() - 1usize];
    ["Offset of field: Hcolor::red"][::std::mem::offset_of!(Hcolor, red) - 0usize];
    ["Offset of field: Hcolor::green"][::std::mem::offset_of!(Hcolor, green) - 1usize];
    ["Offset of field: Hcolor::blue"][::std::mem::offset_of!(Hcolor, blue) - 2usize];
    ["Offset of field: Hcolor::name"][::std::mem::offset_of!(Hcolor, name) - 3usize];
};
pub const cont_class_cont_unknown: cont_class = 0;
pub const cont_class_cont_no_junc: cont_class = 1;
pub const cont_class_cont_start_junc: cont_class = 2;
pub const cont_class_cont_end_junc: cont_class = 3;
pub const cont_class_cont_both_junc: cont_class = 4;
pub const cont_class_cont_closed: cont_class = 5;
pub type cont_class = ::std::os::raw::c_int;
pub use self::cont_class as Hcont_class;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cont_attrib {
    pub name: *mut ::std::os::raw::c_char,
    pub val: *mut HSUBATTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cont_attrib"][::std::mem::size_of::<cont_attrib>() - 16usize];
    ["Alignment of cont_attrib"][::std::mem::align_of::<cont_attrib>() - 8usize];
    ["Offset of field: cont_attrib::name"][::std::mem::offset_of!(cont_attrib, name) - 0usize];
    ["Offset of field: cont_attrib::val"][::std::mem::offset_of!(cont_attrib, val) - 8usize];
};
pub type Hcont_attrib = cont_attrib;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cont_global_attrib {
    pub name: *mut ::std::os::raw::c_char,
    pub val: HSUBATTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cont_global_attrib"][::std::mem::size_of::<cont_global_attrib>() - 16usize];
    ["Alignment of cont_global_attrib"][::std::mem::align_of::<cont_global_attrib>() - 8usize];
    ["Offset of field: cont_global_attrib::name"]
        [::std::mem::offset_of!(cont_global_attrib, name) - 0usize];
    ["Offset of field: cont_global_attrib::val"]
        [::std::mem::offset_of!(cont_global_attrib, val) - 8usize];
};
pub type Hcont_global_attrib = cont_global_attrib;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cont_type {
    pub num: HITEMCNT,
    pub row: *mut HSUBCOOR,
    pub col: *mut HSUBCOOR,
    pub cont_class: Hcont_class,
    pub num_attrib: i32,
    pub attribs: *mut Hcont_attrib,
    pub num_global: i32,
    pub global: *mut Hcont_global_attrib,
    pub h: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cont_type"][::std::mem::size_of::<cont_type>() - 64usize];
    ["Alignment of cont_type"][::std::mem::align_of::<cont_type>() - 8usize];
    ["Offset of field: cont_type::num"][::std::mem::offset_of!(cont_type, num) - 0usize];
    ["Offset of field: cont_type::row"][::std::mem::offset_of!(cont_type, row) - 8usize];
    ["Offset of field: cont_type::col"][::std::mem::offset_of!(cont_type, col) - 16usize];
    ["Offset of field: cont_type::cont_class"]
        [::std::mem::offset_of!(cont_type, cont_class) - 24usize];
    ["Offset of field: cont_type::num_attrib"]
        [::std::mem::offset_of!(cont_type, num_attrib) - 28usize];
    ["Offset of field: cont_type::attribs"][::std::mem::offset_of!(cont_type, attribs) - 32usize];
    ["Offset of field: cont_type::num_global"]
        [::std::mem::offset_of!(cont_type, num_global) - 40usize];
    ["Offset of field: cont_type::global"][::std::mem::offset_of!(cont_type, global) - 48usize];
    ["Offset of field: cont_type::h"][::std::mem::offset_of!(cont_type, h) - 56usize];
};
pub type Hcont = cont_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lin_seg_type {
    pub row: HSUBCOOR,
    pub col: HSUBCOOR,
    pub length: HSUBATTR,
    pub phi: HSUBATTR,
    pub ref_: Hkey,
    pub first: HITEMCNT,
    pub last: HITEMCNT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lin_seg_type"][::std::mem::size_of::<lin_seg_type>() - 32usize];
    ["Alignment of lin_seg_type"][::std::mem::align_of::<lin_seg_type>() - 8usize];
    ["Offset of field: lin_seg_type::row"][::std::mem::offset_of!(lin_seg_type, row) - 0usize];
    ["Offset of field: lin_seg_type::col"][::std::mem::offset_of!(lin_seg_type, col) - 4usize];
    ["Offset of field: lin_seg_type::length"]
        [::std::mem::offset_of!(lin_seg_type, length) - 8usize];
    ["Offset of field: lin_seg_type::phi"][::std::mem::offset_of!(lin_seg_type, phi) - 12usize];
    ["Offset of field: lin_seg_type::ref_"][::std::mem::offset_of!(lin_seg_type, ref_) - 16usize];
    ["Offset of field: lin_seg_type::first"][::std::mem::offset_of!(lin_seg_type, first) - 24usize];
    ["Offset of field: lin_seg_type::last"][::std::mem::offset_of!(lin_seg_type, last) - 28usize];
};
pub type Hline_seg = lin_seg_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly_type {
    pub num_line: HITEMCNT,
    pub len_line: HITEMCNT,
    pub lines: *mut Hline_seg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of poly_type"][::std::mem::size_of::<poly_type>() - 16usize];
    ["Alignment of poly_type"][::std::mem::align_of::<poly_type>() - 8usize];
    ["Offset of field: poly_type::num_line"][::std::mem::offset_of!(poly_type, num_line) - 0usize];
    ["Offset of field: poly_type::len_line"][::std::mem::offset_of!(poly_type, len_line) - 4usize];
    ["Offset of field: poly_type::lines"][::std::mem::offset_of!(poly_type, lines) - 8usize];
};
pub type Hpoly = poly_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct para_poly_type {
    pub poly1: Hkey,
    pub poly2: Hkey,
    pub first1: HITEMCNT,
    pub last1: HITEMCNT,
    pub first2: HITEMCNT,
    pub last2: HITEMCNT,
    pub quality: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of para_poly_type"][::std::mem::size_of::<para_poly_type>() - 40usize];
    ["Alignment of para_poly_type"][::std::mem::align_of::<para_poly_type>() - 8usize];
    ["Offset of field: para_poly_type::poly1"]
        [::std::mem::offset_of!(para_poly_type, poly1) - 0usize];
    ["Offset of field: para_poly_type::poly2"]
        [::std::mem::offset_of!(para_poly_type, poly2) - 8usize];
    ["Offset of field: para_poly_type::first1"]
        [::std::mem::offset_of!(para_poly_type, first1) - 16usize];
    ["Offset of field: para_poly_type::last1"]
        [::std::mem::offset_of!(para_poly_type, last1) - 20usize];
    ["Offset of field: para_poly_type::first2"]
        [::std::mem::offset_of!(para_poly_type, first2) - 24usize];
    ["Offset of field: para_poly_type::last2"]
        [::std::mem::offset_of!(para_poly_type, last2) - 28usize];
    ["Offset of field: para_poly_type::quality"]
        [::std::mem::offset_of!(para_poly_type, quality) - 32usize];
};
pub type Hpara_poly = para_poly_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mod_para_type {
    pub poly1: Hkey,
    pub poly2: Hkey,
    pub first1: HITEMCNT,
    pub last1: HITEMCNT,
    pub first2: HITEMCNT,
    pub last2: HITEMCNT,
    pub first1_dist: HSUBATTR,
    pub last1_dist: HSUBATTR,
    pub first2_dist: HSUBATTR,
    pub last2_dist: HSUBATTR,
    pub dir1: i16,
    pub dir2: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mod_para_type"][::std::mem::size_of::<mod_para_type>() - 56usize];
    ["Alignment of mod_para_type"][::std::mem::align_of::<mod_para_type>() - 8usize];
    ["Offset of field: mod_para_type::poly1"]
        [::std::mem::offset_of!(mod_para_type, poly1) - 0usize];
    ["Offset of field: mod_para_type::poly2"]
        [::std::mem::offset_of!(mod_para_type, poly2) - 8usize];
    ["Offset of field: mod_para_type::first1"]
        [::std::mem::offset_of!(mod_para_type, first1) - 16usize];
    ["Offset of field: mod_para_type::last1"]
        [::std::mem::offset_of!(mod_para_type, last1) - 20usize];
    ["Offset of field: mod_para_type::first2"]
        [::std::mem::offset_of!(mod_para_type, first2) - 24usize];
    ["Offset of field: mod_para_type::last2"]
        [::std::mem::offset_of!(mod_para_type, last2) - 28usize];
    ["Offset of field: mod_para_type::first1_dist"]
        [::std::mem::offset_of!(mod_para_type, first1_dist) - 32usize];
    ["Offset of field: mod_para_type::last1_dist"]
        [::std::mem::offset_of!(mod_para_type, last1_dist) - 36usize];
    ["Offset of field: mod_para_type::first2_dist"]
        [::std::mem::offset_of!(mod_para_type, first2_dist) - 40usize];
    ["Offset of field: mod_para_type::last2_dist"]
        [::std::mem::offset_of!(mod_para_type, last2_dist) - 44usize];
    ["Offset of field: mod_para_type::dir1"][::std::mem::offset_of!(mod_para_type, dir1) - 48usize];
    ["Offset of field: mod_para_type::dir2"][::std::mem::offset_of!(mod_para_type, dir2) - 50usize];
};
pub type Hmod_para = mod_para_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext_para_type {
    pub poly1: Hkey,
    pub poly2: Hkey,
    pub first1: HITEMCNT,
    pub last1: HITEMCNT,
    pub first2: HITEMCNT,
    pub last2: HITEMCNT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ext_para_type"][::std::mem::size_of::<ext_para_type>() - 32usize];
    ["Alignment of ext_para_type"][::std::mem::align_of::<ext_para_type>() - 8usize];
    ["Offset of field: ext_para_type::poly1"]
        [::std::mem::offset_of!(ext_para_type, poly1) - 0usize];
    ["Offset of field: ext_para_type::poly2"]
        [::std::mem::offset_of!(ext_para_type, poly2) - 8usize];
    ["Offset of field: ext_para_type::first1"]
        [::std::mem::offset_of!(ext_para_type, first1) - 16usize];
    ["Offset of field: ext_para_type::last1"]
        [::std::mem::offset_of!(ext_para_type, last1) - 20usize];
    ["Offset of field: ext_para_type::first2"]
        [::std::mem::offset_of!(ext_para_type, first2) - 24usize];
    ["Offset of field: ext_para_type::last2"]
        [::std::mem::offset_of!(ext_para_type, last2) - 28usize];
};
pub type Hext_para = ext_para_type;
pub type Hhom_mat_2d = [[f64; 3usize]; 2usize];
pub type pHhom_mat_2d = *mut [f64; 3usize];
pub type pHhom_mat_2d_const = *const [f64; 3usize];
pub type puHhom_mat_2d = *mut [f64; 3usize];
pub type Hhom_mat_3d = [[f64; 4usize]; 3usize];
pub type pHhom_mat_3d = *mut [f64; 4usize];
pub type puHhom_mat_3d = *mut [f64; 4usize];
pub type Hproj_mat_2d = [[f64; 3usize]; 3usize];
pub type pHproj_mat_2d = *mut [f64; 3usize];
pub type pHproj_mat_2d_const = *const [f64; 3usize];
pub type puHproj_mat_2d = *mut [f64; 3usize];
pub type Hproj_mat_3d = [[f64; 4usize]; 4usize];
pub type pHproj_mat_3d = *mut [f64; 4usize];
pub type puHproj_mat_3d = *mut [f64; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Hfunction_1d {
    pub num: i32,
    pub x: *mut f32,
    pub y: *mut f32,
    pub xmin: f32,
    pub xmax: f32,
    pub xdist: f32,
    pub is_equidist: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hfunction_1d"][::std::mem::size_of::<Hfunction_1d>() - 40usize];
    ["Alignment of Hfunction_1d"][::std::mem::align_of::<Hfunction_1d>() - 8usize];
    ["Offset of field: Hfunction_1d::num"][::std::mem::offset_of!(Hfunction_1d, num) - 0usize];
    ["Offset of field: Hfunction_1d::x"][::std::mem::offset_of!(Hfunction_1d, x) - 8usize];
    ["Offset of field: Hfunction_1d::y"][::std::mem::offset_of!(Hfunction_1d, y) - 16usize];
    ["Offset of field: Hfunction_1d::xmin"][::std::mem::offset_of!(Hfunction_1d, xmin) - 24usize];
    ["Offset of field: Hfunction_1d::xmax"][::std::mem::offset_of!(Hfunction_1d, xmax) - 28usize];
    ["Offset of field: Hfunction_1d::xdist"][::std::mem::offset_of!(Hfunction_1d, xdist) - 32usize];
    ["Offset of field: Hfunction_1d::is_equidist"]
        [::std::mem::offset_of!(Hfunction_1d, is_equidist) - 36usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union DPHpar {
    pub l: *mut INT4_8,
    pub f: *mut f64,
    pub s: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DPHpar"][::std::mem::size_of::<DPHpar>() - 8usize];
    ["Alignment of DPHpar"][::std::mem::align_of::<DPHpar>() - 8usize];
    ["Offset of field: DPHpar::l"][::std::mem::offset_of!(DPHpar, l) - 0usize];
    ["Offset of field: DPHpar::f"][::std::mem::offset_of!(DPHpar, f) - 0usize];
    ["Offset of field: DPHpar::s"][::std::mem::offset_of!(DPHpar, s) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union DVHpar {
    pub l: INT4_8,
    pub f: f64,
    pub s: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DVHpar"][::std::mem::size_of::<DVHpar>() - 8usize];
    ["Alignment of DVHpar"][::std::mem::align_of::<DVHpar>() - 8usize];
    ["Offset of field: DVHpar::l"][::std::mem::offset_of!(DVHpar, l) - 0usize];
    ["Offset of field: DVHpar::f"][::std::mem::offset_of!(DVHpar, f) - 0usize];
    ["Offset of field: DVHpar::s"][::std::mem::offset_of!(DVHpar, s) - 0usize];
};
pub type HLowLevelErrorCallbackProc =
    ::std::option::Option<unsafe extern "C" fn(err: *const ::std::os::raw::c_char)>;
unsafe extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
unsafe extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
unsafe extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
unsafe extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type Hobject = Hkey;
pub type Htuple = Hctuple;
unsafe extern "C" {
    pub fn SetHcInterfaceStringEncodingIsUtf8(is_utf8: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn IsHcInterfaceStringEncodingUtf8() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CMalloc(
        size: usize,
        file: *const ::std::os::raw::c_char,
        line: INT4_8,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn CFree(
        mem: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        line: INT4_8,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple(
        t: *mut Htuple,
        l: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple_type(
        t: *mut Htuple,
        l: Hlong,
        type_: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcopy_tuple(
        input: *const Htuple,
        output: *mut Htuple,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mattach_tuple(
        src: *mut Htuple,
        dest: *mut Htuple,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mresize_tuple(
        input: *mut Htuple,
        LEN: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mdestroy_tuple(
        t: *mut Htuple,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mlength_tuple(
        t: *const Htuple,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn Mset_i(
        t: *mut Htuple,
        v: Hlong,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mset_d(
        t: *mut Htuple,
        v: f64,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mset_s(
        t: *mut Htuple,
        v: *const ::std::os::raw::c_char,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mset_s_from_utf8(
        t: *mut Htuple,
        v: *const ::std::os::raw::c_char,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mset_s_from_local8bit(
        t: *mut Htuple,
        v: *const ::std::os::raw::c_char,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mset_s_from_wcs(
        t: *mut Htuple,
        v: *const wchar_t,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mset_s_len(
        t: *mut Htuple,
        len: Hlong,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mset_h(
        t: *mut Htuple,
        v: Hphandle,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mget_i(
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn Mget_d(
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> f64;
}
unsafe extern "C" {
    pub fn Mget_s(
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn Mget_s_to_utf8(
        dest: *mut ::std::os::raw::c_char,
        dest_size: Hlong,
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn Mget_s_to_local8bit(
        dest: *mut ::std::os::raw::c_char,
        dest_size: Hlong,
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn Mget_s_to_wcs(
        dest: *mut wchar_t,
        dest_size: Hlong,
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn Mget_h(
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> Hphandle;
}
unsafe extern "C" {
    pub fn Mget_type(
        t: *const Htuple,
        i: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Mcreate_tuple_i(
        t: *mut Htuple,
        value: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple_d(
        t: *mut Htuple,
        value: f64,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple_s(
        t: *mut Htuple,
        value: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple_s_from_utf8(
        t: *mut Htuple,
        value: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple_s_from_local8bit(
        t: *mut Htuple,
        value: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple_s_from_wcs(
        t: *mut Htuple,
        value: *const wchar_t,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mcreate_tuple_h(
        t: *mut Htuple,
        value: Hphandle,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mreuse_tuple_i(
        t: *mut Htuple,
        value: Hlong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mreuse_tuple_d(
        t: *mut Htuple,
        value: f64,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mreuse_tuple_s(
        t: *mut Htuple,
        value: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mreuse_tuple_s_from_utf8(
        t: *mut Htuple,
        value: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mreuse_tuple_s_from_local8bit(
        t: *mut Htuple,
        value: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mreuse_tuple_s_from_wcs(
        t: *mut Htuple,
        value: *const wchar_t,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn Mreuse_tuple_h(
        t: *mut Htuple,
        value: Hphandle,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn F_create_tuple_type(htuple: *mut Htuple, len: Hlong, type_: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn F_create_tuple(htuple: *mut Htuple, l: Hlong);
}
unsafe extern "C" {
    pub fn F_copy_tuple(in_: *const Htuple, out: *mut Htuple);
}
unsafe extern "C" {
    pub fn F_attach_tuple(src: *mut Htuple, dest: *mut Htuple);
}
unsafe extern "C" {
    pub fn F_resize_tuple(htuple: *mut Htuple, LEN: Hlong);
}
unsafe extern "C" {
    pub fn F_destroy_tuple(htuple: *mut Htuple);
}
unsafe extern "C" {
    pub fn F_set_i(t: *mut Htuple, value: Hlong, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_set_d(t: *mut Htuple, value: f64, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_set_s(t: *mut Htuple, val: *const ::std::os::raw::c_char, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_set_s_from_utf8(t: *mut Htuple, val: *const ::std::os::raw::c_char, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_set_s_from_local8bit(t: *mut Htuple, val: *const ::std::os::raw::c_char, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_set_s_from_wcs(t: *mut Htuple, val: *const wchar_t, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_set_h(t: *mut Htuple, val: Hphandle, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_init_i(t: *mut Htuple, value: Hlong, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_init_d(t: *mut Htuple, value: f64, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_init_s(t: *mut Htuple, value: *const ::std::os::raw::c_char, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_init_s_from_utf8(t: *mut Htuple, value: *const ::std::os::raw::c_char, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_init_s_from_local8bit(
        t: *mut Htuple,
        value: *const ::std::os::raw::c_char,
        idx: Hlong,
    );
}
unsafe extern "C" {
    pub fn F_init_s_from_wcs(t: *mut Htuple, value: *const wchar_t, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_init_s_len(t: *mut Htuple, len: Hlong, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_init_h(t: *mut Htuple, value: Hphandle, idx: Hlong);
}
unsafe extern "C" {
    pub fn F_get_i(t: *const Htuple, idx: Hlong) -> Hlong;
}
unsafe extern "C" {
    pub fn F_get_d(t: *const Htuple, idx: Hlong) -> f64;
}
unsafe extern "C" {
    pub fn F_get_s(t: *const Htuple, idx: Hlong) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn F_get_s_to_utf8(
        dest: *mut ::std::os::raw::c_char,
        dest_size: Hlong,
        t: *const Htuple,
        i: Hlong,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn F_get_s_to_local8bit(
        dest: *mut ::std::os::raw::c_char,
        dest_size: Hlong,
        t: *const Htuple,
        i: Hlong,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn F_get_s_to_wcs(
        dest: *mut wchar_t,
        dest_size: Hlong,
        t: *const Htuple,
        i: Hlong,
    ) -> Hlong;
}
unsafe extern "C" {
    pub fn F_get_h(t: *const Htuple, idx: Hlong) -> Hphandle;
}
unsafe extern "C" {
    pub fn F_create_tuple_i(t: *mut Htuple, val: Hlong);
}
unsafe extern "C" {
    pub fn F_create_tuple_d(t: *mut Htuple, val: f64);
}
unsafe extern "C" {
    pub fn F_create_tuple_s(t: *mut Htuple, val: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn F_create_tuple_s_from_utf8(t: *mut Htuple, val: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn F_create_tuple_s_from_local8bit(t: *mut Htuple, val: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn F_create_tuple_s_from_wcs(t: *mut Htuple, val: *const wchar_t);
}
unsafe extern "C" {
    pub fn F_create_tuple_h(t: *mut Htuple, val: Hphandle);
}
unsafe extern "C" {
    pub fn F_reuse_tuple_i(t: *mut Htuple, val: Hlong);
}
unsafe extern "C" {
    pub fn F_reuse_tuple_d(t: *mut Htuple, val: f64);
}
unsafe extern "C" {
    pub fn F_reuse_tuple_s(t: *mut Htuple, val: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn F_reuse_tuple_s_from_utf8(t: *mut Htuple, val: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn F_reuse_tuple_s_from_local8bit(t: *mut Htuple, val: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn F_reuse_tuple_s_from_wcs(t: *mut Htuple, val: *const wchar_t);
}
unsafe extern "C" {
    pub fn F_reuse_tuple_h(t: *mut Htuple, val: Hphandle);
}
unsafe extern "C" {
    pub fn get_operator_id(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn T_call_halcon_by_id(
        id: ::std::os::raw::c_int,
        in_objs: *const Hobject,
        out_objs: *mut Hobject,
        in_ctrls: *const Htuple,
        out_ctrls: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_in_tpar(t: *mut Htuple, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn set_out_tpar(t: *mut Htuple, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn set_in_opar(o: Hobject, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn set_out_opar(o: *mut Hobject, i: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn T_call_halcon(n: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn num_tuple() -> Hlong;
}
unsafe extern "C" {
    pub fn hdev_window_stack_push(win_handle: Htuple);
}
unsafe extern "C" {
    pub fn hdev_window_stack_pop(win_handle: *mut Htuple);
}
unsafe extern "C" {
    pub fn hdev_window_stack_get_active(win_handle: *mut Htuple);
}
unsafe extern "C" {
    pub fn hdev_window_stack_set_active(win_handle: Htuple);
}
unsafe extern "C" {
    pub fn hdev_window_stack_is_open() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn hdev_window_stack_close_all();
}
unsafe extern "C" {
    pub fn T_test_equal_dict_item(
        dicts: Htuple,
        key1: Htuple,
        key2: Htuple,
        result: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn window_stack_push(win_handle: Hlong);
}
unsafe extern "C" {
    pub fn window_stack_pop() -> Hlong;
}
unsafe extern "C" {
    pub fn window_stack_get_active() -> Hlong;
}
unsafe extern "C" {
    pub fn window_stack_set_active(win_handle: Hlong);
}
unsafe extern "C" {
    pub fn window_stack_is_open() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn window_stack_close_all();
}
unsafe extern "C" {
    pub fn replace_elements(
        htuple: *mut Htuple,
        index: *mut Htuple,
        replace_val: *const Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcErrorHandling(ph: Hproc_handle, err: Herror) -> Herror;
}
unsafe extern "C" {
    pub fn HcException(op_id: ::std::os::raw::c_int, err: Herror) -> Herror;
}
unsafe extern "C" {
    pub fn HcPreCall(proc_index: ::std::os::raw::c_int, ph: *mut Hproc_handle) -> Herror;
}
unsafe extern "C" {
    pub fn HcCall(ph: Hproc_handle) -> Herror;
}
unsafe extern "C" {
    pub fn HcPostCall(ph: Hproc_handle, err: Herror) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreIO(ph: Hproc_handle, par: ::std::os::raw::c_int, inObjVar: Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreICL(ph: Hproc_handle, par: ::std::os::raw::c_int, value: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreICD(ph: Hproc_handle, par: ::std::os::raw::c_int, value: f64) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreICS(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreICSEnc(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreICT(ph: Hproc_handle, par: ::std::os::raw::c_int, value: *const Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreICTEnc(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        value: *const Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcInitOC(ph: Hproc_handle, par: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HcInitOCD(ph: Hproc_handle, par: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HcInitOCL(ph: Hproc_handle, par: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HcInitOCS(ph: Hproc_handle, par: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn HcInitOCT(ph: Hproc_handle, par: ::std::os::raw::c_int, ctuple: *mut Hctuple);
}
unsafe extern "C" {
    pub fn HcStoreOO(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        outObjVar: *mut Hobject,
        err: Herror,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreOCL(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        outCtrlVar: *mut Hlong,
        err: Herror,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreOCD(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        outCtrlVar: *mut f64,
        err: Herror,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreOCS(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        outCtrlVar: *mut ::std::os::raw::c_char,
        err: Herror,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreOCSEnc(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        outCtrlVar: *mut ::std::os::raw::c_char,
        err: Herror,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreOCT(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        outCtrlVar: *mut Htuple,
        err: Herror,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn HcStoreOCTEnc(
        ph: Hproc_handle,
        par: ::std::os::raw::c_int,
        outCtrlVar: *mut Htuple,
        err: Herror,
    ) -> Herror;
}
pub type Hvector = Hlong;
pub const Hvectype_eVector: Hvectype = 99352576;
pub const Hvectype_eTupleVector: Hvectype = 99352577;
pub const Hvectype_eTupleLeaf: Hvectype = 99352578;
pub const Hvectype_eObjectVector: Hvectype = 99352579;
pub const Hvectype_eObjectLeaf: Hvectype = 99352580;
pub type Hvectype = ::std::os::raw::c_int;
unsafe extern "C" {
    #[doc = " Hvector functionality"]
    pub fn V_create_obj_vector(dim: Hlong, vec: *mut Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_create_tuple_vector(dim: Hlong, vec: *mut Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_destroy_vector(vec: Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_copy_vector(src: Hvector, dest: *mut Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_set_vector_elem(vec: Hvector, vec_idx: Htuple, subvec: Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_set_vector_obj(obj: Hobject, vec: Hvector, vec_idx: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn V_set_vector_tuple(vec: Hvector, vec_idx: Htuple, tpl: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn V_set_vector_tuple_elem(
        vec: Hvector,
        vec_idx: Htuple,
        tpl_idx: Htuple,
        val: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn V_get_vector_elem(vec: Hvector, index: Htuple, subvec: *mut Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_get_vector_obj(obj: *mut Hobject, vec: Hvector, index: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn V_get_vector_tuple(vec: Hvector, index: Htuple, tpl: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn V_concat_vector(vec1: Hvector, vec2: Hvector, vec_concat: *mut Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_insert_vector_elem(
        vec: Hvector,
        vec_idx: Htuple,
        ins_idx: Htuple,
        ins: Hvector,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn V_remove_vector_elem(vec: Hvector, vec_idx: Htuple, rmv_idx: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn V_clear_vector(vec: Hvector, index: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn V_insert_vector_obj(
        obj: Hobject,
        vec: Hvector,
        vec_idx: Htuple,
        ins_idx: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn V_insert_vector_tuple(
        vec: Hvector,
        vec_idx: Htuple,
        ins_idx: Htuple,
        tpl: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn V_convert_vector_to_tuple(vec: Hvector, tpl: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn V_convert_tuple_to_vector_1d(tpl: Htuple, lengths: Htuple, vec: *mut Hvector) -> Herror;
}
unsafe extern "C" {
    pub fn V_vector_equal(vec1: Hvector, vec2: Hvector, equal: *mut bool) -> Herror;
}
unsafe extern "C" {
    pub fn V_vector_dim(vec: Hvector, dim: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn V_vector_type(vec: Hvector, type_: *mut Hvectype) -> Herror;
}
unsafe extern "C" {
    pub fn V_vector_length(vec: Hvector, length: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn V_sub_vector_length(vec: Hvector, vec_idx: Htuple, length: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn Hsnprintf_Hvector(
        str_: *mut ::std::os::raw::c_char,
        size: Hlong,
        vec: Hvector,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Hsnprintf_Htuple(
        str_: *mut ::std::os::raw::c_char,
        size: Hlong,
        tpl: Htuple,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Hsnprintf_Hobject(
        str_: *mut ::std::os::raw::c_char,
        size: Hlong,
        obj: Hobject,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn T_union_cotangential_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        FitClippingLength: Htuple,
        FitLength: Htuple,
        MaxTangAngle: Htuple,
        MaxDist: Htuple,
        MaxDistPerp: Htuple,
        MaxOverlap: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union_cotangential_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        FitClippingLength: f64,
        FitLength: f64,
        MaxTangAngle: f64,
        MaxDist: f64,
        MaxDistPerp: f64,
        MaxOverlap: f64,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_polar_trans_contour_xld_inv(
        PolarContour: Hobject,
        XYTransContour: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        AngleStart: Htuple,
        AngleEnd: Htuple,
        RadiusStart: Htuple,
        RadiusEnd: Htuple,
        WidthIn: Htuple,
        HeightIn: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn polar_trans_contour_xld_inv(
        PolarContour: Hobject,
        XYTransContour: *mut Hobject,
        Row: f64,
        Column: f64,
        AngleStart: f64,
        AngleEnd: f64,
        RadiusStart: f64,
        RadiusEnd: f64,
        WidthIn: Hlong,
        HeightIn: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_polar_trans_contour_xld(
        Contour: Hobject,
        PolarTransContour: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        AngleStart: Htuple,
        AngleEnd: Htuple,
        RadiusStart: Htuple,
        RadiusEnd: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn polar_trans_contour_xld(
        Contour: Hobject,
        PolarTransContour: *mut Hobject,
        Row: f64,
        Column: f64,
        AngleStart: f64,
        AngleEnd: f64,
        RadiusStart: f64,
        RadiusEnd: f64,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_nurbs_interp(
        Rows: Htuple,
        Cols: Htuple,
        Tangents: Htuple,
        Degree: Htuple,
        CtrlRows: *mut Htuple,
        CtrlCols: *mut Htuple,
        Knots: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_contour_nurbs_xld(
        Contour: *mut Hobject,
        Rows: Htuple,
        Cols: Htuple,
        Knots: Htuple,
        Weights: Htuple,
        Degree: Htuple,
        MaxError: Htuple,
        MaxDistance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union2_closed_polygons_xld(
        Polygons1: Hobject,
        Polygons2: Hobject,
        PolygonsUnion: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union2_closed_polygons_xld(
        Polygons1: Hobject,
        Polygons2: Hobject,
        PolygonsUnion: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union2_closed_contours_xld(
        Contours1: Hobject,
        Contours2: Hobject,
        ContoursUnion: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union2_closed_contours_xld(
        Contours1: Hobject,
        Contours2: Hobject,
        ContoursUnion: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_symm_difference_closed_polygons_xld(
        Polygons1: Hobject,
        Polygons2: Hobject,
        PolygonsDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn symm_difference_closed_polygons_xld(
        Polygons1: Hobject,
        Polygons2: Hobject,
        PolygonsDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_symm_difference_closed_contours_xld(
        Contours1: Hobject,
        Contours2: Hobject,
        ContoursDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn symm_difference_closed_contours_xld(
        Contours1: Hobject,
        Contours2: Hobject,
        ContoursDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_difference_closed_polygons_xld(
        Polygons: Hobject,
        Sub: Hobject,
        PolygonsDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn difference_closed_polygons_xld(
        Polygons: Hobject,
        Sub: Hobject,
        PolygonsDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_difference_closed_contours_xld(
        Contours: Hobject,
        Sub: Hobject,
        ContoursDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn difference_closed_contours_xld(
        Contours: Hobject,
        Sub: Hobject,
        ContoursDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_closed_polygons_xld(
        Polygons1: Hobject,
        Polygons2: Hobject,
        PolygonsIntersection: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_closed_polygons_xld(
        Polygons1: Hobject,
        Polygons2: Hobject,
        PolygonsIntersection: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_closed_contours_xld(
        Contours1: Hobject,
        Contours2: Hobject,
        ContoursIntersection: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_closed_contours_xld(
        Contours1: Hobject,
        Contours2: Hobject,
        ContoursIntersection: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union_cocircular_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxArcAngleDiff: Htuple,
        MaxArcOverlap: Htuple,
        MaxTangentAngle: Htuple,
        MaxDist: Htuple,
        MaxRadiusDiff: Htuple,
        MaxCenterDist: Htuple,
        MergeSmallContours: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union_cocircular_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxArcAngleDiff: f64,
        MaxArcOverlap: f64,
        MaxTangentAngle: f64,
        MaxDist: f64,
        MaxRadiusDiff: f64,
        MaxCenterDist: f64,
        MergeSmallContours: *const ::std::os::raw::c_char,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_crop_contours_xld(
        Contours: Hobject,
        CroppedContours: *mut Hobject,
        Row1: Htuple,
        Col1: Htuple,
        Row2: Htuple,
        Col2: Htuple,
        CloseContours: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn crop_contours_xld(
        Contours: Hobject,
        CroppedContours: *mut Hobject,
        Row1: f64,
        Col1: f64,
        Row2: f64,
        Col2: f64,
        CloseContours: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_cross_contour_xld(
        Cross: *mut Hobject,
        Row: Htuple,
        Col: Htuple,
        Size: Htuple,
        Angle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_cross_contour_xld(
        Cross: *mut Hobject,
        Row: f64,
        Col: f64,
        Size: f64,
        Angle: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sort_contours_xld(
        Contours: Hobject,
        SortedContours: *mut Hobject,
        SortMode: Htuple,
        Order: Htuple,
        RowOrCol: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sort_contours_xld(
        Contours: Hobject,
        SortedContours: *mut Hobject,
        SortMode: *const ::std::os::raw::c_char,
        Order: *const ::std::os::raw::c_char,
        RowOrCol: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_merge_cont_line_scan_xld(
        CurrConts: Hobject,
        PrevConts: Hobject,
        CurrMergedConts: *mut Hobject,
        PrevMergedConts: *mut Hobject,
        ImageHeight: Htuple,
        Margin: Htuple,
        MergeBorder: Htuple,
        MaxImagesCont: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn merge_cont_line_scan_xld(
        CurrConts: Hobject,
        PrevConts: Hobject,
        CurrMergedConts: *mut Hobject,
        PrevMergedConts: *mut Hobject,
        ImageHeight: Hlong,
        Margin: f64,
        MergeBorder: *const ::std::os::raw::c_char,
        MaxImagesCont: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_polygon_xld_arc_info(Polygons: *mut Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_polygon_xld_arc_info(
        Polygons: *mut Hobject,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_polygon_xld_arc_info(Polygons: Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_polygon_xld_arc_info(
        Polygons: Hobject,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_contour_xld_arc_info(Contours: *mut Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_contour_xld_arc_info(
        Contours: *mut Hobject,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_contour_xld_arc_info(Contours: Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_contour_xld_arc_info(
        Contours: Hobject,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_world_file(FileName: Htuple, WorldTransformation: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_parallel_contour_xld(
        Contours: Hobject,
        ParallelContours: *mut Hobject,
        Mode: Htuple,
        Distance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_parallel_contour_xld(
        Contours: Hobject,
        ParallelContours: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Distance: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_rectangle2_contour_xld(
        Rectangle: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_rectangle2_contour_xld(
        Rectangle: *mut Hobject,
        Row: f64,
        Column: f64,
        Phi: f64,
        Length1: f64,
        Length2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dist_rectangle2_contour_points_xld(
        Contour: Hobject,
        ClippingEndPoints: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
        Distances: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_rectangle2_contour_xld(
        Contours: Hobject,
        Algorithm: Htuple,
        MaxNumPoints: Htuple,
        MaxClosureDist: Htuple,
        ClippingEndPoints: Htuple,
        Iterations: Htuple,
        ClippingFactor: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
        PointOrder: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fit_rectangle2_contour_xld(
        Contours: Hobject,
        Algorithm: *const ::std::os::raw::c_char,
        MaxNumPoints: Hlong,
        MaxClosureDist: f64,
        ClippingEndPoints: Hlong,
        Iterations: Hlong,
        ClippingFactor: f64,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Length1: *mut f64,
        Length2: *mut f64,
        PointOrder: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_segment_contour_attrib_xld(
        Contour: Hobject,
        ContourPart: *mut Hobject,
        Attribute: Htuple,
        Operation: Htuple,
        Min: Htuple,
        Max: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn segment_contour_attrib_xld(
        Contour: Hobject,
        ContourPart: *mut Hobject,
        Attribute: *const ::std::os::raw::c_char,
        Operation: *const ::std::os::raw::c_char,
        Min: f64,
        Max: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_segment_contours_xld(
        Contours: Hobject,
        ContoursSplit: *mut Hobject,
        Mode: Htuple,
        SmoothCont: Htuple,
        MaxLineDist1: Htuple,
        MaxLineDist2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn segment_contours_xld(
        Contours: Hobject,
        ContoursSplit: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        SmoothCont: Hlong,
        MaxLineDist1: f64,
        MaxLineDist2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_circle_contour_xld(
        Contours: Hobject,
        Algorithm: Htuple,
        MaxNumPoints: Htuple,
        MaxClosureDist: Htuple,
        ClippingEndPoints: Htuple,
        Iterations: Htuple,
        ClippingFactor: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Radius: *mut Htuple,
        StartPhi: *mut Htuple,
        EndPhi: *mut Htuple,
        PointOrder: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fit_circle_contour_xld(
        Contours: Hobject,
        Algorithm: *const ::std::os::raw::c_char,
        MaxNumPoints: Hlong,
        MaxClosureDist: f64,
        ClippingEndPoints: Hlong,
        Iterations: Hlong,
        ClippingFactor: f64,
        Row: *mut f64,
        Column: *mut f64,
        Radius: *mut f64,
        StartPhi: *mut f64,
        EndPhi: *mut f64,
        PointOrder: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_line_contour_xld(
        Contours: Hobject,
        Algorithm: Htuple,
        MaxNumPoints: Htuple,
        ClippingEndPoints: Htuple,
        Iterations: Htuple,
        ClippingFactor: Htuple,
        RowBegin: *mut Htuple,
        ColBegin: *mut Htuple,
        RowEnd: *mut Htuple,
        ColEnd: *mut Htuple,
        Nr: *mut Htuple,
        Nc: *mut Htuple,
        Dist: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fit_line_contour_xld(
        Contours: Hobject,
        Algorithm: *const ::std::os::raw::c_char,
        MaxNumPoints: Hlong,
        ClippingEndPoints: Hlong,
        Iterations: Hlong,
        ClippingFactor: f64,
        RowBegin: *mut f64,
        ColBegin: *mut f64,
        RowEnd: *mut f64,
        ColEnd: *mut f64,
        Nr: *mut f64,
        Nc: *mut f64,
        Dist: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dist_ellipse_contour_points_xld(
        Contour: Hobject,
        DistanceMode: Htuple,
        ClippingEndPoints: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        Distances: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dist_ellipse_contour_xld(
        Contours: Hobject,
        Mode: Htuple,
        MaxNumPoints: Htuple,
        ClippingEndPoints: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        MinDist: *mut Htuple,
        MaxDist: *mut Htuple,
        AvgDist: *mut Htuple,
        SigmaDist: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dist_ellipse_contour_xld(
        Contours: Hobject,
        Mode: *const ::std::os::raw::c_char,
        MaxNumPoints: Hlong,
        ClippingEndPoints: Hlong,
        Row: f64,
        Column: f64,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
        MinDist: *mut f64,
        MaxDist: *mut f64,
        AvgDist: *mut f64,
        SigmaDist: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_ellipse_contour_xld(
        Contours: Hobject,
        Algorithm: Htuple,
        MaxNumPoints: Htuple,
        MaxClosureDist: Htuple,
        ClippingEndPoints: Htuple,
        VossTabSize: Htuple,
        Iterations: Htuple,
        ClippingFactor: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Radius1: *mut Htuple,
        Radius2: *mut Htuple,
        StartPhi: *mut Htuple,
        EndPhi: *mut Htuple,
        PointOrder: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fit_ellipse_contour_xld(
        Contours: Hobject,
        Algorithm: *const ::std::os::raw::c_char,
        MaxNumPoints: Hlong,
        MaxClosureDist: f64,
        ClippingEndPoints: Hlong,
        VossTabSize: Hlong,
        Iterations: Hlong,
        ClippingFactor: f64,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Radius1: *mut f64,
        Radius2: *mut f64,
        StartPhi: *mut f64,
        EndPhi: *mut f64,
        PointOrder: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_circle_contour_xld(
        ContCircle: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Radius: Htuple,
        StartPhi: Htuple,
        EndPhi: Htuple,
        PointOrder: Htuple,
        Resolution: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_circle_contour_xld(
        ContCircle: *mut Hobject,
        Row: f64,
        Column: f64,
        Radius: f64,
        StartPhi: f64,
        EndPhi: f64,
        PointOrder: *const ::std::os::raw::c_char,
        Resolution: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_ellipse_contour_xld(
        ContEllipse: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        StartPhi: Htuple,
        EndPhi: Htuple,
        PointOrder: Htuple,
        Resolution: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_ellipse_contour_xld(
        ContEllipse: *mut Hobject,
        Row: f64,
        Column: f64,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
        StartPhi: f64,
        EndPhi: f64,
        PointOrder: *const ::std::os::raw::c_char,
        Resolution: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_noise_white_contour_xld(
        Contours: Hobject,
        NoisyContours: *mut Hobject,
        NumRegrPoints: Htuple,
        Amp: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_noise_white_contour_xld(
        Contours: Hobject,
        NoisyContours: *mut Hobject,
        NumRegrPoints: Hlong,
        Amp: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_combine_roads_xld(
        EdgePolygons: Hobject,
        ModParallels: Hobject,
        ExtParallels: Hobject,
        CenterLines: Hobject,
        RoadSides: *mut Hobject,
        MaxAngleParallel: Htuple,
        MaxAngleColinear: Htuple,
        MaxDistanceParallel: Htuple,
        MaxDistanceColinear: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn combine_roads_xld(
        EdgePolygons: Hobject,
        ModParallels: Hobject,
        ExtParallels: Hobject,
        CenterLines: Hobject,
        RoadSides: *mut Hobject,
        MaxAngleParallel: f64,
        MaxAngleColinear: f64,
        MaxDistanceParallel: f64,
        MaxDistanceColinear: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_max_parallels_xld(ExtParallels: Hobject, MaxPolygons: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn max_parallels_xld(ExtParallels: Hobject, MaxPolygons: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_mod_parallels_xld(
        Parallels: Hobject,
        Image: Hobject,
        ModParallels: *mut Hobject,
        ExtParallels: *mut Hobject,
        Quality: Htuple,
        MinGray: Htuple,
        MaxGray: Htuple,
        MaxStandard: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mod_parallels_xld(
        Parallels: Hobject,
        Image: Hobject,
        ModParallels: *mut Hobject,
        ExtParallels: *mut Hobject,
        Quality: f64,
        MinGray: Hlong,
        MaxGray: Hlong,
        MaxStandard: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_info_parallels_xld(
        Parallels: Hobject,
        Image: Hobject,
        QualityMin: *mut Htuple,
        QualityMax: *mut Htuple,
        GrayMin: *mut Htuple,
        GrayMax: *mut Htuple,
        StandardMin: *mut Htuple,
        StandardMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn info_parallels_xld(
        Parallels: Hobject,
        Image: Hobject,
        QualityMin: *mut f64,
        QualityMax: *mut f64,
        GrayMin: *mut Hlong,
        GrayMax: *mut Hlong,
        StandardMin: *mut f64,
        StandardMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_parallels_xld(
        Parallels: Hobject,
        Row1: *mut Htuple,
        Col1: *mut Htuple,
        Length1: *mut Htuple,
        Phi1: *mut Htuple,
        Row2: *mut Htuple,
        Col2: *mut Htuple,
        Length2: *mut Htuple,
        Phi2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_parallels_xld(
        Polygons: Hobject,
        Parallels: *mut Hobject,
        Len: Htuple,
        Dist: Htuple,
        Alpha: Htuple,
        Merge: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_parallels_xld(
        Polygons: Hobject,
        Parallels: *mut Hobject,
        Len: f64,
        Dist: f64,
        Alpha: f64,
        Merge: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_lines_xld(
        Polygon: Hobject,
        BeginRow: *mut Htuple,
        BeginCol: *mut Htuple,
        EndRow: *mut Htuple,
        EndCol: *mut Htuple,
        Length: *mut Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_polygon_xld(
        Polygon: Hobject,
        Row: *mut Htuple,
        Col: *mut Htuple,
        Length: *mut Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_polygons_xld(
        Contours: Hobject,
        Polygons: *mut Hobject,
        Type: Htuple,
        Alpha: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_polygons_xld(
        Contours: Hobject,
        Polygons: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Alpha: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_split_contours_xld(
        Polygons: Hobject,
        Contours: *mut Hobject,
        Mode: Htuple,
        Weight: Htuple,
        Smooth: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn split_contours_xld(
        Polygons: Hobject,
        Contours: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Weight: Hlong,
        Smooth: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_contour_xld(
        Contours: Hobject,
        ContoursProjTrans: *mut Hobject,
        HomMat2D: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_polygon_xld(
        Polygons: Hobject,
        PolygonsAffineTrans: *mut Hobject,
        HomMat2D: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_contour_xld(
        Contours: Hobject,
        ContoursAffineTrans: *mut Hobject,
        HomMat2D: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_contours_xld(Contours: Hobject, ClosedContours: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn close_contours_xld(Contours: Hobject, ClosedContours: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_clip_end_points_contours_xld(
        Contours: Hobject,
        ClippedContours: *mut Hobject,
        Mode: Htuple,
        Length: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn clip_end_points_contours_xld(
        Contours: Hobject,
        ClippedContours: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Length: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clip_contours_xld(
        Contours: Hobject,
        ClippedContours: *mut Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn clip_contours_xld(
        Contours: Hobject,
        ClippedContours: *mut Hobject,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_local_max_contours_xld(
        Contours: Hobject,
        Image: Hobject,
        LocalMaxContours: *mut Hobject,
        MinPercent: Htuple,
        MinDiff: Htuple,
        Distance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn local_max_contours_xld(
        Contours: Hobject,
        Image: Hobject,
        LocalMaxContours: *mut Hobject,
        MinPercent: Hlong,
        MinDiff: Hlong,
        Distance: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union_straight_contours_histo_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        SelectedContours: *mut Hobject,
        RefLineStartRow: Htuple,
        RefLineStartColumn: Htuple,
        RefLineEndRow: Htuple,
        RefLineEndColumn: Htuple,
        Width: Htuple,
        MaxWidth: Htuple,
        FilterSize: Htuple,
        HistoValues: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union_straight_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDist: Htuple,
        MaxDiff: Htuple,
        Percent: Htuple,
        Mode: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union_straight_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDist: f64,
        MaxDiff: f64,
        Percent: f64,
        Mode: *const ::std::os::raw::c_char,
        Iterations: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union_collinear_contours_ext_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDistAbs: Htuple,
        MaxDistRel: Htuple,
        MaxShift: Htuple,
        MaxAngle: Htuple,
        MaxOverlap: Htuple,
        MaxRegrError: Htuple,
        MaxCosts: Htuple,
        WeightDist: Htuple,
        WeightShift: Htuple,
        WeightAngle: Htuple,
        WeightLink: Htuple,
        WeightRegr: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union_collinear_contours_ext_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDistAbs: f64,
        MaxDistRel: f64,
        MaxShift: f64,
        MaxAngle: f64,
        MaxOverlap: f64,
        MaxRegrError: f64,
        MaxCosts: f64,
        WeightDist: f64,
        WeightShift: f64,
        WeightAngle: f64,
        WeightLink: f64,
        WeightRegr: f64,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union_collinear_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDistAbs: Htuple,
        MaxDistRel: Htuple,
        MaxShift: Htuple,
        MaxAngle: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union_collinear_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDistAbs: f64,
        MaxDistRel: f64,
        MaxShift: f64,
        MaxAngle: f64,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union_adjacent_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDistAbs: Htuple,
        MaxDistRel: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union_adjacent_contours_xld(
        Contours: Hobject,
        UnionContours: *mut Hobject,
        MaxDistAbs: f64,
        MaxDistRel: f64,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_contours_xld(
        Contours: Hobject,
        SelectedContours: *mut Hobject,
        Feature: Htuple,
        Min1: Htuple,
        Max1: Htuple,
        Min2: Htuple,
        Max2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_contours_xld(
        Contours: Hobject,
        SelectedContours: *mut Hobject,
        Feature: *const ::std::os::raw::c_char,
        Min1: f64,
        Max1: f64,
        Min2: f64,
        Max2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_regress_params_xld(
        Contours: Hobject,
        Length: *mut Htuple,
        Nx: *mut Htuple,
        Ny: *mut Htuple,
        Dist: *mut Htuple,
        Fpx: *mut Htuple,
        Fpy: *mut Htuple,
        Lpx: *mut Htuple,
        Lpy: *mut Htuple,
        Mean: *mut Htuple,
        Deviation: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_regress_contours_xld(
        Contours: Hobject,
        RegressContours: *mut Hobject,
        Mode: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn regress_contours_xld(
        Contours: Hobject,
        RegressContours: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_contour_angle_xld(
        Contour: Hobject,
        AngleMode: Htuple,
        CalcMode: Htuple,
        Lookaround: Htuple,
        Angles: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smooth_contours_xld(
        Contours: Hobject,
        SmoothedContours: *mut Hobject,
        NumRegrPoints: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smooth_contours_xld(
        Contours: Hobject,
        SmoothedContours: *mut Hobject,
        NumRegrPoints: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_contour_point_num_xld(Contour: Hobject, Length: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn contour_point_num_xld(Contour: Hobject, Length: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_contour_global_attribs_xld(Contour: Hobject, Attribs: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_contour_global_attrib_xld(
        Contour: Hobject,
        Name: Htuple,
        Attrib: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_contour_attribs_xld(Contour: Hobject, Attribs: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_contour_attrib_xld(Contour: Hobject, Name: Htuple, Attrib: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_contour_xld(Contour: Hobject, Row: *mut Htuple, Col: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_contour_region_xld(
        Regions: Hobject,
        Contours: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_contour_region_xld(
        Regions: Hobject,
        Contours: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_contour_polygon_rounded_xld(
        Contour: *mut Hobject,
        Row: Htuple,
        Col: Htuple,
        Radius: Htuple,
        SamplingInterval: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_contour_polygon_xld(Contour: *mut Hobject, Row: Htuple, Col: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_contours_skeleton_xld(
        Skeleton: Hobject,
        Contours: *mut Hobject,
        Length: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_contours_skeleton_xld(
        Skeleton: Hobject,
        Contours: *mut Hobject,
        Length: Hlong,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_xld(XLDObject: Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn disp_xld(XLDObject: Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_wiener_filter_ni(
        Image: Hobject,
        Psf: Hobject,
        NoiseRegion: Hobject,
        RestoredImage: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn wiener_filter_ni(
        Image: Hobject,
        Psf: Hobject,
        NoiseRegion: Hobject,
        RestoredImage: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_wiener_filter(
        Image: Hobject,
        Psf: Hobject,
        FilteredImage: Hobject,
        RestoredImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn wiener_filter(
        Image: Hobject,
        Psf: Hobject,
        FilteredImage: Hobject,
        RestoredImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_psf_motion(
        Psf: *mut Hobject,
        PSFwidth: Htuple,
        PSFheight: Htuple,
        Blurring: Htuple,
        Angle: Htuple,
        Type: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_psf_motion(
        Psf: *mut Hobject,
        PSFwidth: Hlong,
        PSFheight: Hlong,
        Blurring: f64,
        Angle: Hlong,
        Type: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_simulate_motion(
        Image: Hobject,
        MovedImage: *mut Hobject,
        Blurring: Htuple,
        Angle: Htuple,
        Type: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn simulate_motion(
        Image: Hobject,
        MovedImage: *mut Hobject,
        Blurring: f64,
        Angle: Hlong,
        Type: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_psf_defocus(
        Psf: *mut Hobject,
        PSFwidth: Htuple,
        PSFheight: Htuple,
        Blurring: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_psf_defocus(
        Psf: *mut Hobject,
        PSFwidth: Hlong,
        PSFheight: Hlong,
        Blurring: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_simulate_defocus(
        Image: Hobject,
        DefocusedImage: *mut Hobject,
        Blurring: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn simulate_defocus(Image: Hobject, DefocusedImage: *mut Hobject, Blurring: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_variation_model(
        SerializedItemHandle: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_variation_model(SerializedItemHandle: Hlong, ModelID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_variation_model(
        ModelID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_variation_model(ModelID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_variation_model(FileName: Htuple, ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_variation_model(
        FileName: *const ::std::os::raw::c_char,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_variation_model(ModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_variation_model(ModelID: Hlong, FileName: *const ::std::os::raw::c_char)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_get_thresh_images_variation_model(
        MinImage: *mut Hobject,
        MaxImage: *mut Hobject,
        ModelID: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_thresh_images_variation_model(
        MinImage: *mut Hobject,
        MaxImage: *mut Hobject,
        ModelID: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_variation_model(
        Image: *mut Hobject,
        VarImage: *mut Hobject,
        ModelID: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_variation_model(
        Image: *mut Hobject,
        VarImage: *mut Hobject,
        ModelID: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compare_ext_variation_model(
        Image: Hobject,
        Region: *mut Hobject,
        ModelID: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compare_ext_variation_model(
        Image: Hobject,
        Region: *mut Hobject,
        ModelID: Hlong,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compare_variation_model(
        Image: Hobject,
        Region: *mut Hobject,
        ModelID: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compare_variation_model(Image: Hobject, Region: *mut Hobject, ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_prepare_direct_variation_model(
        RefImage: Hobject,
        VarImage: Hobject,
        ModelID: Htuple,
        AbsThreshold: Htuple,
        VarThreshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn prepare_direct_variation_model(
        RefImage: Hobject,
        VarImage: Hobject,
        ModelID: Hlong,
        AbsThreshold: f64,
        VarThreshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_prepare_variation_model(
        ModelID: Htuple,
        AbsThreshold: Htuple,
        VarThreshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn prepare_variation_model(ModelID: Hlong, AbsThreshold: f64, VarThreshold: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_variation_model(Images: Hobject, ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn train_variation_model(Images: Hobject, ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_variation_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_variation_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_variation_model(ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_variation_model(ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_train_data_variation_model(ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_train_data_variation_model(ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_variation_model(
        Width: Htuple,
        Height: Htuple,
        Type: Htuple,
        Mode: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_variation_model(
        Width: Hlong,
        Height: Hlong,
        Type: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_union(Set1: Htuple, Set2: Htuple, Union: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_union(Set1: Hlong, Set2: Hlong, Union: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_intersection(Set1: Htuple, Set2: Htuple, Intersection: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_intersection(Set1: Hlong, Set2: Hlong, Intersection: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_difference(Set1: Htuple, Set2: Htuple, Difference: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_difference(Set1: Hlong, Set2: Hlong, Difference: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_symmdiff(Set1: Htuple, Set2: Htuple, SymmDiff: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_symmdiff(Set1: Hlong, Set2: Hlong, SymmDiff: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_string_elem(T: Htuple, IsString: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_string_elem(T: *const ::std::os::raw::c_char, IsString: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_real_elem(T: Htuple, IsReal: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_real_elem(T: f64, IsReal: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_int_elem(T: Htuple, IsInt: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_int_elem(T: Hlong, IsInt: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_type_elem(T: Htuple, Types: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_type_elem(T: f64, Types: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_mixed(T: Htuple, IsMixed: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_mixed(T: *const ::std::os::raw::c_char, IsMixed: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_string(T: Htuple, IsString: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_string(T: *const ::std::os::raw::c_char, IsString: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_real(T: Htuple, IsReal: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_real(T: f64, IsReal: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_int(T: Htuple, IsInt: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_int(T: Hlong, IsInt: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_type(T: Htuple, Type: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_type(T: f64, Type: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_histo_range(
        Tuple: Htuple,
        Min: Htuple,
        Max: Htuple,
        NumBins: Htuple,
        Histo: *mut Htuple,
        BinSize: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_regexp_select(
        Data: Htuple,
        Expression: Htuple,
        Selection: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_regexp_select(
        Data: *const ::std::os::raw::c_char,
        Expression: *const ::std::os::raw::c_char,
        Selection: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_regexp_test(Data: Htuple, Expression: Htuple, NumMatches: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn tuple_regexp_test(
        Data: *const ::std::os::raw::c_char,
        Expression: *const ::std::os::raw::c_char,
        NumMatches: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_regexp_replace(
        Data: Htuple,
        Expression: Htuple,
        Replace: Htuple,
        Result: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_regexp_replace(
        Data: *const ::std::os::raw::c_char,
        Expression: *const ::std::os::raw::c_char,
        Replace: *const ::std::os::raw::c_char,
        Result: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_regexp_match(Data: Htuple, Expression: Htuple, Matches: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_regexp_match(
        Data: *const ::std::os::raw::c_char,
        Expression: *const ::std::os::raw::c_char,
        Matches: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_rand(Length: Htuple, Rand: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_rand(Length: Hlong, Rand: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_length(Tuple: Htuple, Length: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_length(Tuple: Hlong, Length: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sgn(T: Htuple, Sgn: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sgn(T: f64, Sgn: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_max2(T1: Htuple, T2: Htuple, Max2: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_max2(T1: f64, T2: f64, Max2: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_min2(T1: Htuple, T2: Htuple, Min2: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_min2(T1: f64, T2: f64, Min2: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_max(Tuple: Htuple, Max: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_max(Tuple: Hlong, Max: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_min(Tuple: Htuple, Min: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_min(Tuple: Hlong, Min: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_cumul(Tuple: Htuple, Cumul: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_cumul(Tuple: Hlong, Cumul: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_select_rank(Tuple: Htuple, RankIndex: Htuple, Selected: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_select_rank(Tuple: Hlong, RankIndex: Hlong, Selected: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_median(Tuple: Htuple, Median: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_median(Tuple: Hlong, Median: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sum(Tuple: Htuple, Sum: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sum(Tuple: Hlong, Sum: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_mean(Tuple: Htuple, Mean: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_mean(Tuple: Hlong, Mean: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_deviation(Tuple: Htuple, Deviation: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_deviation(Tuple: Hlong, Deviation: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_uniq(Tuple: Htuple, Uniq: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_uniq(Tuple: Hlong, Uniq: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_find_last(Tuple: Htuple, ToFind: Htuple, Index: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_find_last(Tuple: Hlong, ToFind: Hlong, Index: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_find_first(Tuple: Htuple, ToFind: Htuple, Index: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_find_first(Tuple: Hlong, ToFind: Hlong, Index: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_find(Tuple: Htuple, ToFind: Htuple, Indices: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_find(Tuple: Hlong, ToFind: Hlong, Indices: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sort_index(Tuple: Htuple, Indices: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sort_index(Tuple: Hlong, Indices: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sort(Tuple: Htuple, Sorted: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sort(Tuple: Hlong, Sorted: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_inverse(Tuple: Htuple, Inverted: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_inverse(Tuple: Hlong, Inverted: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_concat(T1: Htuple, T2: Htuple, Concat: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_concat(T1: Hlong, T2: Hlong, Concat: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_select_range(
        Tuple: Htuple,
        Leftindex: Htuple,
        Rightindex: Htuple,
        Selected: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_select_range(
        Tuple: Hlong,
        Leftindex: Hlong,
        Rightindex: Hlong,
        Selected: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_last_n(Tuple: Htuple, Index: Htuple, Selected: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_last_n(Tuple: Hlong, Index: Hlong, Selected: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_first_n(Tuple: Htuple, Index: Htuple, Selected: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_first_n(Tuple: Hlong, Index: Hlong, Selected: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_insert(
        Tuple: Htuple,
        Index: Htuple,
        InsertTuple: Htuple,
        Extended: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_replace(
        Tuple: Htuple,
        Index: Htuple,
        ReplaceTuple: Htuple,
        Replaced: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_remove(Tuple: Htuple, Index: Htuple, Reduced: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_remove(Tuple: Hlong, Index: Hlong, Reduced: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_select_mask(Tuple: Htuple, Mask: Htuple, Selected: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_select_mask(Tuple: Hlong, Mask: Hlong, Selected: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_select(Tuple: Htuple, Index: Htuple, Selected: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_select(Tuple: Hlong, Index: Hlong, Selected: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_str_bit_select(Tuple: Htuple, Index: Htuple, Selected: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_str_bit_select(
        Tuple: *const ::std::os::raw::c_char,
        Index: Hlong,
        Selected: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_gen_sequence(
        Start: Htuple,
        End: Htuple,
        Step: Htuple,
        Sequence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_gen_sequence(
        Start: Hlong,
        End: Hlong,
        Step: Hlong,
        Sequence: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_gen_const(Length: Htuple, Const: Htuple, Newtuple: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_gen_const(Length: Hlong, Const: Hlong, Newtuple: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_environment(Names: Htuple, Values: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_environment(
        Names: *const ::std::os::raw::c_char,
        Values: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_split(String: Htuple, Separator: Htuple, Substrings: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_split(
        String: *const ::std::os::raw::c_char,
        Separator: *const ::std::os::raw::c_char,
        Substrings: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_substr(
        String: Htuple,
        Position1: Htuple,
        Position2: Htuple,
        Substring: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_substr(
        String: *const ::std::os::raw::c_char,
        Position1: Hlong,
        Position2: Hlong,
        Substring: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_str_last_n(String: Htuple, Position: Htuple, Substring: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_str_last_n(
        String: *const ::std::os::raw::c_char,
        Position: Hlong,
        Substring: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_str_first_n(String: Htuple, Position: Htuple, Substring: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_str_first_n(
        String: *const ::std::os::raw::c_char,
        Position: Hlong,
        Substring: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_strrchr(String: Htuple, ToFind: Htuple, Position: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_strrchr(
        String: *const ::std::os::raw::c_char,
        ToFind: *const ::std::os::raw::c_char,
        Position: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_strchr(String: Htuple, ToFind: Htuple, Position: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_strchr(
        String: *const ::std::os::raw::c_char,
        ToFind: *const ::std::os::raw::c_char,
        Position: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_strrstr(String: Htuple, ToFind: Htuple, Position: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_strrstr(
        String: *const ::std::os::raw::c_char,
        ToFind: *const ::std::os::raw::c_char,
        Position: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_strstr(String: Htuple, ToFind: Htuple, Position: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_strstr(
        String: *const ::std::os::raw::c_char,
        ToFind: *const ::std::os::raw::c_char,
        Position: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_strlen(T1: Htuple, Length: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_strlen(T1: *const ::std::os::raw::c_char, Length: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_less_equal_elem(T1: Htuple, T2: Htuple, Lesseq: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_less_equal_elem(T1: Hlong, T2: Hlong, Lesseq: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_less_elem(T1: Htuple, T2: Htuple, Less: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_less_elem(T1: Hlong, T2: Hlong, Less: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_greater_equal_elem(T1: Htuple, T2: Htuple, Greatereq: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_greater_equal_elem(T1: Hlong, T2: Hlong, Greatereq: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_greater_elem(T1: Htuple, T2: Htuple, Greater: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_greater_elem(T1: Hlong, T2: Hlong, Greater: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_not_equal_elem(T1: Htuple, T2: Htuple, Nequal: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_not_equal_elem(T1: Hlong, T2: Hlong, Nequal: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_equal_elem(T1: Htuple, T2: Htuple, Equal: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_equal_elem(T1: Hlong, T2: Hlong, Equal: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_less_equal(T1: Htuple, T2: Htuple, Lesseq: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_less_equal(T1: Hlong, T2: Hlong, Lesseq: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_less(T1: Htuple, T2: Htuple, Less: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_less(T1: Hlong, T2: Hlong, Less: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_greater_equal(T1: Htuple, T2: Htuple, Greatereq: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_greater_equal(T1: Hlong, T2: Hlong, Greatereq: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_greater(T1: Htuple, T2: Htuple, Greater: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_greater(T1: Hlong, T2: Hlong, Greater: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_not_equal(T1: Htuple, T2: Htuple, Nequal: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_not_equal(T1: Hlong, T2: Hlong, Nequal: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_equal(T1: Htuple, T2: Htuple, Equal: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_equal(T1: Hlong, T2: Hlong, Equal: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_not(T: Htuple, Not: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_not(T: Hlong, Not: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_xor(T1: Htuple, T2: Htuple, Xor: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_xor(T1: Hlong, T2: Hlong, Xor: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_or(T1: Htuple, T2: Htuple, Or: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_or(T1: Hlong, T2: Hlong, Or: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_and(T1: Htuple, T2: Htuple, And: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_and(T1: Hlong, T2: Hlong, And: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_bnot(T: Htuple, BNot: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_bnot(T: Hlong, BNot: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_bxor(T1: Htuple, T2: Htuple, BXor: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_bxor(T1: Hlong, T2: Hlong, BXor: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_bor(T1: Htuple, T2: Htuple, BOr: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_bor(T1: Hlong, T2: Hlong, BOr: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_band(T1: Htuple, T2: Htuple, BAnd: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_band(T1: Hlong, T2: Hlong, BAnd: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_rsh(T: Htuple, Shift: Htuple, Rsh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_rsh(T: Hlong, Shift: Hlong, Rsh: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_lsh(T: Htuple, Shift: Htuple, Lsh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_lsh(T: Hlong, Shift: Hlong, Lsh: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_chrt(T: Htuple, Chrt: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_chrt(T: Hlong, Chrt: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_ords(T: Htuple, Ords: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_ords(T: *const ::std::os::raw::c_char, Ords: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_chr(T: Htuple, Chr: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_chr(T: Hlong, Chr: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_ord(T: Htuple, Ord: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_ord(T: *const ::std::os::raw::c_char, Ord: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_string(T: Htuple, Format: Htuple, String: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_string(
        T: f64,
        Format: *const ::std::os::raw::c_char,
        String: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_number(T: Htuple, IsNumber: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_number(T: f64, IsNumber: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_number(T: Htuple, Number: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_number(T: *const ::std::os::raw::c_char, Number: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_round(T: Htuple, Round: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_round(T: f64, Round: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_int(T: Htuple, Int: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_int(T: f64, Int: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_real(T: Htuple, Real: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_real(T: f64, Real: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_ldexp(T1: Htuple, T2: Htuple, Ldexp: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_ldexp(T1: f64, T2: f64, Ldexp: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_fmod(T1: Htuple, T2: Htuple, Fmod: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_fmod(T1: f64, T2: f64, Fmod: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_mod(T1: Htuple, T2: Htuple, Mod: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_mod(T1: Hlong, T2: Hlong, Mod: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_ceil(T: Htuple, Ceil: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_ceil(T: f64, Ceil: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_floor(T: Htuple, Floor: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_floor(T: f64, Floor: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_pow(T1: Htuple, T2: Htuple, Pow: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_pow(T1: f64, T2: f64, Pow: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_log10(T: Htuple, Log: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_log10(T: f64, Log: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_log(T: Htuple, Log: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_log(T: f64, Log: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_exp(T: Htuple, Exp: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_exp(T: f64, Exp: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_tanh(T: Htuple, Tanh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_tanh(T: f64, Tanh: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_cosh(T: Htuple, Cosh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_cosh(T: f64, Cosh: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sinh(T: Htuple, Sinh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sinh(T: f64, Sinh: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_rad(Deg: Htuple, Rad: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_rad(Deg: f64, Rad: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_deg(Rad: Htuple, Deg: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_deg(Rad: f64, Deg: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_atan2(Y: Htuple, X: Htuple, ATan: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_atan2(Y: f64, X: f64, ATan: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_atan(T: Htuple, ATan: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_atan(T: f64, ATan: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_acos(T: Htuple, ACos: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_acos(T: f64, ACos: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_asin(T: Htuple, ASin: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_asin(T: f64, ASin: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_tan(T: Htuple, Tan: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_tan(T: f64, Tan: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_cos(T: Htuple, Cos: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_cos(T: f64, Cos: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sin(T: Htuple, Sin: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sin(T: f64, Sin: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_fabs(T: Htuple, Abs: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_fabs(T: f64, Abs: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sqrt(T: Htuple, Sqrt: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sqrt(T: f64, Sqrt: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_abs(T: Htuple, Abs: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_abs(T: f64, Abs: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_neg(T: Htuple, Neg: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_neg(T: f64, Neg: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_div(Q1: Htuple, Q2: Htuple, Quot: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_div(Q1: f64, Q2: f64, Quot: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_mult(P1: Htuple, P2: Htuple, Prod: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_mult(P1: f64, P2: f64, Prod: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sub(D1: Htuple, D2: Htuple, Diff: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sub(D1: f64, D2: f64, Diff: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_add(S1: Htuple, S2: Htuple, Sum: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_add(S1: f64, S2: f64, Sum: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_tuple(SerializedItemHandle: Htuple, Tuple: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_tuple(SerializedItemHandle: Hlong, Tuple: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_tuple(Tuple: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_tuple(Tuple: f64, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_tuple(Tuple: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_tuple(Tuple: f64, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_tuple(FileName: Htuple, Tuple: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_tuple(FileName: *const ::std::os::raw::c_char, Tuple: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_pose_average(
        Poses: Htuple,
        Weights: Htuple,
        Mode: Htuple,
        SigmaT: Htuple,
        SigmaR: Htuple,
        AveragePose: *mut Htuple,
        Quality: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_quat_rotate_point_3d(
        Quaternion: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
        Qz: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_quat_conjugate(Quaternion: Htuple, ConjugatedQuaternion: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_quat_normalize(Quaternion: Htuple, NormalizedQuaternion: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_axis_angle_to_quat(
        AxisX: Htuple,
        AxisY: Htuple,
        AxisZ: Htuple,
        Angle: Htuple,
        Quaternion: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_quat_to_pose(Quaternion: Htuple, Pose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_pose_invert(Pose: Htuple, PoseInvert: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_pose_compose(PoseLeft: Htuple, PoseRight: Htuple, PoseCompose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_quat_to_hom_mat3d(Quaternion: Htuple, RotationMatrix: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_pose_to_quat(Pose: Htuple, Quaternion: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_quat_interpolate(
        QuaternionStart: Htuple,
        QuaternionEnd: Htuple,
        InterpPos: Htuple,
        QuaternionInterpolated: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_quat_compose(
        QuaternionLeft: Htuple,
        QuaternionRight: Htuple,
        QuaternionComposed: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_hom_mat3d(SerializedItemHandle: Htuple, HomMat3D: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_hom_mat3d(HomMat3D: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_hom_mat2d(SerializedItemHandle: Htuple, HomMat2D: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_hom_mat2d(HomMat2D: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_quat(SerializedItemHandle: Htuple, Quaternion: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_quat(Quaternion: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_hom_point_3d(
        HomMat3D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Pw: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
        Qz: *mut Htuple,
        Qw: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_point_3d(
        HomMat3D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
        Qz: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_point_3d(
        HomMat3D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
        Qz: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_hom_mat3d(
        TransformationType: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        Qz: Htuple,
        HomMat3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_determinant(HomMat3D: Htuple, Determinant: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_transpose(HomMat3D: Htuple, HomMat3DTranspose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_invert(HomMat3D: Htuple, HomMat3DInvert: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_compose(
        HomMat3DLeft: Htuple,
        HomMat3DRight: Htuple,
        HomMat3DCompose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_rotate_local(
        HomMat3D: Htuple,
        Phi: Htuple,
        Axis: Htuple,
        HomMat3DRotate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_rotate(
        HomMat3D: Htuple,
        Phi: Htuple,
        Axis: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        HomMat3DRotate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_scale_local(
        HomMat3D: Htuple,
        Sx: Htuple,
        Sy: Htuple,
        Sz: Htuple,
        HomMat3DScale: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_scale(
        HomMat3D: Htuple,
        Sx: Htuple,
        Sy: Htuple,
        Sz: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        HomMat3DScale: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_translate_local(
        HomMat3D: Htuple,
        Tx: Htuple,
        Ty: Htuple,
        Tz: Htuple,
        HomMat3DTranslate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_translate(
        HomMat3D: Htuple,
        Tx: Htuple,
        Ty: Htuple,
        Tz: Htuple,
        HomMat3DTranslate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_identity(HomMat3DIdentity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_project(
        HomMat3D: Htuple,
        PrincipalPointRow: Htuple,
        PrincipalPointCol: Htuple,
        Focus: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_bundle_adjust_mosaic(
        NumImages: Htuple,
        ReferenceImage: Htuple,
        MappingSource: Htuple,
        MappingDest: Htuple,
        HomMatrices2D: Htuple,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        NumCorrespondences: Htuple,
        Transformation: Htuple,
        MosaicMatrices2D: *mut Htuple,
        Rows: *mut Htuple,
        Cols: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_proj_match_points_distortion_ransac_guided(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        HomMat2DGuide: Htuple,
        KappaGuide: Htuple,
        DistanceTolerance: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        HomMat2D: *mut Htuple,
        Kappa: *mut Htuple,
        Error: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_proj_match_points_distortion_ransac(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        RowMove: Htuple,
        ColMove: Htuple,
        RowTolerance: Htuple,
        ColTolerance: Htuple,
        Rotation: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        HomMat2D: *mut Htuple,
        Kappa: *mut Htuple,
        Error: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_proj_match_points_ransac_guided(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        HomMat2DGuide: Htuple,
        DistanceTolerance: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        HomMat2D: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_proj_match_points_ransac(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        RowMove: Htuple,
        ColMove: Htuple,
        RowTolerance: Htuple,
        ColTolerance: Htuple,
        Rotation: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        HomMat2D: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_proj_hom_mat2d_distortion(
        Points1Row: Htuple,
        Points1Col: Htuple,
        Points2Row: Htuple,
        Points2Col: Htuple,
        CovRR1: Htuple,
        CovRC1: Htuple,
        CovCC1: Htuple,
        CovRR2: Htuple,
        CovRC2: Htuple,
        CovCC2: Htuple,
        ImageWidth: Htuple,
        ImageHeight: Htuple,
        Method: Htuple,
        HomMat2D: *mut Htuple,
        Kappa: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_vector_to_proj_hom_mat2d(
        Px: Htuple,
        Py: Htuple,
        Pw: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        Qw: Htuple,
        Method: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_proj_hom_mat2d(
        Px: Htuple,
        Py: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        Method: Htuple,
        CovXX1: Htuple,
        CovYY1: Htuple,
        CovXY1: Htuple,
        CovXX2: Htuple,
        CovYY2: Htuple,
        CovXY2: Htuple,
        HomMat2D: *mut Htuple,
        Covariance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_to_affine_par(
        HomMat2D: Htuple,
        Sx: *mut Htuple,
        Sy: *mut Htuple,
        Phi: *mut Htuple,
        Theta: *mut Htuple,
        Tx: *mut Htuple,
        Ty: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_angle_to_rigid(
        Row1: Htuple,
        Column1: Htuple,
        Angle1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        Angle2: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_point_line_to_hom_mat2d(
        TransformationType: Htuple,
        Px: Htuple,
        Py: Htuple,
        L1x: Htuple,
        L1y: Htuple,
        L2x: Htuple,
        L2y: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_rigid(
        Px: Htuple,
        Py: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_similarity(
        Px: Htuple,
        Py: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_aniso(
        Px: Htuple,
        Py: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_hom_mat2d(
        Px: Htuple,
        Py: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        HomMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_pixel(
        HomMat2D: Htuple,
        Row: Htuple,
        Col: Htuple,
        RowTrans: *mut Htuple,
        ColTrans: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_point_2d(
        HomMat2D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pw: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
        Qw: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_pixel(
        HomMat2D: Htuple,
        Row: Htuple,
        Col: Htuple,
        RowTrans: *mut Htuple,
        ColTrans: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_point_2d(
        HomMat2D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_determinant(HomMat2D: Htuple, Determinant: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_transpose(HomMat2D: Htuple, HomMat2DTranspose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_invert(HomMat2D: Htuple, HomMat2DInvert: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_compose(
        HomMat2DLeft: Htuple,
        HomMat2DRight: Htuple,
        HomMat2DCompose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_reflect_local(
        HomMat2D: Htuple,
        Px: Htuple,
        Py: Htuple,
        HomMat2DReflect: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_reflect(
        HomMat2D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Qx: Htuple,
        Qy: Htuple,
        HomMat2DReflect: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_slant_local(
        HomMat2D: Htuple,
        Theta: Htuple,
        Axis: Htuple,
        HomMat2DSlant: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_slant(
        HomMat2D: Htuple,
        Theta: Htuple,
        Axis: Htuple,
        Px: Htuple,
        Py: Htuple,
        HomMat2DSlant: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_rotate_local(
        HomMat2D: Htuple,
        Phi: Htuple,
        HomMat2DRotate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_rotate(
        HomMat2D: Htuple,
        Phi: Htuple,
        Px: Htuple,
        Py: Htuple,
        HomMat2DRotate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_scale_local(
        HomMat2D: Htuple,
        Sx: Htuple,
        Sy: Htuple,
        HomMat2DScale: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_scale(
        HomMat2D: Htuple,
        Sx: Htuple,
        Sy: Htuple,
        Px: Htuple,
        Py: Htuple,
        HomMat2DScale: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_translate_local(
        HomMat2D: Htuple,
        Tx: Htuple,
        Ty: Htuple,
        HomMat2DTranslate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_translate(
        HomMat2D: Htuple,
        Tx: Htuple,
        Ty: Htuple,
        HomMat2DTranslate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat2d_identity(HomMat2DIdentity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_scattered_data_interpolators() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_scattered_data_interpolators() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_scattered_data_interpolator(ScatteredDataInterpolatorHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_scattered_data_interpolator(ScatteredDataInterpolatorHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_interpolate_scattered_data(
        ScatteredDataInterpolatorHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        ValueInterpolated: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn interpolate_scattered_data(
        ScatteredDataInterpolatorHandle: Hlong,
        Row: f64,
        Column: f64,
        ValueInterpolated: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_scattered_data_interpolator(
        Method: Htuple,
        Rows: Htuple,
        Columns: Htuple,
        Values: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ScatteredDataInterpolatorHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_interpolate_scattered_data_points_to_image(
        ImageInterpolated: *mut Hobject,
        Method: Htuple,
        Rows: Htuple,
        Columns: Htuple,
        Values: Htuple,
        Width: Htuple,
        Height: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_interpolate_scattered_data_image(
        Image: Hobject,
        RegionInterpolate: Hobject,
        ImageInterpolated: *mut Hobject,
        Method: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_system_time(
        MSecond: *mut Htuple,
        Second: *mut Htuple,
        Minute: *mut Htuple,
        Hour: *mut Htuple,
        Day: *mut Htuple,
        YDay: *mut Htuple,
        Month: *mut Htuple,
        Year: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_system_time(
        MSecond: *mut Hlong,
        Second: *mut Hlong,
        Minute: *mut Hlong,
        Hour: *mut Hlong,
        Day: *mut Hlong,
        YDay: *mut Hlong,
        Month: *mut Hlong,
        Year: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_compute_device_param(
        DeviceHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_compute_device_param(
        DeviceHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_compute_device_param(
        DeviceHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_compute_device_param(
        DeviceHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_release_all_compute_devices() -> Herror;
}
unsafe extern "C" {
    pub fn release_all_compute_devices() -> Herror;
}
unsafe extern "C" {
    pub fn T_release_compute_device(DeviceHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn release_compute_device(DeviceHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deactivate_all_compute_devices() -> Herror;
}
unsafe extern "C" {
    pub fn deactivate_all_compute_devices() -> Herror;
}
unsafe extern "C" {
    pub fn T_deactivate_compute_device(DeviceHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deactivate_compute_device(DeviceHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_activate_compute_device(DeviceHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn activate_compute_device(DeviceHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_init_compute_device(DeviceHandle: Htuple, Operators: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_compute_device(DeviceIdentifier: Htuple, DeviceHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn open_compute_device(DeviceIdentifier: Hlong, DeviceHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_compute_device_info(
        DeviceIdentifier: Htuple,
        InfoName: Htuple,
        Info: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_compute_device_info(
        DeviceIdentifier: Hlong,
        InfoName: *const ::std::os::raw::c_char,
        Info: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_available_compute_devices(DeviceIdentifier: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_serial(SerialHandle: Htuple, Channel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_serial(SerialHandle: Hlong, Channel: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_serial(SerialHandle: Htuple, Data: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_serial(SerialHandle: Hlong, Data: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_serial(SerialHandle: Htuple, NumCharacters: Htuple, Data: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_serial(SerialHandle: Hlong, NumCharacters: Hlong, Data: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_serial_param(
        SerialHandle: Htuple,
        BaudRate: *mut Htuple,
        DataBits: *mut Htuple,
        FlowControl: *mut Htuple,
        Parity: *mut Htuple,
        StopBits: *mut Htuple,
        TotalTimeOut: *mut Htuple,
        InterCharTimeOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_serial_param(
        SerialHandle: Hlong,
        BaudRate: *mut Hlong,
        DataBits: *mut Hlong,
        FlowControl: *mut ::std::os::raw::c_char,
        Parity: *mut ::std::os::raw::c_char,
        StopBits: *mut Hlong,
        TotalTimeOut: *mut Hlong,
        InterCharTimeOut: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_serial_param(
        SerialHandle: Htuple,
        BaudRate: Htuple,
        DataBits: Htuple,
        FlowControl: Htuple,
        Parity: Htuple,
        StopBits: Htuple,
        TotalTimeOut: Htuple,
        InterCharTimeOut: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_serial_param(
        SerialHandle: Hlong,
        BaudRate: Hlong,
        DataBits: Hlong,
        FlowControl: *const ::std::os::raw::c_char,
        Parity: *const ::std::os::raw::c_char,
        StopBits: Hlong,
        TotalTimeOut: Hlong,
        InterCharTimeOut: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_serials() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_serials() -> Herror;
}
unsafe extern "C" {
    pub fn T_close_serial(SerialHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_serial(SerialHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_serial(PortName: Htuple, SerialHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn open_serial(PortName: *const ::std::os::raw::c_char, SerialHandle: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_wait_seconds(Seconds: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn wait_seconds(Seconds: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_system_call(Command: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn system_call(Command: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_system(SystemParameter: Htuple, Value: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_system(
        SystemParameter: *const ::std::os::raw::c_char,
        Value: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_check(Check: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_check(Check: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_reset_obj_db(
        DefaultImageWidth: Htuple,
        DefaultImageHeight: Htuple,
        DefaultChannels: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn reset_obj_db(
        DefaultImageWidth: Hlong,
        DefaultImageHeight: Hlong,
        DefaultChannels: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_system(Query: Htuple, Information: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_system(Query: *const ::std::os::raw::c_char, Information: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_check(Check: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_error_text(ErrorCode: Htuple, ErrorMessage: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_error_text(ErrorCode: Hlong, ErrorMessage: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_count_seconds(Seconds: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn count_seconds(Seconds: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_count_relation(RelationName: Htuple, NumOfTuples: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn count_relation(
        RelationName: *const ::std::os::raw::c_char,
        NumOfTuples: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_receive_image(Image: *mut Hobject, Socket: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn receive_image(Image: *mut Hobject, Socket: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_image(Image: Hobject, Socket: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_image(Image: Hobject, Socket: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_receive_region(Region: *mut Hobject, Socket: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn receive_region(Region: *mut Hobject, Socket: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_region(Region: Hobject, Socket: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_region(Region: Hobject, Socket: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_receive_xld(XLD: *mut Hobject, Socket: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn receive_xld(XLD: *mut Hobject, Socket: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_xld(XLD: Hobject, Socket: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_xld(XLD: Hobject, Socket: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_receive_tuple(Socket: Htuple, Tuple: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn receive_tuple(Socket: Hlong, Tuple: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_tuple(Socket: Htuple, Tuple: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_tuple(Socket: Hlong, Tuple: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_receive_data(
        Socket: Htuple,
        Format: Htuple,
        Data: *mut Htuple,
        From: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn receive_data(
        Socket: Hlong,
        Format: *const ::std::os::raw::c_char,
        Data: *mut ::std::os::raw::c_char,
        From: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_data(Socket: Htuple, Format: Htuple, Data: Htuple, To: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_data(
        Socket: Hlong,
        Format: *const ::std::os::raw::c_char,
        Data: *const ::std::os::raw::c_char,
        To: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_socket_param(
        Socket: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_socket_param(
        Socket: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_socket_param(
        Socket: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_socket_param(
        Socket: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_next_socket_data_type(Socket: Htuple, DataType: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_next_socket_data_type(
        Socket: Hlong,
        DataType: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_socket_descriptor(Socket: Htuple, SocketDescriptor: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_socket_descriptor(Socket: Hlong, SocketDescriptor: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_sockets() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_sockets() -> Herror;
}
unsafe extern "C" {
    pub fn T_close_socket(Socket: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_socket(Socket: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_socket_accept_connect(
        AcceptingSocket: Htuple,
        Wait: Htuple,
        Socket: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn socket_accept_connect(
        AcceptingSocket: Hlong,
        Wait: *const ::std::os::raw::c_char,
        Socket: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_socket_connect(
        HostName: Htuple,
        Port: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Socket: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn open_socket_connect(
        HostName: *const ::std::os::raw::c_char,
        Port: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        Socket: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_socket_accept(
        Port: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        AcceptingSocket: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn open_socket_accept(
        Port: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        AcceptingSocket: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_extended_error_info(
        OperatorName: *mut Htuple,
        ErrorCode: *mut Htuple,
        ErrorMessage: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_extended_error_info(
        OperatorName: *mut ::std::os::raw::c_char,
        ErrorCode: *mut Hlong,
        ErrorMessage: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_modules(UsedModules: *mut Htuple, ModuleKey: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_binocular_distance_ms(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Distance: *mut Hobject,
        Score: *mut Hobject,
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
        MinDisparity: Htuple,
        MaxDisparity: Htuple,
        SurfaceSmoothing: Htuple,
        EdgeSmoothing: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binocular_disparity_ms(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Disparity: *mut Hobject,
        Score: *mut Hobject,
        MinDisparity: Htuple,
        MaxDisparity: Htuple,
        SurfaceSmoothing: Htuple,
        EdgeSmoothing: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn binocular_disparity_ms(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Disparity: *mut Hobject,
        Score: *mut Hobject,
        MinDisparity: Hlong,
        MaxDisparity: Hlong,
        SurfaceSmoothing: Hlong,
        EdgeSmoothing: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binocular_distance_mg(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Distance: *mut Hobject,
        Score: *mut Hobject,
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
        GrayConstancy: Htuple,
        GradientConstancy: Htuple,
        Smoothness: Htuple,
        InitialGuess: Htuple,
        CalculateScore: Htuple,
        MGParamName: Htuple,
        MGParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binocular_disparity_mg(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Disparity: *mut Hobject,
        Score: *mut Hobject,
        GrayConstancy: Htuple,
        GradientConstancy: Htuple,
        Smoothness: Htuple,
        InitialGuess: Htuple,
        CalculateScore: Htuple,
        MGParamName: Htuple,
        MGParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn binocular_disparity_mg(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Disparity: *mut Hobject,
        Score: *mut Hobject,
        GrayConstancy: f64,
        GradientConstancy: f64,
        Smoothness: f64,
        InitialGuess: f64,
        CalculateScore: *const ::std::os::raw::c_char,
        MGParamName: *const ::std::os::raw::c_char,
        MGParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reconst3d_from_fundamental_matrix(
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        CovRR1: Htuple,
        CovRC1: Htuple,
        CovCC1: Htuple,
        CovRR2: Htuple,
        CovRC2: Htuple,
        CovCC2: Htuple,
        FMatrix: Htuple,
        CovFMat: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        W: *mut Htuple,
        CovXYZW: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_binocular_proj_rectification(
        Map1: *mut Hobject,
        Map2: *mut Hobject,
        FMatrix: Htuple,
        CovFMat: Htuple,
        Width1: Htuple,
        Height1: Htuple,
        Width2: Htuple,
        Height2: Htuple,
        SubSampling: Htuple,
        Mapping: Htuple,
        CovFMatRect: *mut Htuple,
        H1: *mut Htuple,
        H2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_fundamental_matrix_distortion(
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        CovRR1: Htuple,
        CovRC1: Htuple,
        CovCC1: Htuple,
        CovRR2: Htuple,
        CovRC2: Htuple,
        CovCC2: Htuple,
        ImageWidth: Htuple,
        ImageHeight: Htuple,
        Method: Htuple,
        FMatrix: *mut Htuple,
        Kappa: *mut Htuple,
        Error: *mut Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        W: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rel_pose_to_fundamental_matrix(
        RelPose: Htuple,
        CovRelPose: Htuple,
        CamPar1: Htuple,
        CamPar2: Htuple,
        FMatrix: *mut Htuple,
        CovFMat: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_essential_to_fundamental_matrix(
        EMatrix: Htuple,
        CovEMat: Htuple,
        CamMat1: Htuple,
        CamMat2: Htuple,
        FMatrix: *mut Htuple,
        CovFMat: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_rel_pose(
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        CovRR1: Htuple,
        CovRC1: Htuple,
        CovCC1: Htuple,
        CovRR2: Htuple,
        CovRC2: Htuple,
        CovCC2: Htuple,
        CamPar1: Htuple,
        CamPar2: Htuple,
        Method: Htuple,
        RelPose: *mut Htuple,
        CovRelPose: *mut Htuple,
        Error: *mut Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        CovXYZ: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_essential_matrix(
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        CovRR1: Htuple,
        CovRC1: Htuple,
        CovCC1: Htuple,
        CovRR2: Htuple,
        CovRC2: Htuple,
        CovCC2: Htuple,
        CamMat1: Htuple,
        CamMat2: Htuple,
        Method: Htuple,
        EMatrix: *mut Htuple,
        CovEMat: *mut Htuple,
        Error: *mut Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        CovXYZ: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_fundamental_matrix(
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        CovRR1: Htuple,
        CovRC1: Htuple,
        CovCC1: Htuple,
        CovRR2: Htuple,
        CovRC2: Htuple,
        CovCC2: Htuple,
        Method: Htuple,
        FMatrix: *mut Htuple,
        CovFMat: *mut Htuple,
        Error: *mut Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        W: *mut Htuple,
        CovXYZW: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_match_fundamental_matrix_distortion_ransac(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        RowMove: Htuple,
        ColMove: Htuple,
        RowTolerance: Htuple,
        ColTolerance: Htuple,
        Rotation: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        FMatrix: *mut Htuple,
        Kappa: *mut Htuple,
        Error: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_match_rel_pose_ransac(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        CamPar1: Htuple,
        CamPar2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        RowMove: Htuple,
        ColMove: Htuple,
        RowTolerance: Htuple,
        ColTolerance: Htuple,
        Rotation: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        RelPose: *mut Htuple,
        CovRelPose: *mut Htuple,
        Error: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_match_essential_matrix_ransac(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        CamMat1: Htuple,
        CamMat2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        RowMove: Htuple,
        ColMove: Htuple,
        RowTolerance: Htuple,
        ColTolerance: Htuple,
        Rotation: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        EMatrix: *mut Htuple,
        CovEMat: *mut Htuple,
        Error: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_match_fundamental_matrix_ransac(
        Image1: Hobject,
        Image2: Hobject,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        GrayMatchMethod: Htuple,
        MaskSize: Htuple,
        RowMove: Htuple,
        ColMove: Htuple,
        RowTolerance: Htuple,
        ColTolerance: Htuple,
        Rotation: Htuple,
        MatchThreshold: Htuple,
        EstimationMethod: Htuple,
        DistanceThreshold: Htuple,
        RandSeed: Htuple,
        FMatrix: *mut Htuple,
        CovFMat: *mut Htuple,
        Error: *mut Htuple,
        Points1: *mut Htuple,
        Points2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binocular_distance(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Distance: *mut Hobject,
        Score: *mut Hobject,
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
        Method: Htuple,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        TextureThresh: Htuple,
        MinDisparity: Htuple,
        MaxDisparity: Htuple,
        NumLevels: Htuple,
        ScoreThresh: Htuple,
        Filter: Htuple,
        SubDistance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binocular_disparity(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Disparity: *mut Hobject,
        Score: *mut Hobject,
        Method: Htuple,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        TextureThresh: Htuple,
        MinDisparity: Htuple,
        MaxDisparity: Htuple,
        NumLevels: Htuple,
        ScoreThresh: Htuple,
        Filter: Htuple,
        SubDisparity: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn binocular_disparity(
        ImageRect1: Hobject,
        ImageRect2: Hobject,
        Disparity: *mut Hobject,
        Score: *mut Hobject,
        Method: *const ::std::os::raw::c_char,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        TextureThresh: f64,
        MinDisparity: Hlong,
        MaxDisparity: Hlong,
        NumLevels: Hlong,
        ScoreThresh: f64,
        Filter: *const ::std::os::raw::c_char,
        SubDisparity: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersect_lines_of_sight(
        CamParam1: Htuple,
        CamParam2: Htuple,
        RelPose: Htuple,
        Row1: Htuple,
        Col1: Htuple,
        Row2: Htuple,
        Col2: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        Dist: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disparity_image_to_xyz(
        Disparity: Hobject,
        X: *mut Hobject,
        Y: *mut Hobject,
        Z: *mut Hobject,
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disparity_to_point_3d(
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
        Row1: Htuple,
        Col1: Htuple,
        Disparity: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disparity_to_distance(
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
        Disparity: Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_to_disparity(
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
        Distance: Htuple,
        Disparity: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_binocular_rectification_map(
        Map1: *mut Hobject,
        Map2: *mut Hobject,
        CamParam1: Htuple,
        CamParam2: Htuple,
        RelPose: Htuple,
        SubSampling: Htuple,
        Method: Htuple,
        MapType: Htuple,
        CamParamRect1: *mut Htuple,
        CamParamRect2: *mut Htuple,
        CamPoseRect1: *mut Htuple,
        CamPoseRect2: *mut Htuple,
        RelPoseRect: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binocular_calibration(
        NX: Htuple,
        NY: Htuple,
        NZ: Htuple,
        NRow1: Htuple,
        NCol1: Htuple,
        NRow2: Htuple,
        NCol2: Htuple,
        StartCamParam1: Htuple,
        StartCamParam2: Htuple,
        NStartPose1: Htuple,
        NStartPose2: Htuple,
        EstimateParams: Htuple,
        CamParam1: *mut Htuple,
        CamParam2: *mut Htuple,
        NFinalPose1: *mut Htuple,
        NFinalPose2: *mut Htuple,
        RelPose: *mut Htuple,
        Errors: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_spy(Classes: *mut Htuple, Values: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_spy(Class: Htuple, Value: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_spy(
        Class: *const ::std::os::raw::c_char,
        Value: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_spy(Class: Htuple, Value: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_spy(
        Class: *const ::std::os::raw::c_char,
        Value: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_sheet_of_light_model(
        FileName: Htuple,
        SheetOfLightModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_sheet_of_light_model(
        FileName: *const ::std::os::raw::c_char,
        SheetOfLightModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_sheet_of_light_model(SheetOfLightModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_sheet_of_light_model(
        SheetOfLightModelID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_sheet_of_light_model(
        SerializedItemHandle: Htuple,
        SheetOfLightModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_sheet_of_light_model(
        SerializedItemHandle: Hlong,
        SheetOfLightModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_sheet_of_light_model(
        SheetOfLightModelID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_sheet_of_light_model(
        SheetOfLightModelID: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_sheet_of_light_calib_object(
        Width: Htuple,
        Length: Htuple,
        HeightMin: Htuple,
        HeightMax: Htuple,
        FileName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_sheet_of_light_calib_object(
        Width: f64,
        Length: f64,
        HeightMin: f64,
        HeightMax: f64,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_calibrate_sheet_of_light(SheetOfLightModelID: Htuple, Error: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn calibrate_sheet_of_light(SheetOfLightModelID: Hlong, Error: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sheet_of_light_result_object_model_3d(
        SheetOfLightModelID: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_sheet_of_light_result_object_model_3d(
        SheetOfLightModelID: Hlong,
        ObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sheet_of_light_result(
        ResultValue: *mut Hobject,
        SheetOfLightModelID: Htuple,
        ResultName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_sheet_of_light_result(
        ResultValue: *mut Hobject,
        SheetOfLightModelID: Hlong,
        ResultName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_sheet_of_light_calibration(
        Disparity: Hobject,
        SheetOfLightModelID: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn apply_sheet_of_light_calibration(
        Disparity: Hobject,
        SheetOfLightModelID: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_profile_sheet_of_light(
        ProfileDisparityImage: Hobject,
        SheetOfLightModelID: Htuple,
        MovementPoses: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_measure_profile_sheet_of_light(
        ProfileImage: Hobject,
        SheetOfLightModelID: Htuple,
        MovementPose: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_sheet_of_light_param(
        SheetOfLightModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_sheet_of_light_param(
        SheetOfLightModelID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sheet_of_light_param(
        SheetOfLightModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_sheet_of_light_param(
        SheetOfLightModelID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_sheet_of_light_params(
        SheetOfLightModelID: Htuple,
        QueryName: Htuple,
        GenParamName: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reset_sheet_of_light_model(SheetOfLightModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn reset_sheet_of_light_model(SheetOfLightModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_sheet_of_light_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_sheet_of_light_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_sheet_of_light_model(SheetOfLightModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_sheet_of_light_model(SheetOfLightModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_sheet_of_light_model(
        ProfileRegion: Hobject,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        SheetOfLightModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_sheet_of_light_model(
        ProfileRegion: Hobject,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: Hlong,
        SheetOfLightModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_shade_height_field(
        ImageHeight: Hobject,
        ImageShade: *mut Hobject,
        Slant: Htuple,
        Tilt: Htuple,
        Albedo: Htuple,
        Ambient: Htuple,
        Shadows: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn shade_height_field(
        ImageHeight: Hobject,
        ImageShade: *mut Hobject,
        Slant: f64,
        Tilt: f64,
        Albedo: f64,
        Ambient: f64,
        Shadows: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_estimate_al_am(Image: Hobject, Albedo: *mut Htuple, Ambient: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn estimate_al_am(Image: Hobject, Albedo: *mut f64, Ambient: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_estimate_sl_al_zc(Image: Hobject, Slant: *mut Htuple, Albedo: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn estimate_sl_al_zc(Image: Hobject, Slant: *mut f64, Albedo: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_estimate_sl_al_lr(Image: Hobject, Slant: *mut Htuple, Albedo: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn estimate_sl_al_lr(Image: Hobject, Slant: *mut f64, Albedo: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_estimate_tilt_zc(Image: Hobject, Tilt: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn estimate_tilt_zc(Image: Hobject, Tilt: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_estimate_tilt_lr(Image: Hobject, Tilt: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn estimate_tilt_lr(Image: Hobject, Tilt: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_reconstruct_height_field_from_gradient(
        Gradient: Hobject,
        HeightField: *mut Hobject,
        ReconstructionMethod: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_photometric_stereo(
        Images: Hobject,
        HeightField: *mut Hobject,
        Gradient: *mut Hobject,
        Albedo: *mut Hobject,
        Slants: Htuple,
        Tilts: Htuple,
        ResultType: Htuple,
        ReconstructionMethod: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sfs_pentland(
        Image: Hobject,
        Height: *mut Hobject,
        Slant: Htuple,
        Tilt: Htuple,
        Albedo: Htuple,
        Ambient: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sfs_pentland(
        Image: Hobject,
        Height: *mut Hobject,
        Slant: f64,
        Tilt: f64,
        Albedo: f64,
        Ambient: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sfs_orig_lr(
        Image: Hobject,
        Height: *mut Hobject,
        Slant: Htuple,
        Tilt: Htuple,
        Albedo: Htuple,
        Ambient: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sfs_orig_lr(
        Image: Hobject,
        Height: *mut Hobject,
        Slant: f64,
        Tilt: f64,
        Albedo: f64,
        Ambient: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sfs_mod_lr(
        Image: Hobject,
        Height: *mut Hobject,
        Slant: Htuple,
        Tilt: Htuple,
        Albedo: Htuple,
        Ambient: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sfs_mod_lr(
        Image: Hobject,
        Height: *mut Hobject,
        Slant: f64,
        Tilt: f64,
        Albedo: f64,
        Ambient: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_receive_serialized_item(Socket: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn receive_serialized_item(Socket: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_serialized_item(Socket: Htuple, SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_serialized_item(Socket: Hlong, SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_fwrite_serialized_item(FileHandle: Htuple, SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn fwrite_serialized_item(FileHandle: Hlong, SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_fread_serialized_item(FileHandle: Htuple, SerializedItemHandle: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn fread_serialized_item(FileHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_serialized_items() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_serialized_items() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_serialized_item(SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_serialized_item(SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_serialized_item_ptr(
        SerializedItemHandle: Htuple,
        Pointer: *mut Htuple,
        Size: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_serialized_item_ptr(
        SerializedItemHandle: Hlong,
        Pointer: *mut Hlong,
        Size: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_serialized_item_ptr(
        Pointer: Htuple,
        Size: Htuple,
        Copy: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_serialized_item_ptr(
        Pointer: Hlong,
        Size: Hlong,
        Copy: *const ::std::os::raw::c_char,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_primitives_object_model_3d(
        ObjectModel3D: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectModel3DOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_segment_object_model_3d(
        ObjectModel3D: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectModel3DOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_text_results() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_text_results() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_text_result(TextResultID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_text_result(TextResultID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_text_object(
        Characters: *mut Hobject,
        TextResultID: Htuple,
        ResultName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_text_object(
        Characters: *mut Hobject,
        TextResultID: Hlong,
        ResultName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_text_result(
        TextResultID: Htuple,
        ResultName: Htuple,
        ResultValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_text_result(
        TextResultID: Hlong,
        ResultName: *const ::std::os::raw::c_char,
        ResultValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_text(Image: Hobject, TextModel: Htuple, TextResultID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn find_text(Image: Hobject, TextModel: Hlong, TextResultID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_text_model_param(
        TextModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_text_model_param(
        TextModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_text_model_param(
        TextModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_text_model_param(
        TextModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_text_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_text_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_text_model(TextModel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_text_model(TextModel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_text_model_reader(
        Mode: Htuple,
        OCRClassifier: Htuple,
        TextModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_text_model_reader(
        Mode: *const ::std::os::raw::c_char,
        OCRClassifier: *const ::std::os::raw::c_char,
        TextModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_text_model(TextModel: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_text_model(TextModel: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_characters(
        Region: Hobject,
        RegionCharacters: *mut Hobject,
        DotPrint: Htuple,
        StrokeWidth: Htuple,
        CharWidth: Htuple,
        CharHeight: Htuple,
        Punctuation: Htuple,
        DiacriticMarks: Htuple,
        PartitionMethod: Htuple,
        PartitionLines: Htuple,
        FragmentDistance: Htuple,
        ConnectFragments: Htuple,
        ClutterSizeMax: Htuple,
        StopAfter: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_segment_characters(
        Region: Hobject,
        Image: Hobject,
        ImageForeground: *mut Hobject,
        RegionForeground: *mut Hobject,
        Method: Htuple,
        EliminateLines: Htuple,
        DotPrint: Htuple,
        StrokeWidth: Htuple,
        CharWidth: Htuple,
        CharHeight: Htuple,
        ThresholdOffset: Htuple,
        Contrast: Htuple,
        UsedThreshold: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_text_line_slant(
        Region: Hobject,
        Image: Hobject,
        CharHeight: Htuple,
        SlantFrom: Htuple,
        SlantTo: Htuple,
        SlantAngle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn text_line_slant(
        Region: Hobject,
        Image: Hobject,
        CharHeight: Hlong,
        SlantFrom: f64,
        SlantTo: f64,
        SlantAngle: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_text_line_orientation(
        Region: Hobject,
        Image: Hobject,
        CharHeight: Htuple,
        OrientationFrom: Htuple,
        OrientationTo: Htuple,
        OrientationAngle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn text_line_orientation(
        Region: Hobject,
        Image: Hobject,
        CharHeight: Hlong,
        OrientationFrom: f64,
        OrientationTo: f64,
        OrientationAngle: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_image_class_lut(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        ClassLUTHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn classify_image_class_lut(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        ClassLUTHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_image_class_knn(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        DistanceImage: *mut Hobject,
        KNNHandle: Htuple,
        RejectionThreshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn classify_image_class_knn(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        DistanceImage: *mut Hobject,
        KNNHandle: Hlong,
        RejectionThreshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_samples_image_class_knn(
        Image: Hobject,
        ClassRegions: Hobject,
        KNNHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_samples_image_class_knn(
        Image: Hobject,
        ClassRegions: Hobject,
        KNNHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_image_class_gmm(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        GMMHandle: Htuple,
        RejectionThreshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn classify_image_class_gmm(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        GMMHandle: Hlong,
        RejectionThreshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_samples_image_class_gmm(
        Image: Hobject,
        ClassRegions: Hobject,
        GMMHandle: Htuple,
        Randomize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_samples_image_class_gmm(
        Image: Hobject,
        ClassRegions: Hobject,
        GMMHandle: Hlong,
        Randomize: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_image_class_svm(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        SVMHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn classify_image_class_svm(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        SVMHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_samples_image_class_svm(
        Image: Hobject,
        ClassRegions: Hobject,
        SVMHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_samples_image_class_svm(
        Image: Hobject,
        ClassRegions: Hobject,
        SVMHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_image_class_mlp(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        MLPHandle: Htuple,
        RejectionThreshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn classify_image_class_mlp(
        Image: Hobject,
        ClassRegions: *mut Hobject,
        MLPHandle: Hlong,
        RejectionThreshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_samples_image_class_mlp(
        Image: Hobject,
        ClassRegions: Hobject,
        MLPHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_samples_image_class_mlp(
        Image: Hobject,
        ClassRegions: Hobject,
        MLPHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_learn_ndim_norm(
        Foreground: Hobject,
        Background: Hobject,
        Image: Hobject,
        Metric: Htuple,
        Distance: Htuple,
        MinNumberPercent: Htuple,
        Radius: *mut Htuple,
        Center: *mut Htuple,
        Quality: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_learn_ndim_box(
        Foreground: Hobject,
        Background: Hobject,
        MultiChannelImage: Hobject,
        ClassifHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn learn_ndim_box(
        Foreground: Hobject,
        Background: Hobject,
        MultiChannelImage: Hobject,
        ClassifHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_class_ndim_box(
        MultiChannelImage: Hobject,
        Regions: *mut Hobject,
        ClassifHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn class_ndim_box(
        MultiChannelImage: Hobject,
        Regions: *mut Hobject,
        ClassifHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_class_ndim_norm(
        MultiChannelImage: Hobject,
        Regions: *mut Hobject,
        Metric: Htuple,
        SingleMultiple: Htuple,
        Radius: Htuple,
        Center: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn class_ndim_norm(
        MultiChannelImage: Hobject,
        Regions: *mut Hobject,
        Metric: *const ::std::os::raw::c_char,
        SingleMultiple: *const ::std::os::raw::c_char,
        Radius: f64,
        Center: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_class_2dim_sup(
        ImageCol: Hobject,
        ImageRow: Hobject,
        FeatureSpace: Hobject,
        RegionClass2Dim: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn class_2dim_sup(
        ImageCol: Hobject,
        ImageRow: Hobject,
        FeatureSpace: Hobject,
        RegionClass2Dim: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_class_2dim_unsup(
        Image1: Hobject,
        Image2: Hobject,
        Classes: *mut Hobject,
        Threshold: Htuple,
        NumClasses: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn class_2dim_unsup(
        Image1: Hobject,
        Image2: Hobject,
        Classes: *mut Hobject,
        Threshold: Hlong,
        NumClasses: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_check_difference(
        Image: Hobject,
        Pattern: Hobject,
        Selected: *mut Hobject,
        Mode: Htuple,
        DiffLowerBound: Htuple,
        DiffUpperBound: Htuple,
        GrayOffset: Htuple,
        AddRow: Htuple,
        AddCol: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn check_difference(
        Image: Hobject,
        Pattern: Hobject,
        Selected: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        DiffLowerBound: Hlong,
        DiffUpperBound: Hlong,
        GrayOffset: Hlong,
        AddRow: Hlong,
        AddCol: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_char_threshold(
        Image: Hobject,
        HistoRegion: Hobject,
        Characters: *mut Hobject,
        Sigma: Htuple,
        Percent: Htuple,
        Threshold: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn char_threshold(
        Image: Hobject,
        HistoRegion: Hobject,
        Characters: *mut Hobject,
        Sigma: f64,
        Percent: f64,
        Threshold: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_label_to_region(LabelImage: Hobject, Regions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn label_to_region(LabelImage: Hobject, Regions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_nonmax_suppression_amp(
        ImgAmp: Hobject,
        ImageResult: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn nonmax_suppression_amp(
        ImgAmp: Hobject,
        ImageResult: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_nonmax_suppression_dir(
        ImgAmp: Hobject,
        ImgDir: Hobject,
        ImageResult: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn nonmax_suppression_dir(
        ImgAmp: Hobject,
        ImgDir: Hobject,
        ImageResult: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hysteresis_threshold(
        Image: Hobject,
        RegionHysteresis: *mut Hobject,
        Low: Htuple,
        High: Htuple,
        MaxLength: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hysteresis_threshold(
        Image: Hobject,
        RegionHysteresis: *mut Hobject,
        Low: Hlong,
        High: Hlong,
        MaxLength: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binary_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        Method: Htuple,
        LightDark: Htuple,
        UsedThreshold: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn binary_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        Method: *const ::std::os::raw::c_char,
        LightDark: *const ::std::os::raw::c_char,
        UsedThreshold: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_local_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        Method: Htuple,
        LightDark: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn local_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        Method: *const ::std::os::raw::c_char,
        LightDark: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_var_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        StdDevScale: Htuple,
        AbsThreshold: Htuple,
        LightDark: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn var_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        StdDevScale: f64,
        AbsThreshold: f64,
        LightDark: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dyn_threshold(
        OrigImage: Hobject,
        ThresholdImage: Hobject,
        RegionDynThresh: *mut Hobject,
        Offset: Htuple,
        LightDark: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dyn_threshold(
        OrigImage: Hobject,
        ThresholdImage: Hobject,
        RegionDynThresh: *mut Hobject,
        Offset: f64,
        LightDark: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        MinGray: Htuple,
        MaxGray: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn threshold(Image: Hobject, Region: *mut Hobject, MinGray: f64, MaxGray: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_threshold_sub_pix(Image: Hobject, Border: *mut Hobject, Threshold: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn threshold_sub_pix(Image: Hobject, Border: *mut Hobject, Threshold: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_regiongrowing_n(
        MultiChannelImage: Hobject,
        Regions: *mut Hobject,
        Metric: Htuple,
        MinTolerance: Htuple,
        MaxTolerance: Htuple,
        MinSize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn regiongrowing_n(
        MultiChannelImage: Hobject,
        Regions: *mut Hobject,
        Metric: *const ::std::os::raw::c_char,
        MinTolerance: f64,
        MaxTolerance: f64,
        MinSize: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_regiongrowing(
        Image: Hobject,
        Regions: *mut Hobject,
        RasterHeight: Htuple,
        RasterWidth: Htuple,
        Tolerance: Htuple,
        MinSize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn regiongrowing(
        Image: Hobject,
        Regions: *mut Hobject,
        RasterHeight: Hlong,
        RasterWidth: Hlong,
        Tolerance: f64,
        MinSize: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_regiongrowing_mean(
        Image: Hobject,
        Regions: *mut Hobject,
        StartRows: Htuple,
        StartColumns: Htuple,
        Tolerance: Htuple,
        MinSize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn regiongrowing_mean(
        Image: Hobject,
        Regions: *mut Hobject,
        StartRows: Hlong,
        StartColumns: Hlong,
        Tolerance: f64,
        MinSize: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pouring(
        Image: Hobject,
        Regions: *mut Hobject,
        Mode: Htuple,
        MinGray: Htuple,
        MaxGray: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn pouring(
        Image: Hobject,
        Regions: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        MinGray: Hlong,
        MaxGray: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_watersheds_threshold(
        Image: Hobject,
        Basins: *mut Hobject,
        Threshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn watersheds_threshold(Image: Hobject, Basins: *mut Hobject, Threshold: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_watersheds(Image: Hobject, Basins: *mut Hobject, Watersheds: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn watersheds(Image: Hobject, Basins: *mut Hobject, Watersheds: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_zero_crossing(Image: Hobject, RegionCrossing: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn zero_crossing(Image: Hobject, RegionCrossing: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_zero_crossing_sub_pix(Image: Hobject, ZeroCrossings: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn zero_crossing_sub_pix(Image: Hobject, ZeroCrossings: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_threshold(
        Image: Hobject,
        RegionCrossings: *mut Hobject,
        MinSize: Htuple,
        MinGray: Htuple,
        Threshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dual_threshold(
        Image: Hobject,
        RegionCrossings: *mut Hobject,
        MinSize: Hlong,
        MinGray: f64,
        Threshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_expand_line(
        Image: Hobject,
        RegionExpand: *mut Hobject,
        Coordinate: Htuple,
        ExpandType: Htuple,
        RowColumn: Htuple,
        Threshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn expand_line(
        Image: Hobject,
        RegionExpand: *mut Hobject,
        Coordinate: Hlong,
        ExpandType: *const ::std::os::raw::c_char,
        RowColumn: *const ::std::os::raw::c_char,
        Threshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_local_min(Image: Hobject, LocalMinima: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn local_min(Image: Hobject, LocalMinima: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_lowlands(Image: Hobject, Lowlands: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn lowlands(Image: Hobject, Lowlands: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_lowlands_center(Image: Hobject, Lowlands: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn lowlands_center(Image: Hobject, Lowlands: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_local_max(Image: Hobject, LocalMaxima: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn local_max(Image: Hobject, LocalMaxima: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_plateaus(Image: Hobject, Plateaus: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn plateaus(Image: Hobject, Plateaus: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_plateaus_center(Image: Hobject, Plateaus: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn plateaus_center(Image: Hobject, Plateaus: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_histo_to_thresh(
        Histogramm: Htuple,
        Sigma: Htuple,
        MinThresh: *mut Htuple,
        MaxThresh: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_auto_threshold(Image: Hobject, Regions: *mut Hobject, Sigma: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn auto_threshold(Image: Hobject, Regions: *mut Hobject, Sigma: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_bin_threshold(Image: Hobject, Region: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn bin_threshold(Image: Hobject, Region: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_fast_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        MinGray: Htuple,
        MaxGray: Htuple,
        MinSize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fast_threshold(
        Image: Hobject,
        Region: *mut Hobject,
        MinGray: f64,
        MaxGray: f64,
        MinSize: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_polar_trans_region_inv(
        PolarRegion: Hobject,
        XYTransRegion: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        AngleStart: Htuple,
        AngleEnd: Htuple,
        RadiusStart: Htuple,
        RadiusEnd: Htuple,
        WidthIn: Htuple,
        HeightIn: Htuple,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn polar_trans_region_inv(
        PolarRegion: Hobject,
        XYTransRegion: *mut Hobject,
        Row: f64,
        Column: f64,
        AngleStart: f64,
        AngleEnd: f64,
        RadiusStart: f64,
        RadiusEnd: f64,
        WidthIn: Hlong,
        HeightIn: Hlong,
        Width: Hlong,
        Height: Hlong,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_polar_trans_region(
        Region: Hobject,
        PolarTransRegion: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        AngleStart: Htuple,
        AngleEnd: Htuple,
        RadiusStart: Htuple,
        RadiusEnd: Htuple,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn polar_trans_region(
        Region: Hobject,
        PolarTransRegion: *mut Hobject,
        Row: f64,
        Column: f64,
        AngleStart: f64,
        AngleEnd: f64,
        RadiusStart: f64,
        RadiusEnd: f64,
        Width: Hlong,
        Height: Hlong,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_merge_regions_line_scan(
        CurrRegions: Hobject,
        PrevRegions: Hobject,
        CurrMergedRegions: *mut Hobject,
        PrevMergedRegions: *mut Hobject,
        ImageHeight: Htuple,
        MergeBorder: Htuple,
        MaxImagesRegion: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn merge_regions_line_scan(
        CurrRegions: Hobject,
        PrevRegions: Hobject,
        CurrMergedRegions: *mut Hobject,
        PrevMergedRegions: *mut Hobject,
        ImageHeight: Hlong,
        MergeBorder: *const ::std::os::raw::c_char,
        MaxImagesRegion: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_partition_rectangle(
        Region: Hobject,
        Partitioned: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn partition_rectangle(
        Region: Hobject,
        Partitioned: *mut Hobject,
        Width: f64,
        Height: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_partition_dynamic(
        Region: Hobject,
        Partitioned: *mut Hobject,
        Distance: Htuple,
        Percent: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn partition_dynamic(
        Region: Hobject,
        Partitioned: *mut Hobject,
        Distance: f64,
        Percent: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_region_to_label(
        Region: Hobject,
        ImageLabel: *mut Hobject,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn region_to_label(
        Region: Hobject,
        ImageLabel: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_region_to_bin(
        Region: Hobject,
        BinImage: *mut Hobject,
        ForegroundGray: Htuple,
        BackgroundGray: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn region_to_bin(
        Region: Hobject,
        BinImage: *mut Hobject,
        ForegroundGray: Hlong,
        BackgroundGray: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union2(Region1: Hobject, Region2: Hobject, RegionUnion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn union2(Region1: Hobject, Region2: Hobject, RegionUnion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_union1(Region: Hobject, RegionUnion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn union1(Region: Hobject, RegionUnion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_closest_point_transform(
        Region: Hobject,
        Distances: *mut Hobject,
        ClosestPoints: *mut Hobject,
        Metric: Htuple,
        Foreground: Htuple,
        ClosestPointMode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn closest_point_transform(
        Region: Hobject,
        Distances: *mut Hobject,
        ClosestPoints: *mut Hobject,
        Metric: *const ::std::os::raw::c_char,
        Foreground: *const ::std::os::raw::c_char,
        ClosestPointMode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_transform(
        Region: Hobject,
        DistanceImage: *mut Hobject,
        Metric: Htuple,
        Foreground: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_transform(
        Region: Hobject,
        DistanceImage: *mut Hobject,
        Metric: *const ::std::os::raw::c_char,
        Foreground: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_skeleton(Region: Hobject, Skeleton: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn skeleton(Region: Hobject, Skeleton: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_region(
        Regions: Hobject,
        TransRegions: *mut Hobject,
        HomMat2D: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_region(
        Region: Hobject,
        RegionAffineTrans: *mut Hobject,
        HomMat2D: Htuple,
        Interpolate: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mirror_region(
        Region: Hobject,
        RegionMirror: *mut Hobject,
        Mode: Htuple,
        WidthHeight: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mirror_region(
        Region: Hobject,
        RegionMirror: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        WidthHeight: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_zoom_region(
        Region: Hobject,
        RegionZoom: *mut Hobject,
        ScaleWidth: Htuple,
        ScaleHeight: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn zoom_region(
        Region: Hobject,
        RegionZoom: *mut Hobject,
        ScaleWidth: f64,
        ScaleHeight: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_move_region(
        Region: Hobject,
        RegionMoved: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn move_region(
        Region: Hobject,
        RegionMoved: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_junctions_skeleton(
        Region: Hobject,
        EndPoints: *mut Hobject,
        JuncPoints: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn junctions_skeleton(
        Region: Hobject,
        EndPoints: *mut Hobject,
        JuncPoints: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection(
        Region1: Hobject,
        Region2: Hobject,
        RegionIntersection: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection(
        Region1: Hobject,
        Region2: Hobject,
        RegionIntersection: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_interjacent(Region: Hobject, RegionInterjacent: *mut Hobject, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn interjacent(
        Region: Hobject,
        RegionInterjacent: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fill_up(Region: Hobject, RegionFillUp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn fill_up(Region: Hobject, RegionFillUp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_fill_up_shape(
        Region: Hobject,
        RegionFillUp: *mut Hobject,
        Feature: Htuple,
        Min: Htuple,
        Max: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fill_up_shape(
        Region: Hobject,
        RegionFillUp: *mut Hobject,
        Feature: *const ::std::os::raw::c_char,
        Min: f64,
        Max: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_expand_region(
        Regions: Hobject,
        ForbiddenArea: Hobject,
        RegionExpanded: *mut Hobject,
        Iterations: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn expand_region(
        Regions: Hobject,
        ForbiddenArea: Hobject,
        RegionExpanded: *mut Hobject,
        Iterations: Hlong,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clip_region_rel(
        Region: Hobject,
        RegionClipped: *mut Hobject,
        Top: Htuple,
        Bottom: Htuple,
        Left: Htuple,
        Right: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn clip_region_rel(
        Region: Hobject,
        RegionClipped: *mut Hobject,
        Top: Hlong,
        Bottom: Hlong,
        Left: Hlong,
        Right: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clip_region(
        Region: Hobject,
        RegionClipped: *mut Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn clip_region(
        Region: Hobject,
        RegionClipped: *mut Hobject,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rank_region(
        Region: Hobject,
        RegionCount: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
        Number: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn rank_region(
        Region: Hobject,
        RegionCount: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
        Number: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_connection(Region: Hobject, ConnectedRegions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn connection(Region: Hobject, ConnectedRegions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_symm_difference(
        Region1: Hobject,
        Region2: Hobject,
        RegionDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn symm_difference(
        Region1: Hobject,
        Region2: Hobject,
        RegionDifference: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_difference(Region: Hobject, Sub: Hobject, RegionDifference: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn difference(Region: Hobject, Sub: Hobject, RegionDifference: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_complement(Region: Hobject, RegionComplement: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn complement(Region: Hobject, RegionComplement: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_background_seg(Foreground: Hobject, BackgroundRegions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn background_seg(Foreground: Hobject, BackgroundRegions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_hamming_change_region(
        InputRegion: Hobject,
        OutputRegion: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
        Distance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hamming_change_region(
        InputRegion: Hobject,
        OutputRegion: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
        Distance: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_noise_region(
        InputRegion: Hobject,
        OutputRegion: *mut Hobject,
        Type: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn remove_noise_region(
        InputRegion: Hobject,
        OutputRegion: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_shape_trans(Region: Hobject, RegionTrans: *mut Hobject, Type: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn shape_trans(
        Region: Hobject,
        RegionTrans: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_expand_gray(
        Regions: Hobject,
        Image: Hobject,
        ForbiddenArea: Hobject,
        RegionExpand: *mut Hobject,
        Iterations: Htuple,
        Mode: Htuple,
        Threshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn expand_gray(
        Regions: Hobject,
        Image: Hobject,
        ForbiddenArea: Hobject,
        RegionExpand: *mut Hobject,
        Iterations: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Threshold: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_expand_gray_ref(
        Regions: Hobject,
        Image: Hobject,
        ForbiddenArea: Hobject,
        RegionExpand: *mut Hobject,
        Iterations: Htuple,
        Mode: Htuple,
        RefGray: Htuple,
        Threshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn expand_gray_ref(
        Regions: Hobject,
        Image: Hobject,
        ForbiddenArea: Hobject,
        RegionExpand: *mut Hobject,
        Iterations: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        RefGray: Hlong,
        Threshold: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_split_skeleton_lines(
        SkeletonRegion: Hobject,
        MaxDistance: Htuple,
        BeginRow: *mut Htuple,
        BeginCol: *mut Htuple,
        EndRow: *mut Htuple,
        EndCol: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_split_skeleton_region(
        SkeletonRegion: Hobject,
        RegionLines: *mut Hobject,
        MaxDistance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn split_skeleton_region(
        SkeletonRegion: Hobject,
        RegionLines: *mut Hobject,
        MaxDistance: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_histo(
        Region: *mut Hobject,
        Histogram: Htuple,
        Row: Htuple,
        Column: Htuple,
        Scale: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_eliminate_runs(
        Region: Hobject,
        RegionClipped: *mut Hobject,
        ElimShorter: Htuple,
        ElimLonger: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn eliminate_runs(
        Region: Hobject,
        RegionClipped: *mut Hobject,
        ElimShorter: Hlong,
        ElimLonger: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_surface_normals_object_model_3d(
        ObjectModel3D: Htuple,
        Method: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectModel3DNormals: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smooth_object_model_3d(
        ObjectModel3D: Htuple,
        Method: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        SmoothObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_triangulate_object_model_3d(
        ObjectModel3D: Htuple,
        Method: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        TriangulatedObjectModel3D: *mut Htuple,
        Information: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_stereo_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_stereo_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_stereo_model(StereoModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_stereo_model(StereoModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_reconstruct_points_stereo(
        StereoModelID: Htuple,
        Row: Htuple,
        Column: Htuple,
        CovIP: Htuple,
        CameraIdx: Htuple,
        PointIdx: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        CovWP: *mut Htuple,
        PointIdxOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reconstruct_surface_stereo(
        Images: Hobject,
        StereoModelID: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn reconstruct_surface_stereo(
        Images: Hobject,
        StereoModelID: Hlong,
        ObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_stereo_model_object(
        Object: *mut Hobject,
        StereoModelID: Htuple,
        PairIndex: Htuple,
        ObjectName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_stereo_model_object(
        Object: *mut Hobject,
        StereoModelID: Hlong,
        PairIndex: Hlong,
        ObjectName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_stereo_model_image_pairs(
        StereoModelID: Htuple,
        From: *mut Htuple,
        To: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_stereo_model_image_pairs(
        StereoModelID: Htuple,
        From: Htuple,
        To: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_stereo_model_param(
        StereoModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_stereo_model_param(
        StereoModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_stereo_model(
        CameraSetupModelID: Htuple,
        Method: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        StereoModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_message_queue_param(
        QueueHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_message_queue_param(
        QueueHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_message_queue_param(
        QueueHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_message_queue_param(
        QueueHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dequeue_message(
        QueueHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        MessageHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dequeue_message(
        QueueHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        MessageHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_enqueue_message(
        QueueHandle: Htuple,
        MessageHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_message_queue(QueueHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_message_queue(QueueHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_message_queue(QueueHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_message_queue(QueueHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_message_param(
        MessageHandle: Htuple,
        GenParamName: Htuple,
        Key: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_message_param(
        MessageHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        Key: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_message_param(
        MessageHandle: Htuple,
        GenParamName: Htuple,
        Key: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_message_param(
        MessageHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        Key: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_message_obj(
        ObjectData: *mut Hobject,
        MessageHandle: Htuple,
        Key: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_message_obj(
        ObjectData: *mut Hobject,
        MessageHandle: Hlong,
        Key: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_message_obj(ObjectData: Hobject, MessageHandle: Htuple, Key: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_message_obj(
        ObjectData: Hobject,
        MessageHandle: Hlong,
        Key: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_message_tuple(
        MessageHandle: Htuple,
        Key: Htuple,
        TupleData: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_message_tuple(
        MessageHandle: Hlong,
        Key: *const ::std::os::raw::c_char,
        TupleData: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_message_tuple(MessageHandle: Htuple, Key: Htuple, TupleData: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_message(MessageHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_message(MessageHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_message(MessageHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_message(MessageHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_conditions() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_conditions() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_condition(ConditionHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_condition(ConditionHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_broadcast_condition(ConditionHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn broadcast_condition(ConditionHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_signal_condition(ConditionHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn signal_condition(ConditionHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_timed_wait_condition(
        ConditionHandle: Htuple,
        MutexHandle: Htuple,
        Timeout: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn timed_wait_condition(
        ConditionHandle: Hlong,
        MutexHandle: Hlong,
        Timeout: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_wait_condition(ConditionHandle: Htuple, MutexHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn wait_condition(ConditionHandle: Hlong, MutexHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_condition(
        AttribName: Htuple,
        AttribValue: Htuple,
        ConditionHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_condition(
        AttribName: *const ::std::os::raw::c_char,
        AttribValue: *const ::std::os::raw::c_char,
        ConditionHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_barriers() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_barriers() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_barrier(BarrierHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_barrier(BarrierHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_wait_barrier(BarrierHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn wait_barrier(BarrierHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_barrier(
        AttribName: Htuple,
        AttribValue: Htuple,
        TeamSize: Htuple,
        BarrierHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_barrier(
        AttribName: *const ::std::os::raw::c_char,
        AttribValue: *const ::std::os::raw::c_char,
        TeamSize: Hlong,
        BarrierHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_events() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_events() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_event(EventHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_event(EventHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_signal_event(EventHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn signal_event(EventHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_try_wait_event(EventHandle: Htuple, Busy: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn try_wait_event(EventHandle: Hlong, Busy: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_wait_event(EventHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn wait_event(EventHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_event(
        AttribName: Htuple,
        AttribValue: Htuple,
        EventHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_event(
        AttribName: *const ::std::os::raw::c_char,
        AttribValue: *const ::std::os::raw::c_char,
        EventHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_mutexes() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_mutexes() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_mutex(MutexHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_mutex(MutexHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_unlock_mutex(MutexHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn unlock_mutex(MutexHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_try_lock_mutex(MutexHandle: Htuple, Busy: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn try_lock_mutex(MutexHandle: Hlong, Busy: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_lock_mutex(MutexHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn lock_mutex(MutexHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_mutex(
        AttribName: Htuple,
        AttribValue: Htuple,
        MutexHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_mutex(
        AttribName: *const ::std::os::raw::c_char,
        AttribValue: *const ::std::os::raw::c_char,
        MutexHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_threading_attrib(
        ThreadingHandle: Htuple,
        ThreadingClass: *mut Htuple,
        AttribName: *mut Htuple,
        AttribValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_aop_info(
        OperatorName: Htuple,
        IndexName: Htuple,
        IndexValue: Htuple,
        InfoName: Htuple,
        InfoValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_aop_info(
        OperatorName: *const ::std::os::raw::c_char,
        IndexName: *const ::std::os::raw::c_char,
        IndexValue: *const ::std::os::raw::c_char,
        InfoName: *const ::std::os::raw::c_char,
        InfoValue: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_aop_info(
        OperatorName: Htuple,
        IndexName: Htuple,
        IndexValue: Htuple,
        InfoName: Htuple,
        InfoValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_aop_info(
        OperatorName: Htuple,
        IndexName: Htuple,
        IndexValue: Htuple,
        Name: *mut Htuple,
        Value: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_optimize_aop(
        OperatorName: Htuple,
        IconicType: Htuple,
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_aop_knowledge(
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_aop_knowledge(
        FileName: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_aop_knowledge(
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Attributes: *mut Htuple,
        OperatorNames: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_access(
        Object: Hobject,
        Dummy: *mut Hobject,
        NumReadChord: Htuple,
        NumCopyObj: Htuple,
        Write_chord: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn test_access(
        Object: Hobject,
        Dummy: *mut Hobject,
        NumReadChord: Hlong,
        NumCopyObj: Hlong,
        Write_chord: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_obj_diff(Objects: Hobject, ObjectsSub: Hobject, ObjectsDiff: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn obj_diff(Objects: Hobject, ObjectsSub: Hobject, ObjectsDiff: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_grayval(Image: Hobject, Row: Htuple, Column: Htuple, Grayval: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_grayval(Image: Hobject, Row: Hlong, Column: Hlong, Grayval: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_paint_xld(
        XLD: Hobject,
        Image: Hobject,
        ImageResult: *mut Hobject,
        Grayval: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn paint_xld(
        XLD: Hobject,
        Image: Hobject,
        ImageResult: *mut Hobject,
        Grayval: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_paint_region(
        Region: Hobject,
        Image: Hobject,
        ImageResult: *mut Hobject,
        Grayval: Htuple,
        Type: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn paint_region(
        Region: Hobject,
        Image: Hobject,
        ImageResult: *mut Hobject,
        Grayval: f64,
        Type: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_overpaint_region(
        Image: Hobject,
        Region: Hobject,
        Grayval: Htuple,
        Type: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn overpaint_region(
        Image: Hobject,
        Region: Hobject,
        Grayval: f64,
        Type: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image_proto(Image: Hobject, ImageCleared: *mut Hobject, Grayval: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn gen_image_proto(Image: Hobject, ImageCleared: *mut Hobject, Grayval: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_paint_gray(
        ImageSource: Hobject,
        ImageDestination: Hobject,
        MixedImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn paint_gray(
        ImageSource: Hobject,
        ImageDestination: Hobject,
        MixedImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_overpaint_gray(ImageDestination: Hobject, ImageSource: Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn overpaint_gray(ImageDestination: Hobject, ImageSource: Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_integer_to_obj(Objects: *mut Hobject, SurrogateTuple: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn integer_to_obj(Objects: *mut Hobject, SurrogateTuple: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_obj_to_integer(
        Objects: Hobject,
        Index: Htuple,
        Number: Htuple,
        SurrogateTuple: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn obj_to_integer(
        Objects: Hobject,
        Index: Hlong,
        Number: Hlong,
        SurrogateTuple: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_obj(
        Objects: Hobject,
        ObjectsSelected: *mut Hobject,
        Index: Htuple,
        NumObj: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn copy_obj(
        Objects: Hobject,
        ObjectsSelected: *mut Hobject,
        Index: Hlong,
        NumObj: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_concat_obj(
        Objects1: Hobject,
        Objects2: Hobject,
        ObjectsConcat: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn concat_obj(Objects1: Hobject, Objects2: Hobject, ObjectsConcat: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_obj(Objects: Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn clear_obj(Objects: Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_image(Image: Hobject, DupImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn copy_image(Image: Hobject, DupImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_obj(Objects: Hobject, ObjectSelected: *mut Hobject, Index: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn select_obj(Objects: Hobject, ObjectSelected: *mut Hobject, Index: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_compare_obj(
        Objects1: Hobject,
        Objects2: Hobject,
        Epsilon: Htuple,
        IsEqual: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compare_obj(
        Objects1: Hobject,
        Objects2: Hobject,
        Epsilon: f64,
        IsEqual: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_subset_region(
        Region1: Hobject,
        Region2: Hobject,
        IsSubset: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn test_subset_region(Region1: Hobject, Region2: Hobject, IsSubset: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_equal_region(
        Regions1: Hobject,
        Regions2: Hobject,
        IsEqual: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn test_equal_region(Regions1: Hobject, Regions2: Hobject, IsEqual: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_equal_obj(Objects1: Hobject, Objects2: Hobject, IsEqual: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn test_equal_obj(Objects1: Hobject, Objects2: Hobject, IsEqual: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_count_obj(Objects: Hobject, Number: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn count_obj(Objects: Hobject, Number: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_channel_info(
        Object: Hobject,
        Request: Htuple,
        Channel: Htuple,
        Information: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_channel_info(
        Object: Hobject,
        Request: *const ::std::os::raw::c_char,
        Channel: Hlong,
        Information: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_obj_class(Object: Hobject, Class: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_obj_class(Object: Hobject, Class: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image_interleaved(
        ImageRGB: *mut Hobject,
        PixelPointer: Htuple,
        ColorFormat: Htuple,
        OriginalWidth: Htuple,
        OriginalHeight: Htuple,
        Alignment: Htuple,
        Type: Htuple,
        ImageWidth: Htuple,
        ImageHeight: Htuple,
        StartRow: Htuple,
        StartColumn: Htuple,
        BitsPerChannel: Htuple,
        BitShift: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image_interleaved(
        ImageRGB: *mut Hobject,
        PixelPointer: Hlong,
        ColorFormat: *const ::std::os::raw::c_char,
        OriginalWidth: Hlong,
        OriginalHeight: Hlong,
        Alignment: Hlong,
        Type: *const ::std::os::raw::c_char,
        ImageWidth: Hlong,
        ImageHeight: Hlong,
        StartRow: Hlong,
        StartColumn: Hlong,
        BitsPerChannel: Hlong,
        BitShift: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_polygon_xld(Polygon: Hobject, Region: *mut Hobject, Mode: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn gen_region_polygon_xld(
        Polygon: Hobject,
        Region: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_contour_xld(Contour: Hobject, Region: *mut Hobject, Mode: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn gen_region_contour_xld(
        Contour: Hobject,
        Region: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_polygon_filled(
        Region: *mut Hobject,
        Rows: Htuple,
        Columns: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_polygon(Region: *mut Hobject, Rows: Htuple, Columns: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_points(Region: *mut Hobject, Rows: Htuple, Columns: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn gen_region_points(Region: *mut Hobject, Rows: Hlong, Columns: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_runs(
        Region: *mut Hobject,
        Row: Htuple,
        ColumnBegin: Htuple,
        ColumnEnd: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_region_runs(
        Region: *mut Hobject,
        Row: Hlong,
        ColumnBegin: Hlong,
        ColumnEnd: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_rectangle2(
        Rectangle: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_rectangle2(
        Rectangle: *mut Hobject,
        Row: f64,
        Column: f64,
        Phi: f64,
        Length1: f64,
        Length2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_rectangle1(
        Rectangle: *mut Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_rectangle1(
        Rectangle: *mut Hobject,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_random_region(RegionRandom: *mut Hobject, Width: Htuple, Height: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn gen_random_region(RegionRandom: *mut Hobject, Width: Hlong, Height: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image3(
        ImageRGB: *mut Hobject,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
        PixelPointerRed: Htuple,
        PixelPointerGreen: Htuple,
        PixelPointerBlue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image3(
        ImageRGB: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
        PixelPointerRed: Hlong,
        PixelPointerGreen: Hlong,
        PixelPointerBlue: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image1(
        Image: *mut Hobject,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
        PixelPointer: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image1(
        Image: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
        PixelPointer: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image_const(
        Image: *mut Hobject,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image_const(
        Image: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_ellipse_sector(
        EllipseSector: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        StartAngle: Htuple,
        EndAngle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_ellipse_sector(
        EllipseSector: *mut Hobject,
        Row: f64,
        Column: f64,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
        StartAngle: f64,
        EndAngle: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_ellipse(
        Ellipse: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_ellipse(
        Ellipse: *mut Hobject,
        Row: f64,
        Column: f64,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_circle_sector(
        CircleSector: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Radius: Htuple,
        StartAngle: Htuple,
        EndAngle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_circle_sector(
        CircleSector: *mut Hobject,
        Row: f64,
        Column: f64,
        Radius: f64,
        StartAngle: f64,
        EndAngle: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_circle(
        Circle: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Radius: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_circle(Circle: *mut Hobject, Row: f64, Column: f64, Radius: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_checker_region(
        RegionChecker: *mut Hobject,
        WidthRegion: Htuple,
        HeightRegion: Htuple,
        WidthPattern: Htuple,
        HeightPattern: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_checker_region(
        RegionChecker: *mut Hobject,
        WidthRegion: Hlong,
        HeightRegion: Hlong,
        WidthPattern: Hlong,
        HeightPattern: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_grid_region(
        RegionGrid: *mut Hobject,
        RowSteps: Htuple,
        ColumnSteps: Htuple,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_grid_region(
        RegionGrid: *mut Hobject,
        RowSteps: Hlong,
        ColumnSteps: Hlong,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_random_regions(
        Regions: *mut Hobject,
        Type: Htuple,
        WidthMin: Htuple,
        WidthMax: Htuple,
        HeightMin: Htuple,
        HeightMax: Htuple,
        PhiMin: Htuple,
        PhiMax: Htuple,
        NumRegions: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_random_regions(
        Regions: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        WidthMin: f64,
        WidthMax: f64,
        HeightMin: f64,
        HeightMax: f64,
        PhiMin: f64,
        PhiMax: f64,
        NumRegions: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_hline(
        Regions: *mut Hobject,
        Orientation: Htuple,
        Distance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_region_hline(Regions: *mut Hobject, Orientation: f64, Distance: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_region_line(
        RegionLines: *mut Hobject,
        BeginRow: Htuple,
        BeginCol: Htuple,
        EndRow: Htuple,
        EndCol: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_region_line(
        RegionLines: *mut Hobject,
        BeginRow: Hlong,
        BeginCol: Hlong,
        EndRow: Hlong,
        EndCol: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_empty_obj(EmptyObject: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gen_empty_obj(EmptyObject: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_empty_region(EmptyRegion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gen_empty_region(EmptyRegion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image_gray_ramp(
        ImageGrayRamp: *mut Hobject,
        Alpha: Htuple,
        Beta: Htuple,
        Mean: Htuple,
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image_gray_ramp(
        ImageGrayRamp: *mut Hobject,
        Alpha: f64,
        Beta: f64,
        Mean: f64,
        Row: Hlong,
        Column: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image3_extern(
        Image: *mut Hobject,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
        PointerRed: Htuple,
        PointerGreen: Htuple,
        PointerBlue: Htuple,
        ClearProc: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image3_extern(
        Image: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
        PointerRed: Hlong,
        PointerGreen: Hlong,
        PointerBlue: Hlong,
        ClearProc: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image1_extern(
        Image: *mut Hobject,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
        PixelPointer: Htuple,
        ClearProc: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image1_extern(
        Image: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
        PixelPointer: Hlong,
        ClearProc: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image1_rect(
        Image: *mut Hobject,
        PixelPointer: Htuple,
        Width: Htuple,
        Height: Htuple,
        VerticalPitch: Htuple,
        HorizontalBitPitch: Htuple,
        BitsPerPixel: Htuple,
        DoCopy: Htuple,
        ClearProc: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image1_rect(
        Image: *mut Hobject,
        PixelPointer: Hlong,
        Width: Hlong,
        Height: Hlong,
        VerticalPitch: Hlong,
        HorizontalBitPitch: Hlong,
        BitsPerPixel: Hlong,
        DoCopy: *const ::std::os::raw::c_char,
        ClearProc: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_image_pointer1_rect(
        Image: Hobject,
        PixelPointer: *mut Htuple,
        Width: *mut Htuple,
        Height: *mut Htuple,
        VerticalPitch: *mut Htuple,
        HorizontalBitPitch: *mut Htuple,
        BitsPerPixel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_image_pointer1_rect(
        Image: Hobject,
        PixelPointer: *mut Hlong,
        Width: *mut Hlong,
        Height: *mut Hlong,
        VerticalPitch: *mut Hlong,
        HorizontalBitPitch: *mut Hlong,
        BitsPerPixel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_image_pointer3(
        ImageRGB: Hobject,
        PointerRed: *mut Htuple,
        PointerGreen: *mut Htuple,
        PointerBlue: *mut Htuple,
        Type: *mut Htuple,
        Width: *mut Htuple,
        Height: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_image_pointer3(
        ImageRGB: Hobject,
        PointerRed: *mut Hlong,
        PointerGreen: *mut Hlong,
        PointerBlue: *mut Hlong,
        Type: *mut ::std::os::raw::c_char,
        Width: *mut Hlong,
        Height: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_image_pointer1(
        Image: Hobject,
        Pointer: *mut Htuple,
        Type: *mut Htuple,
        Width: *mut Htuple,
        Height: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_image_pointer1(
        Image: Hobject,
        Pointer: *mut Hlong,
        Type: *mut ::std::os::raw::c_char,
        Width: *mut Hlong,
        Height: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_image_type(Image: Hobject, Type: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_image_type(Image: Hobject, Type: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_image_size(Image: Hobject, Width: *mut Htuple, Height: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_image_size(Image: Hobject, Width: *mut Hlong, Height: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_image_time(
        Image: Hobject,
        MSecond: *mut Htuple,
        Second: *mut Htuple,
        Minute: *mut Htuple,
        Hour: *mut Htuple,
        Day: *mut Htuple,
        YDay: *mut Htuple,
        Month: *mut Htuple,
        Year: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_image_time(
        Image: Hobject,
        MSecond: *mut Hlong,
        Second: *mut Hlong,
        Minute: *mut Hlong,
        Hour: *mut Hlong,
        Day: *mut Hlong,
        YDay: *mut Hlong,
        Month: *mut Hlong,
        Year: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_grayval_interpolated(
        Image: Hobject,
        Row: Htuple,
        Column: Htuple,
        Interpolation: Htuple,
        Grayval: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_grayval_interpolated(
        Image: Hobject,
        Row: f64,
        Column: f64,
        Interpolation: *const ::std::os::raw::c_char,
        Grayval: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_grayval(
        Image: Hobject,
        Row: Htuple,
        Column: Htuple,
        Grayval: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_thickness(
        Region: Hobject,
        Thickness: *mut Htuple,
        Histogramm: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_polygon(
        Region: Hobject,
        Tolerance: Htuple,
        Rows: *mut Htuple,
        Columns: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_points(Region: Hobject, Rows: *mut Htuple, Columns: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_contour(Region: Hobject, Rows: *mut Htuple, Columns: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_runs(
        Region: Hobject,
        Row: *mut Htuple,
        ColumnBegin: *mut Htuple,
        ColumnEnd: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_chain(
        Region: Hobject,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Chain: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_convex(Region: Hobject, Rows: *mut Htuple, Columns: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocv_simple(
        Pattern: Hobject,
        OCVHandle: Htuple,
        PatternName: Htuple,
        AdaptPos: Htuple,
        AdaptSize: Htuple,
        AdaptAngle: Htuple,
        AdaptGray: Htuple,
        Threshold: Htuple,
        Quality: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocv_simple(
        Pattern: Hobject,
        OCVHandle: Hlong,
        PatternName: *const ::std::os::raw::c_char,
        AdaptPos: *const ::std::os::raw::c_char,
        AdaptSize: *const ::std::os::raw::c_char,
        AdaptAngle: *const ::std::os::raw::c_char,
        AdaptGray: *const ::std::os::raw::c_char,
        Threshold: f64,
        Quality: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_traind_ocv_proj(
        Pattern: Hobject,
        OCVHandle: Htuple,
        Name: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn traind_ocv_proj(
        Pattern: Hobject,
        OCVHandle: Hlong,
        Name: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_ocv(SerializedItemHandle: Htuple, OCVHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_ocv(SerializedItemHandle: Hlong, OCVHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_ocv(OCVHandle: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_ocv(OCVHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocv(FileName: Htuple, OCVHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocv(FileName: *const ::std::os::raw::c_char, OCVHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ocv(OCVHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_ocv(OCVHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_ocvs() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_ocvs() -> Herror;
}
unsafe extern "C" {
    pub fn T_close_ocv(OCVHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_ocv(OCVHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_ocv_proj(PatternNames: Htuple, OCVHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_ocv_proj(
        PatternNames: *const ::std::os::raw::c_char,
        OCVHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_word_knn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Expression: Htuple,
        NumAlternatives: Htuple,
        NumCorrections: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
        Word: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_word_knn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Expression: *const ::std::os::raw::c_char,
        NumAlternatives: Hlong,
        NumCorrections: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Confidence: *mut f64,
        Word: *mut ::std::os::raw::c_char,
        Score: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_ocr_class_knn(
        SerializedItemHandle: Htuple,
        OCRHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_ocr_class_knn(SerializedItemHandle: Hlong, OCRHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_ocr_class_knn(
        OCRHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_ocr_class_knn(OCRHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_class_knn(FileName: Htuple, OCRHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr_class_knn(
        FileName: *const ::std::os::raw::c_char,
        OCRHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ocr_class_knn(OCRHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_ocr_class_knn(OCRHandle: Hlong, FileName: *const ::std::os::raw::c_char)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_ocr_class_knn() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_ocr_class_knn() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_ocr_class_knn(OCRHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_ocr_class_knn(OCRHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_ocr_class_knn(
        WidthCharacter: Htuple,
        HeightCharacter: Htuple,
        Interpolation: Htuple,
        Features: Htuple,
        Characters: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        OCRHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trainf_ocr_class_knn(
        OCRHandle: Htuple,
        TrainingFile: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_features_ocr_class_knn(
        Character: Hobject,
        OCRHandle: Htuple,
        Transform: Htuple,
        Features: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_ocr_class_knn(
        OCRHandle: Htuple,
        WidthCharacter: *mut Htuple,
        HeightCharacter: *mut Htuple,
        Interpolation: *mut Htuple,
        Features: *mut Htuple,
        Characters: *mut Htuple,
        Preprocessing: *mut Htuple,
        NumTrees: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_multi_class_knn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_multi_class_knn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Confidence: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_single_class_knn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        NumClasses: Htuple,
        NumNeighbors: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_trainf_knn(
        TrainingFile: Htuple,
        FeatureList: Htuple,
        SelectionMethod: Htuple,
        Width: Htuple,
        Height: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        OCRHandle: *mut Htuple,
        FeatureSet: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_trainf_mlp_protected(
        TrainingFile: Htuple,
        Password: Htuple,
        FeatureList: Htuple,
        SelectionMethod: Htuple,
        Width: Htuple,
        Height: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        OCRHandle: *mut Htuple,
        FeatureSet: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_trainf_mlp(
        TrainingFile: Htuple,
        FeatureList: Htuple,
        SelectionMethod: Htuple,
        Width: Htuple,
        Height: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        OCRHandle: *mut Htuple,
        FeatureSet: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_trainf_svm_protected(
        TrainingFile: Htuple,
        Password: Htuple,
        FeatureList: Htuple,
        SelectionMethod: Htuple,
        Width: Htuple,
        Height: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        OCRHandle: *mut Htuple,
        FeatureSet: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_trainf_svm(
        TrainingFile: Htuple,
        FeatureList: Htuple,
        SelectionMethod: Htuple,
        Width: Htuple,
        Height: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        OCRHandle: *mut Htuple,
        FeatureSet: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_lexica() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_lexica() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_lexicon(LexiconHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_lexicon(LexiconHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_suggest_lexicon(
        LexiconHandle: Htuple,
        Word: Htuple,
        Suggestion: *mut Htuple,
        NumCorrections: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn suggest_lexicon(
        LexiconHandle: Hlong,
        Word: *const ::std::os::raw::c_char,
        Suggestion: *mut ::std::os::raw::c_char,
        NumCorrections: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_lookup_lexicon(LexiconHandle: Htuple, Word: Htuple, Found: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn lookup_lexicon(
        LexiconHandle: Hlong,
        Word: *const ::std::os::raw::c_char,
        Found: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inspect_lexicon(LexiconHandle: Htuple, Words: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn inspect_lexicon(LexiconHandle: Hlong, Words: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_import_lexicon(Name: Htuple, FileName: Htuple, LexiconHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn import_lexicon(
        Name: *const ::std::os::raw::c_char,
        FileName: *const ::std::os::raw::c_char,
        LexiconHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_lexicon(Name: Htuple, Words: Htuple, LexiconHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_ocr_class_svm() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_ocr_class_svm() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_ocr_class_svm(OCRHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_ocr_class_svm(OCRHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_ocr_class_svm(
        SerializedItemHandle: Htuple,
        OCRHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_ocr_class_svm(SerializedItemHandle: Hlong, OCRHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_ocr_class_svm(
        OCRHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_ocr_class_svm(OCRHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_class_svm(FileName: Htuple, OCRHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr_class_svm(
        FileName: *const ::std::os::raw::c_char,
        OCRHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ocr_class_svm(OCRHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_ocr_class_svm(OCRHandle: Hlong, FileName: *const ::std::os::raw::c_char)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_get_features_ocr_class_svm(
        Character: Hobject,
        OCRHandle: Htuple,
        Transform: Htuple,
        Features: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_word_svm(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Expression: Htuple,
        NumAlternatives: Htuple,
        NumCorrections: Htuple,
        Class: *mut Htuple,
        Word: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_word_svm(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Expression: *const ::std::os::raw::c_char,
        NumAlternatives: Hlong,
        NumCorrections: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Word: *mut ::std::os::raw::c_char,
        Score: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_multi_class_svm(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Class: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_multi_class_svm(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Class: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_single_class_svm(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Num: Htuple,
        Class: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reduce_ocr_class_svm(
        OCRHandle: Htuple,
        Method: Htuple,
        MinRemainingSV: Htuple,
        MaxError: Htuple,
        OCRHandleReduced: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn reduce_ocr_class_svm(
        OCRHandle: Hlong,
        Method: *const ::std::os::raw::c_char,
        MinRemainingSV: Hlong,
        MaxError: f64,
        OCRHandleReduced: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trainf_ocr_class_svm_protected(
        OCRHandle: Htuple,
        TrainingFile: Htuple,
        Password: Htuple,
        Epsilon: Htuple,
        TrainMode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn trainf_ocr_class_svm_protected(
        OCRHandle: Hlong,
        TrainingFile: *const ::std::os::raw::c_char,
        Password: *const ::std::os::raw::c_char,
        Epsilon: f64,
        TrainMode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trainf_ocr_class_svm(
        OCRHandle: Htuple,
        TrainingFile: Htuple,
        Epsilon: Htuple,
        TrainMode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn trainf_ocr_class_svm(
        OCRHandle: Hlong,
        TrainingFile: *const ::std::os::raw::c_char,
        Epsilon: f64,
        TrainMode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_prep_info_ocr_class_svm(
        OCRHandle: Htuple,
        TrainingFile: Htuple,
        Preprocessing: Htuple,
        InformationCont: *mut Htuple,
        CumInformationCont: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_support_vector_num_ocr_class_svm(
        OCRHandle: Htuple,
        NumSupportVectors: *mut Htuple,
        NumSVPerSVM: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_support_vector_ocr_class_svm(
        OCRHandle: Htuple,
        IndexSupportVector: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_ocr_class_svm(
        OCRHandle: Htuple,
        WidthCharacter: *mut Htuple,
        HeightCharacter: *mut Htuple,
        Interpolation: *mut Htuple,
        Features: *mut Htuple,
        Characters: *mut Htuple,
        KernelType: *mut Htuple,
        KernelParam: *mut Htuple,
        Nu: *mut Htuple,
        Mode: *mut Htuple,
        Preprocessing: *mut Htuple,
        NumComponents: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_ocr_class_svm(
        WidthCharacter: Htuple,
        HeightCharacter: Htuple,
        Interpolation: Htuple,
        Features: Htuple,
        Characters: Htuple,
        KernelType: Htuple,
        KernelParam: Htuple,
        Nu: Htuple,
        Mode: Htuple,
        Preprocessing: Htuple,
        NumComponents: Htuple,
        OCRHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_ocr_class_mlp() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_ocr_class_mlp() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_ocr_class_mlp(OCRHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_ocr_class_mlp(OCRHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_ocr_class_mlp(
        SerializedItemHandle: Htuple,
        OCRHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_ocr_class_mlp(SerializedItemHandle: Hlong, OCRHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_ocr_class_mlp(
        OCRHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_ocr_class_mlp(OCRHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_class_mlp(FileName: Htuple, OCRHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr_class_mlp(
        FileName: *const ::std::os::raw::c_char,
        OCRHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ocr_class_mlp(OCRHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_ocr_class_mlp(OCRHandle: Hlong, FileName: *const ::std::os::raw::c_char)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_get_features_ocr_class_mlp(
        Character: Hobject,
        OCRHandle: Htuple,
        Transform: Htuple,
        Features: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_word_mlp(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Expression: Htuple,
        NumAlternatives: Htuple,
        NumCorrections: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
        Word: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_word_mlp(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Expression: *const ::std::os::raw::c_char,
        NumAlternatives: Hlong,
        NumCorrections: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Confidence: *mut f64,
        Word: *mut ::std::os::raw::c_char,
        Score: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_multi_class_mlp(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_multi_class_mlp(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Confidence: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_single_class_mlp(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Num: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trainf_ocr_class_mlp_protected(
        OCRHandle: Htuple,
        TrainingFile: Htuple,
        Password: Htuple,
        MaxIterations: Htuple,
        WeightTolerance: Htuple,
        ErrorTolerance: Htuple,
        Error: *mut Htuple,
        ErrorLog: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trainf_ocr_class_mlp(
        OCRHandle: Htuple,
        TrainingFile: Htuple,
        MaxIterations: Htuple,
        WeightTolerance: Htuple,
        ErrorTolerance: Htuple,
        Error: *mut Htuple,
        ErrorLog: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_prep_info_ocr_class_mlp(
        OCRHandle: Htuple,
        TrainingFile: Htuple,
        Preprocessing: Htuple,
        InformationCont: *mut Htuple,
        CumInformationCont: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_rejection_params_ocr_class_mlp(
        OCRHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_rejection_params_ocr_class_mlp(
        OCRHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_rejection_params_ocr_class_mlp(
        OCRHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_rejection_params_ocr_class_mlp(
        OCRHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_regularization_params_ocr_class_mlp(
        OCRHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_regularization_params_ocr_class_mlp(
        OCRHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_regularization_params_ocr_class_mlp(
        OCRHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_regularization_params_ocr_class_mlp(
        OCRHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_ocr_class_mlp(
        OCRHandle: Htuple,
        WidthCharacter: *mut Htuple,
        HeightCharacter: *mut Htuple,
        Interpolation: *mut Htuple,
        Features: *mut Htuple,
        Characters: *mut Htuple,
        NumHidden: *mut Htuple,
        Preprocessing: *mut Htuple,
        NumComponents: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_ocr_class_mlp(
        WidthCharacter: Htuple,
        HeightCharacter: Htuple,
        Interpolation: Htuple,
        Features: Htuple,
        Characters: Htuple,
        NumHidden: Htuple,
        Preprocessing: Htuple,
        NumComponents: Htuple,
        RandSeed: Htuple,
        OCRHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_ocr(OcrHandle: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_ocr(OcrHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_ocr(SerializedItemHandle: Htuple, OcrHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_ocr(SerializedItemHandle: Hlong, OcrHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ocr(OcrHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_ocr(OcrHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr(FileName: Htuple, OcrHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr(FileName: *const ::std::os::raw::c_char, OcrHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_single(
        Character: Hobject,
        Image: Hobject,
        OcrHandle: Htuple,
        Classes: *mut Htuple,
        Confidences: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_multi(
        Character: Hobject,
        Image: Hobject,
        OcrHandle: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_multi(
        Character: Hobject,
        Image: Hobject,
        OcrHandle: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Confidence: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_info_ocr_class_box(
        OcrHandle: Htuple,
        WidthPattern: *mut Htuple,
        HeightPattern: *mut Htuple,
        Interpolation: *mut Htuple,
        WidthMaxChar: *mut Htuple,
        HeightMaxChar: *mut Htuple,
        Features: *mut Htuple,
        Characters: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_ocr_class_box(
        WidthPattern: Htuple,
        HeightPattern: Htuple,
        Interpolation: Htuple,
        Features: Htuple,
        Character: Htuple,
        OcrHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_traind_ocr_class_box(
        Character: Hobject,
        Image: Hobject,
        OcrHandle: Htuple,
        Class: Htuple,
        AvgConfidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn traind_ocr_class_box(
        Character: Hobject,
        Image: Hobject,
        OcrHandle: Hlong,
        Class: *const ::std::os::raw::c_char,
        AvgConfidence: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trainf_ocr_class_box(
        OcrHandle: Htuple,
        TrainingFile: Htuple,
        AvgConfidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn trainf_ocr_class_box(
        OcrHandle: Hlong,
        TrainingFile: *const ::std::os::raw::c_char,
        AvgConfidence: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_protect_ocr_trainf(
        TrainingFile: Htuple,
        Password: Htuple,
        TrainingFileProtected: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn protect_ocr_trainf(
        TrainingFile: *const ::std::os::raw::c_char,
        Password: *const ::std::os::raw::c_char,
        TrainingFileProtected: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ocr_trainf(
        Character: Hobject,
        Image: Hobject,
        Class: Htuple,
        TrainingFile: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_ocr_trainf(
        Character: Hobject,
        Image: Hobject,
        Class: *const ::std::os::raw::c_char,
        TrainingFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_ocr_change_char(OcrHandle: Htuple, Character: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_ocr(OcrHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_ocr(OcrHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_sort_region(
        Regions: Hobject,
        SortedRegions: *mut Hobject,
        SortMode: Htuple,
        Order: Htuple,
        RowOrCol: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sort_region(
        Regions: Hobject,
        SortedRegions: *mut Hobject,
        SortMode: *const ::std::os::raw::c_char,
        Order: *const ::std::os::raw::c_char,
        RowOrCol: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_ocrs() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_ocrs() -> Herror;
}
unsafe extern "C" {
    pub fn T_testd_ocr_class_box(
        Character: Hobject,
        Image: Hobject,
        OcrHandle: Htuple,
        Class: Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn testd_ocr_class_box(
        Character: Hobject,
        Image: Hobject,
        OcrHandle: Hlong,
        Class: *const ::std::os::raw::c_char,
        Confidence: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_crop_domain_rel(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Top: Htuple,
        Left: Htuple,
        Bottom: Htuple,
        Right: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn crop_domain_rel(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Top: Hlong,
        Left: Hlong,
        Bottom: Hlong,
        Right: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_ocr_get_features(
        Character: Hobject,
        OcrHandle: Htuple,
        FeatureVector: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_concat_ocr_trainf(SingleFiles: Htuple, ComposedFile: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn concat_ocr_trainf(
        SingleFiles: *const ::std::os::raw::c_char,
        ComposedFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ocr_trainf_image(
        Character: Hobject,
        Class: Htuple,
        TrainingFile: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_ocr_trainf_image(
        Character: Hobject,
        Class: *const ::std::os::raw::c_char,
        TrainingFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_append_ocr_trainf(
        Character: Hobject,
        Image: Hobject,
        Class: Htuple,
        TrainingFile: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn append_ocr_trainf(
        Character: Hobject,
        Image: Hobject,
        Class: *const ::std::os::raw::c_char,
        TrainingFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_trainf_names_protected(
        TrainingFile: Htuple,
        Password: Htuple,
        CharacterNames: *mut Htuple,
        CharacterCount: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr_trainf_names_protected(
        TrainingFile: *const ::std::os::raw::c_char,
        Password: *const ::std::os::raw::c_char,
        CharacterNames: *mut ::std::os::raw::c_char,
        CharacterCount: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_trainf_names(
        TrainingFile: Htuple,
        CharacterNames: *mut Htuple,
        CharacterCount: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr_trainf_names(
        TrainingFile: *const ::std::os::raw::c_char,
        CharacterNames: *mut ::std::os::raw::c_char,
        CharacterCount: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_trainf_select(
        Characters: *mut Hobject,
        TrainingFile: Htuple,
        SearchNames: Htuple,
        FoundNames: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr_trainf_select(
        Characters: *mut Hobject,
        TrainingFile: *const ::std::os::raw::c_char,
        SearchNames: *const ::std::os::raw::c_char,
        FoundNames: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_trainf(
        Characters: *mut Hobject,
        TrainingFile: Htuple,
        CharacterNames: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pruning(Region: Hobject, RegionPrune: *mut Hobject, Length: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn pruning(Region: Hobject, RegionPrune: *mut Hobject, Length: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_boundary(Region: Hobject, RegionBorder: *mut Hobject, BoundaryType: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn boundary(
        Region: Hobject,
        RegionBorder: *mut Hobject,
        BoundaryType: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fitting(
        Region: Hobject,
        StructElements: Hobject,
        RegionFitted: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fitting(Region: Hobject, StructElements: Hobject, RegionFitted: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_struct_elements(
        StructElements: *mut Hobject,
        Type: Htuple,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_struct_elements(
        StructElements: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_transpose_region(
        Region: Hobject,
        Transposed: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn transpose_region(
        Region: Hobject,
        Transposed: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_thinning_seq(
        Region: Hobject,
        RegionThin: *mut Hobject,
        GolayElement: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn thinning_seq(
        Region: Hobject,
        RegionThin: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_thinning_golay(
        Region: Hobject,
        RegionThin: *mut Hobject,
        GolayElement: Htuple,
        Rotation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn thinning_golay(
        Region: Hobject,
        RegionThin: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Rotation: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_thinning(
        Region: Hobject,
        StructElement1: Hobject,
        StructElement2: Hobject,
        RegionThin: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn thinning(
        Region: Hobject,
        StructElement1: Hobject,
        StructElement2: Hobject,
        RegionThin: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_thickening_seq(
        Region: Hobject,
        RegionThick: *mut Hobject,
        GolayElement: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn thickening_seq(
        Region: Hobject,
        RegionThick: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_thickening_golay(
        Region: Hobject,
        RegionThick: *mut Hobject,
        GolayElement: Htuple,
        Rotation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn thickening_golay(
        Region: Hobject,
        RegionThick: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Rotation: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_thickening(
        Region: Hobject,
        StructElement1: Hobject,
        StructElement2: Hobject,
        RegionThick: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn thickening(
        Region: Hobject,
        StructElement1: Hobject,
        StructElement2: Hobject,
        RegionThick: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hit_or_miss_seq(
        Region: Hobject,
        RegionHitMiss: *mut Hobject,
        GolayElement: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hit_or_miss_seq(
        Region: Hobject,
        RegionHitMiss: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hit_or_miss_golay(
        Region: Hobject,
        RegionHitMiss: *mut Hobject,
        GolayElement: Htuple,
        Rotation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hit_or_miss_golay(
        Region: Hobject,
        RegionHitMiss: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Rotation: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hit_or_miss(
        Region: Hobject,
        StructElement1: Hobject,
        StructElement2: Hobject,
        RegionHitMiss: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hit_or_miss(
        Region: Hobject,
        StructElement1: Hobject,
        StructElement2: Hobject,
        RegionHitMiss: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_golay_elements(
        StructElement1: *mut Hobject,
        StructElement2: *mut Hobject,
        GolayElement: Htuple,
        Rotation: Htuple,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn golay_elements(
        StructElement1: *mut Hobject,
        StructElement2: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Rotation: Hlong,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_morph_skiz(
        Region: Hobject,
        RegionSkiz: *mut Hobject,
        Iterations1: Htuple,
        Iterations2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn morph_skiz(
        Region: Hobject,
        RegionSkiz: *mut Hobject,
        Iterations1: Hlong,
        Iterations2: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_morph_skeleton(Region: Hobject, RegionSkeleton: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn morph_skeleton(Region: Hobject, RegionSkeleton: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_morph_hat(
        Region: Hobject,
        StructElement: Hobject,
        RegionMorphHat: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn morph_hat(
        Region: Hobject,
        StructElement: Hobject,
        RegionMorphHat: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_bottom_hat(
        Region: Hobject,
        StructElement: Hobject,
        RegionBottomHat: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn bottom_hat(
        Region: Hobject,
        StructElement: Hobject,
        RegionBottomHat: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_top_hat(Region: Hobject, StructElement: Hobject, RegionTopHat: *mut Hobject)
    -> Herror;
}
unsafe extern "C" {
    pub fn top_hat(Region: Hobject, StructElement: Hobject, RegionTopHat: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_minkowski_sub2(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkSub: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn minkowski_sub2(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkSub: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_minkowski_sub1(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkSub: *mut Hobject,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn minkowski_sub1(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkSub: *mut Hobject,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_minkowski_add2(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkAdd: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn minkowski_add2(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkAdd: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_minkowski_add1(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkAdd: *mut Hobject,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn minkowski_add1(
        Region: Hobject,
        StructElement: Hobject,
        RegionMinkAdd: *mut Hobject,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_closing_rectangle1(
        Region: Hobject,
        RegionClosing: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn closing_rectangle1(
        Region: Hobject,
        RegionClosing: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_closing_golay(
        Region: Hobject,
        RegionClosing: *mut Hobject,
        GolayElement: Htuple,
        Rotation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn closing_golay(
        Region: Hobject,
        RegionClosing: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Rotation: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_closing_circle(Region: Hobject, RegionClosing: *mut Hobject, Radius: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn closing_circle(Region: Hobject, RegionClosing: *mut Hobject, Radius: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_closing(
        Region: Hobject,
        StructElement: Hobject,
        RegionClosing: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn closing(Region: Hobject, StructElement: Hobject, RegionClosing: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_opening_seg(
        Region: Hobject,
        StructElement: Hobject,
        RegionOpening: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn opening_seg(
        Region: Hobject,
        StructElement: Hobject,
        RegionOpening: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_opening_golay(
        Region: Hobject,
        RegionOpening: *mut Hobject,
        GolayElement: Htuple,
        Rotation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn opening_golay(
        Region: Hobject,
        RegionOpening: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Rotation: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_opening_rectangle1(
        Region: Hobject,
        RegionOpening: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn opening_rectangle1(
        Region: Hobject,
        RegionOpening: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_opening_circle(Region: Hobject, RegionOpening: *mut Hobject, Radius: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn opening_circle(Region: Hobject, RegionOpening: *mut Hobject, Radius: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_opening(
        Region: Hobject,
        StructElement: Hobject,
        RegionOpening: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn opening(Region: Hobject, StructElement: Hobject, RegionOpening: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_erosion_seq(
        Region: Hobject,
        RegionErosion: *mut Hobject,
        GolayElement: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn erosion_seq(
        Region: Hobject,
        RegionErosion: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_erosion_golay(
        Region: Hobject,
        RegionErosion: *mut Hobject,
        GolayElement: Htuple,
        Iterations: Htuple,
        Rotation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn erosion_golay(
        Region: Hobject,
        RegionErosion: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Iterations: Hlong,
        Rotation: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_erosion_rectangle1(
        Region: Hobject,
        RegionErosion: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn erosion_rectangle1(
        Region: Hobject,
        RegionErosion: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_erosion_circle(Region: Hobject, RegionErosion: *mut Hobject, Radius: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn erosion_circle(Region: Hobject, RegionErosion: *mut Hobject, Radius: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_erosion2(
        Region: Hobject,
        StructElement: Hobject,
        RegionErosion: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn erosion2(
        Region: Hobject,
        StructElement: Hobject,
        RegionErosion: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_erosion1(
        Region: Hobject,
        StructElement: Hobject,
        RegionErosion: *mut Hobject,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn erosion1(
        Region: Hobject,
        StructElement: Hobject,
        RegionErosion: *mut Hobject,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dilation_seq(
        Region: Hobject,
        RegionDilation: *mut Hobject,
        GolayElement: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dilation_seq(
        Region: Hobject,
        RegionDilation: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dilation_golay(
        Region: Hobject,
        RegionDilation: *mut Hobject,
        GolayElement: Htuple,
        Iterations: Htuple,
        Rotation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dilation_golay(
        Region: Hobject,
        RegionDilation: *mut Hobject,
        GolayElement: *const ::std::os::raw::c_char,
        Iterations: Hlong,
        Rotation: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dilation_rectangle1(
        Region: Hobject,
        RegionDilation: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dilation_rectangle1(
        Region: Hobject,
        RegionDilation: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dilation_circle(
        Region: Hobject,
        RegionDilation: *mut Hobject,
        Radius: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dilation_circle(Region: Hobject, RegionDilation: *mut Hobject, Radius: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_dilation2(
        Region: Hobject,
        StructElement: Hobject,
        RegionDilation: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dilation2(
        Region: Hobject,
        StructElement: Hobject,
        RegionDilation: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dilation1(
        Region: Hobject,
        StructElement: Hobject,
        RegionDilation: *mut Hobject,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dilation1(
        Region: Hobject,
        StructElement: Hobject,
        RegionDilation: *mut Hobject,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_bothat(Image: Hobject, SE: Hobject, ImageBotHat: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_bothat(Image: Hobject, SE: Hobject, ImageBotHat: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_tophat(Image: Hobject, SE: Hobject, ImageTopHat: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_tophat(Image: Hobject, SE: Hobject, ImageTopHat: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_closing(Image: Hobject, SE: Hobject, ImageClosing: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_closing(Image: Hobject, SE: Hobject, ImageClosing: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_opening(Image: Hobject, SE: Hobject, ImageOpening: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_opening(Image: Hobject, SE: Hobject, ImageOpening: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_dilation(Image: Hobject, SE: Hobject, ImageDilation: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_dilation(Image: Hobject, SE: Hobject, ImageDilation: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_erosion(Image: Hobject, SE: Hobject, ImageErosion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_erosion(Image: Hobject, SE: Hobject, ImageErosion: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_gray_se(SE: *mut Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_gray_se(SE: *mut Hobject, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_disc_se(
        SE: *mut Hobject,
        Type: Htuple,
        Width: Htuple,
        Height: Htuple,
        Smax: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_disc_se(
        SE: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
        Smax: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_model_contour(
        Contour: *mut Hobject,
        MetrologyHandle: Htuple,
        Index: Htuple,
        Resolution: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_metrology_object_model_contour(
        Contour: *mut Hobject,
        MetrologyHandle: Hlong,
        Index: Hlong,
        Resolution: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_result_contour(
        Contour: *mut Hobject,
        MetrologyHandle: Htuple,
        Index: Htuple,
        Instance: Htuple,
        Resolution: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_metrology_object_result_contour(
        Contour: *mut Hobject,
        MetrologyHandle: Hlong,
        Index: Hlong,
        Instance: *const ::std::os::raw::c_char,
        Resolution: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_align_metrology_model(
        MetrologyHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Angle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn align_metrology_model(
        MetrologyHandle: Hlong,
        Row: f64,
        Column: f64,
        Angle: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_metrology_object_generic(
        MetrologyHandle: Htuple,
        Shape: Htuple,
        ShapeParam: Htuple,
        MeasureLength1: Htuple,
        MeasureLength2: Htuple,
        MeasureSigma: Htuple,
        MeasureThreshold: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_model_param(
        MetrologyHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_metrology_model_param(
        MetrologyHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_metrology_model_param(
        MetrologyHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_metrology_model_param(
        MetrologyHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_metrology_model(
        SerializedItemHandle: Htuple,
        MetrologyHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_metrology_model(
        SerializedItemHandle: Hlong,
        MetrologyHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_metrology_model(
        MetrologyHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_metrology_model(
        MetrologyHandle: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_transform_metrology_object(
        MetrologyHandle: Htuple,
        Index: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn transform_metrology_object(
        MetrologyHandle: Hlong,
        Index: *const ::std::os::raw::c_char,
        Row: f64,
        Column: f64,
        Phi: f64,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_metrology_model(MetrologyHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_metrology_model(
        MetrologyHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_metrology_model(FileName: Htuple, MetrologyHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_metrology_model(
        FileName: *const ::std::os::raw::c_char,
        MetrologyHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_metrology_model(
        MetrologyHandle: Htuple,
        Index: Htuple,
        CopiedMetrologyHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn copy_metrology_model(
        MetrologyHandle: Hlong,
        Index: *const ::std::os::raw::c_char,
        CopiedMetrologyHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_metrology_object(
        MetrologyHandle: Htuple,
        Index: Htuple,
        CopiedIndices: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn copy_metrology_object(
        MetrologyHandle: Hlong,
        Index: *const ::std::os::raw::c_char,
        CopiedIndices: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_num_instances(
        MetrologyHandle: Htuple,
        Index: Htuple,
        NumInstances: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_metrology_object_num_instances(
        MetrologyHandle: Hlong,
        Index: Hlong,
        NumInstances: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_result(
        MetrologyHandle: Htuple,
        Index: Htuple,
        Instance: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Parameter: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_measures(
        Contours: *mut Hobject,
        MetrologyHandle: Htuple,
        Index: Htuple,
        Transition: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_metrology_model(Image: Hobject, MetrologyHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn apply_metrology_model(Image: Hobject, MetrologyHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_indices(MetrologyHandle: Htuple, Indices: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_metrology_object_indices(MetrologyHandle: Hlong, Indices: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_reset_metrology_object_fuzzy_param(MetrologyHandle: Htuple, Index: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn reset_metrology_object_fuzzy_param(
        MetrologyHandle: Hlong,
        Index: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reset_metrology_object_param(MetrologyHandle: Htuple, Index: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn reset_metrology_object_param(
        MetrologyHandle: Hlong,
        Index: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_fuzzy_param(
        MetrologyHandle: Htuple,
        Index: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_metrology_object_param(
        MetrologyHandle: Htuple,
        Index: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_metrology_object_fuzzy_param(
        MetrologyHandle: Htuple,
        Index: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_metrology_object_param(
        MetrologyHandle: Htuple,
        Index: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_metrology_object_rectangle2_measure(
        MetrologyHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
        MeasureLength1: Htuple,
        MeasureLength2: Htuple,
        MeasureSigma: Htuple,
        MeasureThreshold: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_metrology_object_line_measure(
        MetrologyHandle: Htuple,
        RowBegin: Htuple,
        ColumnBegin: Htuple,
        RowEnd: Htuple,
        ColumnEnd: Htuple,
        MeasureLength1: Htuple,
        MeasureLength2: Htuple,
        MeasureSigma: Htuple,
        MeasureThreshold: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_metrology_object_ellipse_measure(
        MetrologyHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        MeasureLength1: Htuple,
        MeasureLength2: Htuple,
        MeasureSigma: Htuple,
        MeasureThreshold: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_metrology_object_circle_measure(
        MetrologyHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Radius: Htuple,
        MeasureLength1: Htuple,
        MeasureLength2: Htuple,
        MeasureSigma: Htuple,
        MeasureThreshold: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_metrology_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_metrology_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_metrology_model(MetrologyHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_metrology_model(MetrologyHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_metrology_object(MetrologyHandle: Htuple, Index: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_metrology_object(
        MetrologyHandle: Hlong,
        Index: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_metrology_model_image_size(
        MetrologyHandle: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_metrology_model_image_size(
        MetrologyHandle: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_metrology_model(MetrologyHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_metrology_model(MetrologyHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_measure(MeasureHandle: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_measure(MeasureHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_measure(
        SerializedItemHandle: Htuple,
        MeasureHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_measure(SerializedItemHandle: Hlong, MeasureHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_measure(MeasureHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_measure(MeasureHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_measure(FileName: Htuple, MeasureHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_measure(
        FileName: *const ::std::os::raw::c_char,
        MeasureHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_measure_thresh(
        Image: Hobject,
        MeasureHandle: Htuple,
        Sigma: Htuple,
        Threshold: Htuple,
        Select: Htuple,
        RowThresh: *mut Htuple,
        ColumnThresh: *mut Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_measures() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_measures() -> Herror;
}
unsafe extern "C" {
    pub fn T_close_measure(MeasureHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_measure(MeasureHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_measure_projection(
        Image: Hobject,
        MeasureHandle: Htuple,
        GrayValues: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reset_fuzzy_measure(MeasureHandle: Htuple, SetType: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn reset_fuzzy_measure(
        MeasureHandle: Hlong,
        SetType: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_fuzzy_measure_norm_pair(
        MeasureHandle: Htuple,
        PairSize: Htuple,
        SetType: Htuple,
        Function: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_fuzzy_measure(MeasureHandle: Htuple, SetType: Htuple, Function: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_fuzzy_measure_pairing(
        Image: Hobject,
        MeasureHandle: Htuple,
        Sigma: Htuple,
        AmpThresh: Htuple,
        FuzzyThresh: Htuple,
        Transition: Htuple,
        Pairing: Htuple,
        NumPairs: Htuple,
        RowEdgeFirst: *mut Htuple,
        ColumnEdgeFirst: *mut Htuple,
        AmplitudeFirst: *mut Htuple,
        RowEdgeSecond: *mut Htuple,
        ColumnEdgeSecond: *mut Htuple,
        AmplitudeSecond: *mut Htuple,
        RowPairCenter: *mut Htuple,
        ColumnPairCenter: *mut Htuple,
        FuzzyScore: *mut Htuple,
        IntraDistance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fuzzy_measure_pairs(
        Image: Hobject,
        MeasureHandle: Htuple,
        Sigma: Htuple,
        AmpThresh: Htuple,
        FuzzyThresh: Htuple,
        Transition: Htuple,
        RowEdgeFirst: *mut Htuple,
        ColumnEdgeFirst: *mut Htuple,
        AmplitudeFirst: *mut Htuple,
        RowEdgeSecond: *mut Htuple,
        ColumnEdgeSecond: *mut Htuple,
        AmplitudeSecond: *mut Htuple,
        RowEdgeCenter: *mut Htuple,
        ColumnEdgeCenter: *mut Htuple,
        FuzzyScore: *mut Htuple,
        IntraDistance: *mut Htuple,
        InterDistance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fuzzy_measure_pos(
        Image: Hobject,
        MeasureHandle: Htuple,
        Sigma: Htuple,
        AmpThresh: Htuple,
        FuzzyThresh: Htuple,
        Transition: Htuple,
        RowEdge: *mut Htuple,
        ColumnEdge: *mut Htuple,
        Amplitude: *mut Htuple,
        FuzzyScore: *mut Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_measure_pairs(
        Image: Hobject,
        MeasureHandle: Htuple,
        Sigma: Htuple,
        Threshold: Htuple,
        Transition: Htuple,
        Select: Htuple,
        RowEdgeFirst: *mut Htuple,
        ColumnEdgeFirst: *mut Htuple,
        AmplitudeFirst: *mut Htuple,
        RowEdgeSecond: *mut Htuple,
        ColumnEdgeSecond: *mut Htuple,
        AmplitudeSecond: *mut Htuple,
        IntraDistance: *mut Htuple,
        InterDistance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_measure_pos(
        Image: Hobject,
        MeasureHandle: Htuple,
        Sigma: Htuple,
        Threshold: Htuple,
        Transition: Htuple,
        Select: Htuple,
        RowEdge: *mut Htuple,
        ColumnEdge: *mut Htuple,
        Amplitude: *mut Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_translate_measure(MeasureHandle: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn translate_measure(MeasureHandle: Hlong, Row: f64, Column: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_measure_arc(
        CenterRow: Htuple,
        CenterCol: Htuple,
        Radius: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AnnulusRadius: Htuple,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
        MeasureHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_measure_arc(
        CenterRow: f64,
        CenterCol: f64,
        Radius: f64,
        AngleStart: f64,
        AngleExtent: f64,
        AnnulusRadius: f64,
        Width: Hlong,
        Height: Hlong,
        Interpolation: *const ::std::os::raw::c_char,
        MeasureHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_measure_rectangle2(
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
        MeasureHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_measure_rectangle2(
        Row: f64,
        Column: f64,
        Phi: f64,
        Length1: f64,
        Length2: f64,
        Width: Hlong,
        Height: Hlong,
        Interpolation: *const ::std::os::raw::c_char,
        MeasureHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_matrix(SerializedItemHandle: Htuple, MatrixID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_matrix(SerializedItemHandle: Hlong, MatrixID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_matrix(MatrixID: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_matrix(MatrixID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_matrix(FileName: Htuple, MatrixID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_matrix(FileName: *const ::std::os::raw::c_char, MatrixID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_matrix(MatrixID: Htuple, FileFormat: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_matrix(
        MatrixID: Hlong,
        FileFormat: *const ::std::os::raw::c_char,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_orthogonal_decompose_matrix(
        MatrixID: Htuple,
        DecompositionType: Htuple,
        OutputMatricesType: Htuple,
        ComputeOrthogonal: Htuple,
        MatrixOrthogonalID: *mut Htuple,
        MatrixTriangularID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn orthogonal_decompose_matrix(
        MatrixID: Hlong,
        DecompositionType: *const ::std::os::raw::c_char,
        OutputMatricesType: *const ::std::os::raw::c_char,
        ComputeOrthogonal: *const ::std::os::raw::c_char,
        MatrixOrthogonalID: *mut Hlong,
        MatrixTriangularID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decompose_matrix(
        MatrixID: Htuple,
        MatrixType: Htuple,
        Matrix1ID: *mut Htuple,
        Matrix2ID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decompose_matrix(
        MatrixID: Hlong,
        MatrixType: *const ::std::os::raw::c_char,
        Matrix1ID: *mut Hlong,
        Matrix2ID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_svd_matrix(
        MatrixID: Htuple,
        SVDType: Htuple,
        ComputeSingularVectors: Htuple,
        MatrixUID: *mut Htuple,
        MatrixSID: *mut Htuple,
        MatrixVID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn svd_matrix(
        MatrixID: Hlong,
        SVDType: *const ::std::os::raw::c_char,
        ComputeSingularVectors: *const ::std::os::raw::c_char,
        MatrixUID: *mut Hlong,
        MatrixSID: *mut Hlong,
        MatrixVID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_generalized_eigenvalues_general_matrix(
        MatrixAID: Htuple,
        MatrixBID: Htuple,
        ComputeEigenvectors: Htuple,
        EigenvaluesRealID: *mut Htuple,
        EigenvaluesImagID: *mut Htuple,
        EigenvectorsRealID: *mut Htuple,
        EigenvectorsImagID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn generalized_eigenvalues_general_matrix(
        MatrixAID: Hlong,
        MatrixBID: Hlong,
        ComputeEigenvectors: *const ::std::os::raw::c_char,
        EigenvaluesRealID: *mut Hlong,
        EigenvaluesImagID: *mut Hlong,
        EigenvectorsRealID: *mut Hlong,
        EigenvectorsImagID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_generalized_eigenvalues_symmetric_matrix(
        MatrixAID: Htuple,
        MatrixBID: Htuple,
        ComputeEigenvectors: Htuple,
        EigenvaluesID: *mut Htuple,
        EigenvectorsID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn generalized_eigenvalues_symmetric_matrix(
        MatrixAID: Hlong,
        MatrixBID: Hlong,
        ComputeEigenvectors: *const ::std::os::raw::c_char,
        EigenvaluesID: *mut Hlong,
        EigenvectorsID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_eigenvalues_general_matrix(
        MatrixID: Htuple,
        ComputeEigenvectors: Htuple,
        EigenvaluesRealID: *mut Htuple,
        EigenvaluesImagID: *mut Htuple,
        EigenvectorsRealID: *mut Htuple,
        EigenvectorsImagID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn eigenvalues_general_matrix(
        MatrixID: Hlong,
        ComputeEigenvectors: *const ::std::os::raw::c_char,
        EigenvaluesRealID: *mut Hlong,
        EigenvaluesImagID: *mut Hlong,
        EigenvectorsRealID: *mut Hlong,
        EigenvectorsImagID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_eigenvalues_symmetric_matrix(
        MatrixID: Htuple,
        ComputeEigenvectors: Htuple,
        EigenvaluesID: *mut Htuple,
        EigenvectorsID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn eigenvalues_symmetric_matrix(
        MatrixID: Hlong,
        ComputeEigenvectors: *const ::std::os::raw::c_char,
        EigenvaluesID: *mut Hlong,
        EigenvectorsID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_solve_matrix(
        MatrixLHSID: Htuple,
        MatrixLHSType: Htuple,
        Epsilon: Htuple,
        MatrixRHSID: Htuple,
        MatrixResultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn solve_matrix(
        MatrixLHSID: Hlong,
        MatrixLHSType: *const ::std::os::raw::c_char,
        Epsilon: f64,
        MatrixRHSID: Hlong,
        MatrixResultID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_determinant_matrix(MatrixID: Htuple, MatrixType: Htuple, Value: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn determinant_matrix(
        MatrixID: Hlong,
        MatrixType: *const ::std::os::raw::c_char,
        Value: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_invert_matrix_mod(MatrixID: Htuple, MatrixType: Htuple, Epsilon: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn invert_matrix_mod(
        MatrixID: Hlong,
        MatrixType: *const ::std::os::raw::c_char,
        Epsilon: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_invert_matrix(
        MatrixID: Htuple,
        MatrixType: Htuple,
        Epsilon: Htuple,
        MatrixInvID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn invert_matrix(
        MatrixID: Hlong,
        MatrixType: *const ::std::os::raw::c_char,
        Epsilon: f64,
        MatrixInvID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_transpose_matrix_mod(MatrixID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn transpose_matrix_mod(MatrixID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_transpose_matrix(MatrixID: Htuple, MatrixTransposedID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn transpose_matrix(MatrixID: Hlong, MatrixTransposedID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_max_matrix(MatrixID: Htuple, MaxType: Htuple, MatrixMaxID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn max_matrix(
        MatrixID: Hlong,
        MaxType: *const ::std::os::raw::c_char,
        MatrixMaxID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_min_matrix(MatrixID: Htuple, MinType: Htuple, MatrixMinID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn min_matrix(
        MatrixID: Hlong,
        MinType: *const ::std::os::raw::c_char,
        MatrixMinID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pow_matrix_mod(MatrixID: Htuple, MatrixType: Htuple, Power: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn pow_matrix_mod(
        MatrixID: Hlong,
        MatrixType: *const ::std::os::raw::c_char,
        Power: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pow_matrix(
        MatrixID: Htuple,
        MatrixType: Htuple,
        Power: Htuple,
        MatrixPowID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn pow_matrix(
        MatrixID: Hlong,
        MatrixType: *const ::std::os::raw::c_char,
        Power: f64,
        MatrixPowID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pow_element_matrix_mod(MatrixID: Htuple, MatrixExpID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn pow_element_matrix_mod(MatrixID: Hlong, MatrixExpID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_pow_element_matrix(
        MatrixID: Htuple,
        MatrixExpID: Htuple,
        MatrixPowID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn pow_element_matrix(
        MatrixID: Hlong,
        MatrixExpID: Hlong,
        MatrixPowID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pow_scalar_element_matrix_mod(MatrixID: Htuple, Power: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn pow_scalar_element_matrix_mod(MatrixID: Hlong, Power: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_pow_scalar_element_matrix(
        MatrixID: Htuple,
        Power: Htuple,
        MatrixPowID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn pow_scalar_element_matrix(
        MatrixID: Hlong,
        Power: f64,
        MatrixPowID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sqrt_matrix_mod(MatrixID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn sqrt_matrix_mod(MatrixID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_sqrt_matrix(MatrixID: Htuple, MatrixSqrtID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn sqrt_matrix(MatrixID: Hlong, MatrixSqrtID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_abs_matrix_mod(MatrixID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn abs_matrix_mod(MatrixID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_abs_matrix(MatrixID: Htuple, MatrixAbsID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn abs_matrix(MatrixID: Hlong, MatrixAbsID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_norm_matrix(MatrixID: Htuple, NormType: Htuple, Value: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn norm_matrix(
        MatrixID: Hlong,
        NormType: *const ::std::os::raw::c_char,
        Value: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mean_matrix(MatrixID: Htuple, MeanType: Htuple, MatrixMeanID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn mean_matrix(
        MatrixID: Hlong,
        MeanType: *const ::std::os::raw::c_char,
        MatrixMeanID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sum_matrix(MatrixID: Htuple, SumType: Htuple, MatrixSumID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn sum_matrix(
        MatrixID: Hlong,
        SumType: *const ::std::os::raw::c_char,
        MatrixSumID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_div_element_matrix_mod(MatrixAID: Htuple, MatrixBID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn div_element_matrix_mod(MatrixAID: Hlong, MatrixBID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_div_element_matrix(
        MatrixAID: Htuple,
        MatrixBID: Htuple,
        MatrixDivID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn div_element_matrix(
        MatrixAID: Hlong,
        MatrixBID: Hlong,
        MatrixDivID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mult_element_matrix_mod(MatrixAID: Htuple, MatrixBID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn mult_element_matrix_mod(MatrixAID: Hlong, MatrixBID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_mult_element_matrix(
        MatrixAID: Htuple,
        MatrixBID: Htuple,
        MatrixMultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mult_element_matrix(
        MatrixAID: Hlong,
        MatrixBID: Hlong,
        MatrixMultID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_scale_matrix_mod(MatrixID: Htuple, Factor: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn scale_matrix_mod(MatrixID: Hlong, Factor: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_scale_matrix(MatrixID: Htuple, Factor: Htuple, MatrixScaledID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn scale_matrix(MatrixID: Hlong, Factor: f64, MatrixScaledID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_sub_matrix_mod(MatrixAID: Htuple, MatrixBID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn sub_matrix_mod(MatrixAID: Hlong, MatrixBID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_sub_matrix(MatrixAID: Htuple, MatrixBID: Htuple, MatrixSubID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn sub_matrix(MatrixAID: Hlong, MatrixBID: Hlong, MatrixSubID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_matrix_mod(MatrixAID: Htuple, MatrixBID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_matrix_mod(MatrixAID: Hlong, MatrixBID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_matrix(MatrixAID: Htuple, MatrixBID: Htuple, MatrixSumID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_matrix(MatrixAID: Hlong, MatrixBID: Hlong, MatrixSumID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_mult_matrix_mod(MatrixAID: Htuple, MatrixBID: Htuple, MultType: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn mult_matrix_mod(
        MatrixAID: Hlong,
        MatrixBID: Hlong,
        MultType: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mult_matrix(
        MatrixAID: Htuple,
        MatrixBID: Htuple,
        MultType: Htuple,
        MatrixMultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mult_matrix(
        MatrixAID: Hlong,
        MatrixBID: Hlong,
        MultType: *const ::std::os::raw::c_char,
        MatrixMultID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_size_matrix(MatrixID: Htuple, Rows: *mut Htuple, Columns: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_size_matrix(MatrixID: Hlong, Rows: *mut Hlong, Columns: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_repeat_matrix(
        MatrixID: Htuple,
        Rows: Htuple,
        Columns: Htuple,
        MatrixRepeatedID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn repeat_matrix(
        MatrixID: Hlong,
        Rows: Hlong,
        Columns: Hlong,
        MatrixRepeatedID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_matrix(MatrixID: Htuple, MatrixCopyID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn copy_matrix(MatrixID: Hlong, MatrixCopyID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_diagonal_matrix(MatrixID: Htuple, VectorID: Htuple, Diagonal: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_diagonal_matrix(MatrixID: Hlong, VectorID: Hlong, Diagonal: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_diagonal_matrix(
        MatrixID: Htuple,
        Diagonal: Htuple,
        VectorID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_diagonal_matrix(MatrixID: Hlong, Diagonal: Hlong, VectorID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_sub_matrix(
        MatrixID: Htuple,
        MatrixSubID: Htuple,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_sub_matrix(MatrixID: Hlong, MatrixSubID: Hlong, Row: Hlong, Column: Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sub_matrix(
        MatrixID: Htuple,
        Row: Htuple,
        Column: Htuple,
        RowsSub: Htuple,
        ColumnsSub: Htuple,
        MatrixSubID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_sub_matrix(
        MatrixID: Hlong,
        Row: Hlong,
        Column: Hlong,
        RowsSub: Hlong,
        ColumnsSub: Hlong,
        MatrixSubID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_full_matrix(MatrixID: Htuple, Values: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_full_matrix(MatrixID: Hlong, Values: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_full_matrix(MatrixID: Htuple, Values: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_full_matrix(MatrixID: Hlong, Values: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_value_matrix(
        MatrixID: Htuple,
        Row: Htuple,
        Column: Htuple,
        Value: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_value_matrix(MatrixID: Hlong, Row: Hlong, Column: Hlong, Value: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_value_matrix(
        MatrixID: Htuple,
        Row: Htuple,
        Column: Htuple,
        Value: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_value_matrix(MatrixID: Hlong, Row: Hlong, Column: Hlong, Value: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_matrices() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_matrices() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_matrix(MatrixID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_matrix(MatrixID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_matrix(
        Rows: Htuple,
        Columns: Htuple,
        Value: Htuple,
        MatrixID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_matrix(Rows: Hlong, Columns: Hlong, Value: f64, MatrixID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_sample_identifiers() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_sample_identifiers() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_sample_identifier(SampleIdentifier: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_sample_identifier(SampleIdentifier: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_sample_identifier(
        SerializedItemHandle: Htuple,
        SampleIdentifier: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_sample_identifier(
        SerializedItemHandle: Hlong,
        SampleIdentifier: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_sample_identifier(FileName: Htuple, SampleIdentifier: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_sample_identifier(
        FileName: *const ::std::os::raw::c_char,
        SampleIdentifier: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_sample_identifier(
        SampleIdentifier: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_sample_identifier(
        SampleIdentifier: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_sample_identifier(SampleIdentifier: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_sample_identifier(
        SampleIdentifier: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_sample_identifier(
        Image: Hobject,
        SampleIdentifier: Htuple,
        NumResults: Htuple,
        RatingThreshold: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectIdx: *mut Htuple,
        Rating: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_identifier_param(
        SampleIdentifier: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_sample_identifier_param(
        SampleIdentifier: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_sample_identifier_param(
        SampleIdentifier: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_sample_identifier_param(
        SampleIdentifier: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_identifier_object_info(
        SampleIdentifier: Htuple,
        ObjectIdx: Htuple,
        InfoName: Htuple,
        InfoValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_sample_identifier_object_info(
        SampleIdentifier: Hlong,
        ObjectIdx: Hlong,
        InfoName: *const ::std::os::raw::c_char,
        InfoValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_sample_identifier_object_info(
        SampleIdentifier: Htuple,
        ObjectIdx: Htuple,
        InfoName: Htuple,
        InfoValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_sample_identifier_object_info(
        SampleIdentifier: Hlong,
        ObjectIdx: Hlong,
        InfoName: *const ::std::os::raw::c_char,
        InfoValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_sample_identifier_training_data(
        SampleIdentifier: Htuple,
        ObjectIdx: Htuple,
        ObjectSampleIdx: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn remove_sample_identifier_training_data(
        SampleIdentifier: Hlong,
        ObjectIdx: Hlong,
        ObjectSampleIdx: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_sample_identifier_preparation_data(
        SampleIdentifier: Htuple,
        ObjectIdx: Htuple,
        ObjectSampleIdx: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn remove_sample_identifier_preparation_data(
        SampleIdentifier: Hlong,
        ObjectIdx: Hlong,
        ObjectSampleIdx: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_sample_identifier(
        SampleIdentifier: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_sample_identifier_training_data(
        SampleImage: Hobject,
        SampleIdentifier: Htuple,
        ObjectIdx: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectSampleIdx: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_prepare_sample_identifier(
        SampleIdentifier: Htuple,
        RemovePreparationData: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_sample_identifier_preparation_data(
        SampleImage: Hobject,
        SampleIdentifier: Htuple,
        ObjectIdx: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectSampleIdx: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_sample_identifier(
        GenParamName: Htuple,
        GenParamValue: Htuple,
        SampleIdentifier: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_shape_model(SerializedItemHandle: Htuple, ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_shape_model(SerializedItemHandle: Hlong, ModelID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_shape_model(FileName: Htuple, ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_shape_model(FileName: *const ::std::os::raw::c_char, ModelID: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_shape_model(ModelID: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_shape_model(ModelID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_shape_model(ModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_shape_model(ModelID: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_shape_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_shape_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_shape_model(ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_shape_model(ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_shape_model_contours(
        ModelContours: *mut Hobject,
        ModelID: Htuple,
        Level: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_shape_model_contours(
        ModelContours: *mut Hobject,
        ModelID: Hlong,
        Level: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_determine_shape_model_params(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleMin: Htuple,
        ScaleMax: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        Parameters: Htuple,
        ParameterName: *mut Htuple,
        ParameterValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_shape_model_params(
        ModelID: Htuple,
        NumLevels: *mut Htuple,
        AngleStart: *mut Htuple,
        AngleExtent: *mut Htuple,
        AngleStep: *mut Htuple,
        ScaleMin: *mut Htuple,
        ScaleMax: *mut Htuple,
        ScaleStep: *mut Htuple,
        Metric: *mut Htuple,
        MinContrast: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_shape_model_params(
        ModelID: Hlong,
        NumLevels: *mut Hlong,
        AngleStart: *mut f64,
        AngleExtent: *mut f64,
        AngleStep: *mut f64,
        ScaleMin: *mut f64,
        ScaleMax: *mut f64,
        ScaleStep: *mut f64,
        Metric: *mut ::std::os::raw::c_char,
        MinContrast: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_shape_model_origin(
        ModelID: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_shape_model_origin(ModelID: Hlong, Row: *mut f64, Column: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_shape_model_origin(ModelID: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_shape_model_origin(ModelID: Hlong, Row: f64, Column: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_aniso_shape_models(
        Image: Hobject,
        ModelIDs: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        ScaleR: *mut Htuple,
        ScaleC: *mut Htuple,
        Score: *mut Htuple,
        Model: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_scaled_shape_models(
        Image: Hobject,
        ModelIDs: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleMin: Htuple,
        ScaleMax: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Scale: *mut Htuple,
        Score: *mut Htuple,
        Model: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_shape_models(
        Image: Hobject,
        ModelIDs: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Score: *mut Htuple,
        Model: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_aniso_shape_model(
        Image: Hobject,
        ModelID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        ScaleR: *mut Htuple,
        ScaleC: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_scaled_shape_model(
        Image: Hobject,
        ModelID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleMin: Htuple,
        ScaleMax: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Scale: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_shape_model(
        Image: Hobject,
        ModelID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_shape_model_metric(
        Image: Hobject,
        ModelID: Htuple,
        HomMat2D: Htuple,
        Metric: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_shape_model_param(
        ModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_aniso_shape_model_xld(
        Contours: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        MinContrast: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_aniso_shape_model_xld(
        Contours: Hobject,
        NumLevels: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        AngleStep: f64,
        ScaleRMin: f64,
        ScaleRMax: f64,
        ScaleRStep: f64,
        ScaleCMin: f64,
        ScaleCMax: f64,
        ScaleCStep: f64,
        Optimization: *const ::std::os::raw::c_char,
        Metric: *const ::std::os::raw::c_char,
        MinContrast: Hlong,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_scaled_shape_model_xld(
        Contours: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleMin: Htuple,
        ScaleMax: Htuple,
        ScaleStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        MinContrast: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_scaled_shape_model_xld(
        Contours: Hobject,
        NumLevels: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        AngleStep: f64,
        ScaleMin: f64,
        ScaleMax: f64,
        ScaleStep: f64,
        Optimization: *const ::std::os::raw::c_char,
        Metric: *const ::std::os::raw::c_char,
        MinContrast: Hlong,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_shape_model_xld(
        Contours: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        MinContrast: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_shape_model_xld(
        Contours: Hobject,
        NumLevels: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        AngleStep: f64,
        Optimization: *const ::std::os::raw::c_char,
        Metric: *const ::std::os::raw::c_char,
        MinContrast: Hlong,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_aniso_shape_model(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_aniso_shape_model(
        Template: Hobject,
        NumLevels: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        AngleStep: f64,
        ScaleRMin: f64,
        ScaleRMax: f64,
        ScaleRStep: f64,
        ScaleCMin: f64,
        ScaleCMax: f64,
        ScaleCStep: f64,
        Optimization: *const ::std::os::raw::c_char,
        Metric: *const ::std::os::raw::c_char,
        Contrast: Hlong,
        MinContrast: Hlong,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_scaled_shape_model(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleMin: Htuple,
        ScaleMax: Htuple,
        ScaleStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_scaled_shape_model(
        Template: Hobject,
        NumLevels: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        AngleStep: f64,
        ScaleMin: f64,
        ScaleMax: f64,
        ScaleStep: f64,
        Optimization: *const ::std::os::raw::c_char,
        Metric: *const ::std::os::raw::c_char,
        Contrast: Hlong,
        MinContrast: Hlong,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_shape_model(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_shape_model(
        Template: Hobject,
        NumLevels: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        AngleStep: f64,
        Optimization: *const ::std::os::raw::c_char,
        Metric: *const ::std::os::raw::c_char,
        Contrast: Hlong,
        MinContrast: Hlong,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inspect_shape_model(
        Image: Hobject,
        ModelImages: *mut Hobject,
        ModelRegions: *mut Hobject,
        NumLevels: Htuple,
        Contrast: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inspect_shape_model(
        Image: Hobject,
        ModelImages: *mut Hobject,
        ModelRegions: *mut Hobject,
        NumLevels: Hlong,
        Contrast: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_descriptor_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_descriptor_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_descriptor_model(ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_descriptor_model(ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_descriptor_model(
        SerializedItemHandle: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_descriptor_model(SerializedItemHandle: Hlong, ModelID: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_descriptor_model(
        ModelID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_descriptor_model(ModelID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_descriptor_model(FileName: Htuple, ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_descriptor_model(
        FileName: *const ::std::os::raw::c_char,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_descriptor_model(ModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_descriptor_model(
        ModelID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_calib_descriptor_model(
        Image: Hobject,
        ModelID: Htuple,
        DetectorParamName: Htuple,
        DetectorParamValue: Htuple,
        DescriptorParamName: Htuple,
        DescriptorParamValue: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        CamParam: Htuple,
        ScoreType: Htuple,
        Pose: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_uncalib_descriptor_model(
        Image: Hobject,
        ModelID: Htuple,
        DetectorParamName: Htuple,
        DetectorParamValue: Htuple,
        DescriptorParamName: Htuple,
        DescriptorParamValue: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        ScoreType: Htuple,
        HomMat2D: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_descriptor_model_points(
        ModelID: Htuple,
        Set: Htuple,
        Subset: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_descriptor_model_params(
        ModelID: Htuple,
        DetectorType: *mut Htuple,
        DetectorParamName: *mut Htuple,
        DetectorParamValue: *mut Htuple,
        DescriptorParamName: *mut Htuple,
        DescriptorParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_calib_descriptor_model(
        Template: Hobject,
        CamParam: Htuple,
        ReferencePose: Htuple,
        DetectorType: Htuple,
        DetectorParamName: Htuple,
        DetectorParamValue: Htuple,
        DescriptorParamName: Htuple,
        DescriptorParamValue: Htuple,
        Seed: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_uncalib_descriptor_model(
        Template: Hobject,
        DetectorType: Htuple,
        DetectorParamName: Htuple,
        DetectorParamValue: Htuple,
        DescriptorParamName: Htuple,
        DescriptorParamValue: Htuple,
        Seed: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_descriptor_model_results(
        ModelID: Htuple,
        ObjectID: Htuple,
        ResultNames: Htuple,
        Results: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_descriptor_model_results(
        ModelID: Hlong,
        ObjectID: Hlong,
        ResultNames: *const ::std::os::raw::c_char,
        Results: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_descriptor_model_origin(
        ModelID: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_descriptor_model_origin(ModelID: Hlong, Row: *mut f64, Column: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_descriptor_model_origin(ModelID: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_descriptor_model_origin(ModelID: Hlong, Row: f64, Column: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deformable_model_origin(
        ModelID: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_deformable_model_origin(ModelID: Hlong, Row: *mut f64, Column: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_deformable_model_origin(ModelID: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_deformable_model_origin(ModelID: Hlong, Row: f64, Column: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_deformable_model_param(
        ModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deformable_model_params(
        ModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_deformable_model_params(
        ModelID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deformable_model_contours(
        ModelContours: *mut Hobject,
        ModelID: Htuple,
        Level: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_deformable_model_contours(
        ModelContours: *mut Hobject,
        ModelID: Hlong,
        Level: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_determine_deformable_model_params(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleMin: Htuple,
        ScaleMax: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Parameters: Htuple,
        ParameterName: *mut Htuple,
        ParameterValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_deformable_model(
        SerializedItemHandle: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_deformable_model(SerializedItemHandle: Hlong, ModelID: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_deformable_model(
        ModelID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_deformable_model(ModelID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_deformable_model(FileName: Htuple, ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_deformable_model(
        FileName: *const ::std::os::raw::c_char,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_deformable_model(ModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_deformable_model(
        ModelID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_deformable_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_deformable_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_deformable_model(ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_deformable_model(ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_local_deformable_model(
        Image: Hobject,
        ImageRectified: *mut Hobject,
        VectorField: *mut Hobject,
        DeformedContours: *mut Hobject,
        ModelID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        ResultType: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Score: *mut Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_planar_calib_deformable_model(
        Image: Hobject,
        ModelID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Pose: *mut Htuple,
        CovPose: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_planar_uncalib_deformable_model(
        Image: Hobject,
        ModelID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        NumLevels: Htuple,
        Greediness: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        HomMat2D: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_local_deformable_model_metric(
        Image: Hobject,
        VectorField: Hobject,
        ModelID: Htuple,
        Metric: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_local_deformable_model_metric(
        Image: Hobject,
        VectorField: Hobject,
        ModelID: Hlong,
        Metric: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_planar_calib_deformable_model_metric(
        Image: Hobject,
        ModelID: Htuple,
        Pose: Htuple,
        Metric: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_planar_uncalib_deformable_model_metric(
        Image: Hobject,
        ModelID: Htuple,
        HomMat2D: Htuple,
        Metric: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_local_deformable_model_xld(
        Contours: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_planar_calib_deformable_model_xld(
        Contours: Hobject,
        CamParam: Htuple,
        ReferencePose: Htuple,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_planar_uncalib_deformable_model_xld(
        Contours: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_local_deformable_model(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_planar_calib_deformable_model(
        Template: Hobject,
        CamParam: Htuple,
        ReferencePose: Htuple,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_planar_uncalib_deformable_model(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        ScaleRMin: Htuple,
        ScaleRMax: Htuple,
        ScaleRStep: Htuple,
        ScaleCMin: Htuple,
        ScaleCMax: Htuple,
        ScaleCStep: Htuple,
        Optimization: Htuple,
        Metric: Htuple,
        Contrast: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_ncc_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_ncc_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_ncc_model(ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_ncc_model(ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_ncc_model(SerializedItemHandle: Htuple, ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_ncc_model(SerializedItemHandle: Hlong, ModelID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_ncc_model(ModelID: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_ncc_model(ModelID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ncc_model(FileName: Htuple, ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_ncc_model(FileName: *const ::std::os::raw::c_char, ModelID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_ncc_model(ModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_ncc_model(ModelID: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_determine_ncc_model_params(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        Metric: Htuple,
        Parameters: Htuple,
        ParameterName: *mut Htuple,
        ParameterValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_ncc_model_params(
        ModelID: Htuple,
        NumLevels: *mut Htuple,
        AngleStart: *mut Htuple,
        AngleExtent: *mut Htuple,
        AngleStep: *mut Htuple,
        Metric: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_ncc_model_params(
        ModelID: Hlong,
        NumLevels: *mut Hlong,
        AngleStart: *mut f64,
        AngleExtent: *mut f64,
        AngleStep: *mut f64,
        Metric: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_ncc_model_origin(ModelID: Htuple, Row: *mut Htuple, Column: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn get_ncc_model_origin(ModelID: Hlong, Row: *mut f64, Column: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_ncc_model_origin(ModelID: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_ncc_model_origin(ModelID: Hlong, Row: f64, Column: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_ncc_model(
        Image: Hobject,
        ModelID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_ncc_model_param(
        ModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_ncc_model(
        Template: Hobject,
        NumLevels: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        AngleStep: Htuple,
        Metric: Htuple,
        ModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_ncc_model(
        Template: Hobject,
        NumLevels: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        AngleStep: f64,
        Metric: *const ::std::os::raw::c_char,
        ModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_found_component_model(
        FoundComponents: *mut Hobject,
        ComponentModelID: Htuple,
        ModelStart: Htuple,
        ModelEnd: Htuple,
        RowComp: Htuple,
        ColumnComp: Htuple,
        AngleComp: Htuple,
        ScoreComp: Htuple,
        ModelComp: Htuple,
        ModelMatch: Htuple,
        MarkOrientation: Htuple,
        RowCompInst: *mut Htuple,
        ColumnCompInst: *mut Htuple,
        AngleCompInst: *mut Htuple,
        ScoreCompInst: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_found_component_model(
        FoundComponents: *mut Hobject,
        ComponentModelID: Hlong,
        ModelStart: Hlong,
        ModelEnd: Hlong,
        RowComp: f64,
        ColumnComp: f64,
        AngleComp: f64,
        ScoreComp: f64,
        ModelComp: Hlong,
        ModelMatch: Hlong,
        MarkOrientation: *const ::std::os::raw::c_char,
        RowCompInst: *mut f64,
        ColumnCompInst: *mut f64,
        AngleCompInst: *mut f64,
        ScoreCompInst: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_component_model(
        Image: Hobject,
        ComponentModelID: Htuple,
        RootComponent: Htuple,
        AngleStartRoot: Htuple,
        AngleExtentRoot: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        IfRootNotFound: Htuple,
        IfComponentNotFound: Htuple,
        PosePrediction: Htuple,
        MinScoreComp: Htuple,
        SubPixelComp: Htuple,
        NumLevelsComp: Htuple,
        GreedinessComp: Htuple,
        ModelStart: *mut Htuple,
        ModelEnd: *mut Htuple,
        Score: *mut Htuple,
        RowComp: *mut Htuple,
        ColumnComp: *mut Htuple,
        AngleComp: *mut Htuple,
        ScoreComp: *mut Htuple,
        ModelComp: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn find_component_model(
        Image: Hobject,
        ComponentModelID: Hlong,
        RootComponent: Hlong,
        AngleStartRoot: f64,
        AngleExtentRoot: f64,
        MinScore: f64,
        NumMatches: Hlong,
        MaxOverlap: f64,
        IfRootNotFound: *const ::std::os::raw::c_char,
        IfComponentNotFound: *const ::std::os::raw::c_char,
        PosePrediction: *const ::std::os::raw::c_char,
        MinScoreComp: f64,
        SubPixelComp: *const ::std::os::raw::c_char,
        NumLevelsComp: Hlong,
        GreedinessComp: f64,
        ModelStart: *mut Hlong,
        ModelEnd: *mut Hlong,
        Score: *mut f64,
        RowComp: *mut f64,
        ColumnComp: *mut f64,
        AngleComp: *mut f64,
        ScoreComp: *mut f64,
        ModelComp: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_component_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_component_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_component_model(ComponentModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_component_model(ComponentModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_component_model_tree(
        Tree: *mut Hobject,
        Relations: *mut Hobject,
        ComponentModelID: Htuple,
        RootComponent: Htuple,
        Image: Htuple,
        StartNode: *mut Htuple,
        EndNode: *mut Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
        AngleStart: *mut Htuple,
        AngleExtent: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_component_model_tree(
        Tree: *mut Hobject,
        Relations: *mut Hobject,
        ComponentModelID: Hlong,
        RootComponent: Hlong,
        Image: *const ::std::os::raw::c_char,
        StartNode: *mut Hlong,
        EndNode: *mut Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Length1: *mut f64,
        Length2: *mut f64,
        AngleStart: *mut f64,
        AngleExtent: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_component_model_params(
        ComponentModelID: Htuple,
        MinScoreComp: *mut Htuple,
        RootRanking: *mut Htuple,
        ShapeModelIDs: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_component_model_params(
        ComponentModelID: Hlong,
        MinScoreComp: *mut f64,
        RootRanking: *mut Hlong,
        ShapeModelIDs: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_component_model(
        SerializedItemHandle: Htuple,
        ComponentModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_component_model(
        SerializedItemHandle: Hlong,
        ComponentModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_component_model(
        ComponentModelID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_component_model(
        ComponentModelID: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_component_model(FileName: Htuple, ComponentModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_component_model(
        FileName: *const ::std::os::raw::c_char,
        ComponentModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_component_model(ComponentModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_component_model(
        ComponentModelID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_component_model(
        ModelImage: Hobject,
        ComponentRegions: Hobject,
        VariationRow: Htuple,
        VariationColumn: Htuple,
        VariationAngle: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        ContrastLowComp: Htuple,
        ContrastHighComp: Htuple,
        MinSizeComp: Htuple,
        MinContrastComp: Htuple,
        MinScoreComp: Htuple,
        NumLevelsComp: Htuple,
        AngleStepComp: Htuple,
        OptimizationComp: Htuple,
        MetricComp: Htuple,
        PregenerationComp: Htuple,
        ComponentModelID: *mut Htuple,
        RootRanking: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_component_model(
        ModelImage: Hobject,
        ComponentRegions: Hobject,
        VariationRow: Hlong,
        VariationColumn: Hlong,
        VariationAngle: f64,
        AngleStart: f64,
        AngleExtent: f64,
        ContrastLowComp: Hlong,
        ContrastHighComp: Hlong,
        MinSizeComp: Hlong,
        MinContrastComp: Hlong,
        MinScoreComp: f64,
        NumLevelsComp: Hlong,
        AngleStepComp: f64,
        OptimizationComp: *const ::std::os::raw::c_char,
        MetricComp: *const ::std::os::raw::c_char,
        PregenerationComp: *const ::std::os::raw::c_char,
        ComponentModelID: *mut Hlong,
        RootRanking: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_trained_component_model(
        ComponentTrainingID: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        MinContrastComp: Htuple,
        MinScoreComp: Htuple,
        NumLevelsComp: Htuple,
        AngleStepComp: Htuple,
        OptimizationComp: Htuple,
        MetricComp: Htuple,
        PregenerationComp: Htuple,
        ComponentModelID: *mut Htuple,
        RootRanking: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_trained_component_model(
        ComponentTrainingID: Hlong,
        AngleStart: f64,
        AngleExtent: f64,
        MinContrastComp: Hlong,
        MinScoreComp: f64,
        NumLevelsComp: Hlong,
        AngleStepComp: f64,
        OptimizationComp: *const ::std::os::raw::c_char,
        MetricComp: *const ::std::os::raw::c_char,
        PregenerationComp: *const ::std::os::raw::c_char,
        ComponentModelID: *mut Hlong,
        RootRanking: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_training_components() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_training_components() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_training_components(ComponentTrainingID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_training_components(ComponentTrainingID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_component_relations(
        Relations: *mut Hobject,
        ComponentTrainingID: Htuple,
        ReferenceComponent: Htuple,
        Image: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
        AngleStart: *mut Htuple,
        AngleExtent: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_component_relations(
        Relations: *mut Hobject,
        ComponentTrainingID: Hlong,
        ReferenceComponent: Hlong,
        Image: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Length1: *mut f64,
        Length2: *mut f64,
        AngleStart: *mut f64,
        AngleExtent: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_training_components(
        TrainingComponents: *mut Hobject,
        ComponentTrainingID: Htuple,
        Components: Htuple,
        Image: Htuple,
        MarkOrientation: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_training_components(
        TrainingComponents: *mut Hobject,
        ComponentTrainingID: Hlong,
        Components: *const ::std::os::raw::c_char,
        Image: *const ::std::os::raw::c_char,
        MarkOrientation: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
        Angle: *mut f64,
        Score: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_modify_component_relations(
        ComponentTrainingID: Htuple,
        ReferenceComponent: Htuple,
        ToleranceComponent: Htuple,
        PositionTolerance: Htuple,
        AngleTolerance: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn modify_component_relations(
        ComponentTrainingID: Hlong,
        ReferenceComponent: *const ::std::os::raw::c_char,
        ToleranceComponent: *const ::std::os::raw::c_char,
        PositionTolerance: f64,
        AngleTolerance: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_training_components(
        SerializedItemHandle: Htuple,
        ComponentTrainingID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_training_components(
        SerializedItemHandle: Hlong,
        ComponentTrainingID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_training_components(
        ComponentTrainingID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_training_components(
        ComponentTrainingID: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_training_components(FileName: Htuple, ComponentTrainingID: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn read_training_components(
        FileName: *const ::std::os::raw::c_char,
        ComponentTrainingID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_training_components(ComponentTrainingID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_training_components(
        ComponentTrainingID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_cluster_model_components(
        TrainingImages: Hobject,
        ModelComponents: *mut Hobject,
        ComponentTrainingID: Htuple,
        AmbiguityCriterion: Htuple,
        MaxContourOverlap: Htuple,
        ClusterThreshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn cluster_model_components(
        TrainingImages: Hobject,
        ModelComponents: *mut Hobject,
        ComponentTrainingID: Hlong,
        AmbiguityCriterion: *const ::std::os::raw::c_char,
        MaxContourOverlap: f64,
        ClusterThreshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inspect_clustered_components(
        ModelComponents: *mut Hobject,
        ComponentTrainingID: Htuple,
        AmbiguityCriterion: Htuple,
        MaxContourOverlap: Htuple,
        ClusterThreshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inspect_clustered_components(
        ModelComponents: *mut Hobject,
        ComponentTrainingID: Hlong,
        AmbiguityCriterion: *const ::std::os::raw::c_char,
        MaxContourOverlap: f64,
        ClusterThreshold: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_model_components(
        ModelImage: Hobject,
        InitialComponents: Hobject,
        TrainingImages: Hobject,
        ModelComponents: *mut Hobject,
        ContrastLow: Htuple,
        ContrastHigh: Htuple,
        MinSize: Htuple,
        MinScore: Htuple,
        SearchRowTol: Htuple,
        SearchColumnTol: Htuple,
        SearchAngleTol: Htuple,
        TrainingEmphasis: Htuple,
        AmbiguityCriterion: Htuple,
        MaxContourOverlap: Htuple,
        ClusterThreshold: Htuple,
        ComponentTrainingID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn train_model_components(
        ModelImage: Hobject,
        InitialComponents: Hobject,
        TrainingImages: Hobject,
        ModelComponents: *mut Hobject,
        ContrastLow: Hlong,
        ContrastHigh: Hlong,
        MinSize: Hlong,
        MinScore: f64,
        SearchRowTol: Hlong,
        SearchColumnTol: Hlong,
        SearchAngleTol: f64,
        TrainingEmphasis: *const ::std::os::raw::c_char,
        AmbiguityCriterion: *const ::std::os::raw::c_char,
        MaxContourOverlap: f64,
        ClusterThreshold: f64,
        ComponentTrainingID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_initial_components(
        ModelImage: Hobject,
        InitialComponents: *mut Hobject,
        ContrastLow: Htuple,
        ContrastHigh: Htuple,
        MinSize: Htuple,
        Mode: Htuple,
        GenericName: Htuple,
        GenericValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_initial_components(
        ModelImage: Hobject,
        InitialComponents: *mut Hobject,
        ContrastLow: Hlong,
        ContrastHigh: Hlong,
        MinSize: Hlong,
        Mode: *const ::std::os::raw::c_char,
        GenericName: *const ::std::os::raw::c_char,
        GenericValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deformable_surface_matching_result(
        DeformableSurfaceMatchingResult: Htuple,
        ResultName: Htuple,
        ResultIndex: Htuple,
        ResultValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_deformable_surface_matching_result(
        DeformableSurfaceMatchingResult: Hlong,
        ResultName: *const ::std::os::raw::c_char,
        ResultIndex: Hlong,
        ResultValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_deformable_surface_matching_result(
        DeformableSurfaceMatchingResult: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn clear_deformable_surface_matching_result(
        DeformableSurfaceMatchingResult: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_deformable_surface_model(DeformableSurfaceModel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_deformable_surface_model(DeformableSurfaceModel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_deformable_surface_model(
        SerializedItemHandle: Htuple,
        DeformableSurfaceModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_deformable_surface_model(
        SerializedItemHandle: Hlong,
        DeformableSurfaceModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_deformable_surface_model(
        DeformableSurfaceModel: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_deformable_surface_model(
        DeformableSurfaceModel: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_deformable_surface_model(
        FileName: Htuple,
        DeformableSurfaceModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_deformable_surface_model(
        FileName: *const ::std::os::raw::c_char,
        DeformableSurfaceModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_deformable_surface_model(
        DeformableSurfaceModel: Htuple,
        FileName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_deformable_surface_model(
        DeformableSurfaceModel: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_refine_deformable_surface_model(
        DeformableSurfaceModel: Htuple,
        ObjectModel3D: Htuple,
        RelSamplingDistance: Htuple,
        InitialDeformationObjectModel3D: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Score: *mut Htuple,
        DeformableSurfaceMatchingResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn refine_deformable_surface_model(
        DeformableSurfaceModel: Hlong,
        ObjectModel3D: Hlong,
        RelSamplingDistance: f64,
        InitialDeformationObjectModel3D: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        Score: *mut f64,
        DeformableSurfaceMatchingResult: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_deformable_surface_model(
        DeformableSurfaceModel: Htuple,
        ObjectModel3D: Htuple,
        RelSamplingDistance: Htuple,
        MinScore: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Score: *mut Htuple,
        DeformableSurfaceMatchingResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deformable_surface_model_param(
        DeformableSurfaceModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_deformable_surface_model_param(
        DeformableSurfaceModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_deformable_surface_model_reference_point(
        DeformableSurfaceModel: Htuple,
        ReferencePointX: Htuple,
        ReferencePointY: Htuple,
        ReferencePointZ: Htuple,
        ReferencePointIndex: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_deformable_surface_model_reference_point(
        DeformableSurfaceModel: Hlong,
        ReferencePointX: f64,
        ReferencePointY: f64,
        ReferencePointZ: f64,
        ReferencePointIndex: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_deformable_surface_model_sample(
        DeformableSurfaceModel: Htuple,
        ObjectModel3D: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_deformable_surface_model_sample(
        DeformableSurfaceModel: Hlong,
        ObjectModel3D: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_deformable_surface_model(
        ObjectModel3D: Htuple,
        RelSamplingDistance: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DeformableSurfaceModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_deformable_surface_model(
        ObjectModel3D: Hlong,
        RelSamplingDistance: f64,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        DeformableSurfaceModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_surface_matching_result(
        SurfaceMatchingResultID: Htuple,
        ResultName: Htuple,
        ResultIndex: Htuple,
        ResultValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_surface_matching_result(
        SurfaceMatchingResultID: Hlong,
        ResultName: *const ::std::os::raw::c_char,
        ResultIndex: Hlong,
        ResultValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_surface_matching_results() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_surface_matching_results() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_surface_matching_result(SurfaceMatchingResultID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_surface_matching_result(SurfaceMatchingResultID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_surface_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_surface_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_surface_model(SurfaceModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_surface_model(SurfaceModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_surface_model(
        SerializedItemHandle: Htuple,
        SurfaceModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_surface_model(
        SerializedItemHandle: Hlong,
        SurfaceModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_surface_model(
        SurfaceModelID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_surface_model(
        SurfaceModelID: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_surface_model(FileName: Htuple, SurfaceModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_surface_model(
        FileName: *const ::std::os::raw::c_char,
        SurfaceModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_surface_model(SurfaceModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_surface_model(
        SurfaceModelID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_refine_surface_model_pose(
        SurfaceModelID: Htuple,
        ObjectModel3D: Htuple,
        InitialPose: Htuple,
        MinScore: Htuple,
        ReturnResultHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Pose: *mut Htuple,
        Score: *mut Htuple,
        SurfaceMatchingResultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_surface_model(
        SurfaceModelID: Htuple,
        ObjectModel3D: Htuple,
        RelSamplingDistance: Htuple,
        KeyPointFraction: Htuple,
        MinScore: Htuple,
        ReturnResultHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Pose: *mut Htuple,
        Score: *mut Htuple,
        SurfaceMatchingResultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_surface_model_param(
        SurfaceModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_surface_model_param(
        SurfaceModelID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_surface_model(
        ObjectModel3D: Htuple,
        RelSamplingDistance: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        SurfaceModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_surface_model(
        ObjectModel3D: Hlong,
        RelSamplingDistance: f64,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        SurfaceModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_cam_pose_look_at_point(
        CamPosX: Htuple,
        CamPosY: Htuple,
        CamPosZ: Htuple,
        LookAtX: Htuple,
        LookAtY: Htuple,
        LookAtZ: Htuple,
        RefPlaneNormal: Htuple,
        CamRoll: Htuple,
        CamPose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convert_point_3d_spher_to_cart(
        Longitude: Htuple,
        Latitude: Htuple,
        Radius: Htuple,
        EquatPlaneNormal: Htuple,
        ZeroMeridian: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convert_point_3d_spher_to_cart(
        Longitude: f64,
        Latitude: f64,
        Radius: f64,
        EquatPlaneNormal: *const ::std::os::raw::c_char,
        ZeroMeridian: *const ::std::os::raw::c_char,
        X: *mut f64,
        Y: *mut f64,
        Z: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convert_point_3d_cart_to_spher(
        X: Htuple,
        Y: Htuple,
        Z: Htuple,
        EquatPlaneNormal: Htuple,
        ZeroMeridian: Htuple,
        Longitude: *mut Htuple,
        Latitude: *mut Htuple,
        Radius: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convert_point_3d_cart_to_spher(
        X: f64,
        Y: f64,
        Z: f64,
        EquatPlaneNormal: *const ::std::os::raw::c_char,
        ZeroMeridian: *const ::std::os::raw::c_char,
        Longitude: *mut f64,
        Latitude: *mut f64,
        Radius: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_shape_model_3d() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_shape_model_3d() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_shape_model_3d(ShapeModel3DID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_shape_model_3d(ShapeModel3DID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_shape_model_3d(
        SerializedItemHandle: Htuple,
        ShapeModel3DID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_shape_model_3d(
        SerializedItemHandle: Hlong,
        ShapeModel3DID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_shape_model_3d(
        ShapeModel3DID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_shape_model_3d(
        ShapeModel3DID: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_shape_model_3d(FileName: Htuple, ShapeModel3DID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_shape_model_3d(
        FileName: *const ::std::os::raw::c_char,
        ShapeModel3DID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_shape_model_3d(ShapeModel3DID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_shape_model_3d(
        ShapeModel3DID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trans_pose_shape_model_3d(
        ShapeModel3DID: Htuple,
        PoseIn: Htuple,
        Transformation: Htuple,
        PoseOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_project_shape_model_3d(
        ModelContours: *mut Hobject,
        ShapeModel3DID: Htuple,
        CamParam: Htuple,
        Pose: Htuple,
        HiddenSurfaceRemoval: Htuple,
        MinFaceAngle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_shape_model_3d_contours(
        ModelContours: *mut Hobject,
        ShapeModel3DID: Htuple,
        Level: Htuple,
        View: Htuple,
        ViewPose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_shape_model_3d_params(
        ShapeModel3DID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_shape_model_3d_params(
        ShapeModel3DID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_shape_model_3d(
        Image: Hobject,
        ShapeModel3DID: Htuple,
        MinScore: Htuple,
        Greediness: Htuple,
        NumLevels: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Pose: *mut Htuple,
        CovPose: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_shape_model_3d(
        ObjectModel3D: Htuple,
        CamParam: Htuple,
        RefRotX: Htuple,
        RefRotY: Htuple,
        RefRotZ: Htuple,
        OrderOfRotation: Htuple,
        LongitudeMin: Htuple,
        LongitudeMax: Htuple,
        LatitudeMin: Htuple,
        LatitudeMax: Htuple,
        CamRollMin: Htuple,
        CamRollMax: Htuple,
        DistMin: Htuple,
        DistMax: Htuple,
        MinContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ShapeModel3DID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_simplify_object_model_3d(
        ObjectModel3D: Htuple,
        Method: Htuple,
        Amount: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        SimplifiedObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_object_model_3d(
        ObjectModel3DFrom: Htuple,
        ObjectModel3DTo: Htuple,
        Pose: Htuple,
        MaxDistance: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_union_object_model_3d(
        ObjectModels3D: Htuple,
        Method: Htuple,
        UnionObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn union_object_model_3d(
        ObjectModels3D: Hlong,
        Method: *const ::std::os::raw::c_char,
        UnionObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_object_model_3d_attrib_mod(
        ObjectModel3D: Htuple,
        AttribName: Htuple,
        AttachExtAttribTo: Htuple,
        AttribValues: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_object_model_3d_attrib_mod(
        ObjectModel3D: Hlong,
        AttribName: *const ::std::os::raw::c_char,
        AttachExtAttribTo: *const ::std::os::raw::c_char,
        AttribValues: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_object_model_3d_attrib(
        ObjectModel3D: Htuple,
        AttribName: Htuple,
        AttachExtAttribTo: Htuple,
        AttribValues: Htuple,
        ObjectModel3DOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_object_model_3d_attrib(
        ObjectModel3D: Hlong,
        AttribName: *const ::std::os::raw::c_char,
        AttachExtAttribTo: *const ::std::os::raw::c_char,
        AttribValues: f64,
        ObjectModel3DOut: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_empty_object_model_3d(EmptyObjectModel3D: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn gen_empty_object_model_3d(EmptyObjectModel3D: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_sample_object_model_3d(
        ObjectModel3D: Htuple,
        Method: Htuple,
        SamplingParam: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        SampledObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_register_object_model_3d_global(
        ObjectModels3D: Htuple,
        HomMats3D: Htuple,
        From: Htuple,
        To: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        HomMats3DOut: *mut Htuple,
        Scores: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_register_object_model_3d_pair(
        ObjectModel3D1: Htuple,
        ObjectModel3D2: Htuple,
        Method: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Pose: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_object_model_3d_from_points(
        X: Htuple,
        Y: Htuple,
        Z: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_object_model_3d_from_points(
        X: f64,
        Y: f64,
        Z: f64,
        ObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_box_object_model_3d(
        Pose: Htuple,
        LengthX: Htuple,
        LengthY: Htuple,
        LengthZ: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_plane_object_model_3d(
        Pose: Htuple,
        XExtent: Htuple,
        YExtent: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_sphere_object_model_3d_center(
        X: Htuple,
        Y: Htuple,
        Z: Htuple,
        Radius: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_sphere_object_model_3d_center(
        X: f64,
        Y: f64,
        Z: f64,
        Radius: f64,
        ObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_sphere_object_model_3d(
        Pose: Htuple,
        Radius: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_cylinder_object_model_3d(
        Pose: Htuple,
        Radius: Htuple,
        MinExtent: Htuple,
        MaxExtent: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_bounding_box_object_model_3d(
        ObjectModel3D: Htuple,
        Type: Htuple,
        Pose: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
        Length3: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_sphere_object_model_3d(
        ObjectModel3D: Htuple,
        CenterPoint: *mut Htuple,
        Radius: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersect_plane_object_model_3d(
        ObjectModel3D: Htuple,
        Plane: Htuple,
        ObjectModel3DIntersection: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convex_hull_object_model_3d(
        ObjectModel3D: Htuple,
        ObjectModel3DConvexHull: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convex_hull_object_model_3d(
        ObjectModel3D: Hlong,
        ObjectModel3DConvexHull: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_object_model_3d(
        ObjectModel3D: Htuple,
        Feature: Htuple,
        Operation: Htuple,
        MinValue: Htuple,
        MaxValue: Htuple,
        ObjectModel3DSelected: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_object_model_3d(
        ObjectModel3D: Hlong,
        Feature: *const ::std::os::raw::c_char,
        Operation: *const ::std::os::raw::c_char,
        MinValue: f64,
        MaxValue: f64,
        ObjectModel3DSelected: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_area_object_model_3d(ObjectModel3D: Htuple, Area: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn area_object_model_3d(ObjectModel3D: Hlong, Area: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_max_diameter_object_model_3d(ObjectModel3D: Htuple, Diameter: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn max_diameter_object_model_3d(ObjectModel3D: Hlong, Diameter: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_object_model_3d(
        ObjectModel3D: Htuple,
        MomentsToCalculate: Htuple,
        Moments: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_object_model_3d(
        ObjectModel3D: Hlong,
        MomentsToCalculate: *const ::std::os::raw::c_char,
        Moments: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_volume_object_model_3d_relative_to_plane(
        ObjectModel3D: Htuple,
        Plane: Htuple,
        Mode: Htuple,
        UseFaceOrientation: Htuple,
        Volume: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reduce_object_model_3d_by_view(
        Region: Hobject,
        ObjectModel3D: Htuple,
        CamParam: Htuple,
        Pose: Htuple,
        ObjectModel3DReduced: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_connection_object_model_3d(
        ObjectModel3D: Htuple,
        Feature: Htuple,
        Value: Htuple,
        ObjectModel3DConnected: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_points_object_model_3d(
        ObjectModel3D: Htuple,
        Attrib: Htuple,
        MinValue: Htuple,
        MaxValue: Htuple,
        ObjectModel3DThresholded: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_points_object_model_3d(
        ObjectModel3D: Hlong,
        Attrib: *const ::std::os::raw::c_char,
        MinValue: f64,
        MaxValue: f64,
        ObjectModel3DThresholded: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_disp_object_model_3d_info(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Information: Htuple,
        Value: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_disp_object_model_3d_info(
        WindowHandle: Hlong,
        Row: f64,
        Column: f64,
        Information: *const ::std::os::raw::c_char,
        Value: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_render_object_model_3d(
        Image: *mut Hobject,
        ObjectModel3D: Htuple,
        CamParam: Htuple,
        Pose: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_object_model_3d(
        WindowHandle: Htuple,
        ObjectModel3D: Htuple,
        CamParam: Htuple,
        Pose: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_object_model_3d(
        ObjectModel3D: Htuple,
        Attributes: Htuple,
        CopiedObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn copy_object_model_3d(
        ObjectModel3D: Hlong,
        Attributes: *const ::std::os::raw::c_char,
        CopiedObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_prepare_object_model_3d(
        ObjectModel3D: Htuple,
        Purpose: Htuple,
        OverwriteData: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_object_model_3d_to_xyz(
        X: *mut Hobject,
        Y: *mut Hobject,
        Z: *mut Hobject,
        ObjectModel3D: Htuple,
        Type: Htuple,
        CamParam: Htuple,
        Pose: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_xyz_to_object_model_3d(
        X: Hobject,
        Y: Hobject,
        Z: Hobject,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn xyz_to_object_model_3d(
        X: Hobject,
        Y: Hobject,
        Z: Hobject,
        ObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_object_model_3d_params(
        ObjectModel3D: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_project_object_model_3d(
        ModelContours: *mut Hobject,
        ObjectModel3D: Htuple,
        CamParam: Htuple,
        Pose: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rigid_trans_object_model_3d(
        ObjectModel3D: Htuple,
        Pose: Htuple,
        ObjectModel3DRigidTrans: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_object_model_3d(
        ObjectModel3D: Htuple,
        HomMat3D: Htuple,
        ObjectModel3DProjectiveTrans: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_object_model_3d(
        ObjectModel3D: Htuple,
        HomMat3D: Htuple,
        ObjectModel3DAffineTrans: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_object_model_3d() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_object_model_3d() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_object_model_3d(ObjectModel3D: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_object_model_3d(ObjectModel3D: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_object_model_3d(
        ObjectModel3D: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_object_model_3d(
        ObjectModel3D: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_object_model_3d(
        SerializedItemHandle: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_object_model_3d(
        SerializedItemHandle: Hlong,
        ObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_object_model_3d(
        ObjectModel3D: Htuple,
        FileType: Htuple,
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_object_model_3d(
        ObjectModel3D: Hlong,
        FileType: *const ::std::os::raw::c_char,
        FileName: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_object_model_3d(
        FileName: Htuple,
        Scale: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectModel3D: *mut Htuple,
        Status: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_object_model_3d(
        FileName: *const ::std::os::raw::c_char,
        Scale: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        ObjectModel3D: *mut Hlong,
        Status: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_kalman(
        FileName: Htuple,
        Dimension: *mut Htuple,
        Model: *mut Htuple,
        Measurement: *mut Htuple,
        Prediction: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_update_kalman(
        FileName: Htuple,
        DimensionIn: Htuple,
        ModelIn: Htuple,
        MeasurementIn: Htuple,
        DimensionOut: *mut Htuple,
        ModelOut: *mut Htuple,
        MeasurementOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_filter_kalman(
        Dimension: Htuple,
        Model: Htuple,
        Measurement: Htuple,
        PredictionIn: Htuple,
        PredictionOut: *mut Htuple,
        Estimate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_operator_info(Slots: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_param_info(Slots: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_operator_name(Pattern: Htuple, OperatorNames: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_param_types(
        OperatorName: Htuple,
        InpCtrlParType: *mut Htuple,
        OutpCtrlParType: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_param_num(
        OperatorName: Htuple,
        CName: *mut Htuple,
        InpObjPar: *mut Htuple,
        OutpObjPar: *mut Htuple,
        InpCtrlPar: *mut Htuple,
        OutpCtrlPar: *mut Htuple,
        Type: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_param_num(
        OperatorName: *const ::std::os::raw::c_char,
        CName: *mut ::std::os::raw::c_char,
        InpObjPar: *mut Hlong,
        OutpObjPar: *mut Hlong,
        InpCtrlPar: *mut Hlong,
        OutpCtrlPar: *mut Hlong,
        Type: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_param_names(
        OperatorName: Htuple,
        InpObjPar: *mut Htuple,
        OutpObjPar: *mut Htuple,
        InpCtrlPar: *mut Htuple,
        OutpCtrlPar: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_operator_info(
        OperatorName: Htuple,
        Slot: Htuple,
        Information: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_operator_info(
        OperatorName: *const ::std::os::raw::c_char,
        Slot: *const ::std::os::raw::c_char,
        Information: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_param_info(
        OperatorName: Htuple,
        ParamName: Htuple,
        Slot: Htuple,
        Information: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_param_info(
        OperatorName: *const ::std::os::raw::c_char,
        ParamName: *const ::std::os::raw::c_char,
        Slot: *const ::std::os::raw::c_char,
        Information: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_search_operator(Keyword: Htuple, OperatorNames: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_keywords(OperatorName: Htuple, Keywords: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_chapter_info(Chapter: Htuple, Info: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_channels_to_image(Images: Hobject, MultiChannelImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn channels_to_image(Images: Hobject, MultiChannelImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_image_to_channels(MultiChannelImage: Hobject, Images: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn image_to_channels(MultiChannelImage: Hobject, Images: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_compose7(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        Image5: Hobject,
        Image6: Hobject,
        Image7: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compose7(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        Image5: Hobject,
        Image6: Hobject,
        Image7: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compose6(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        Image5: Hobject,
        Image6: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compose6(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        Image5: Hobject,
        Image6: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compose5(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        Image5: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compose5(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        Image5: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compose4(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compose4(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        Image4: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compose3(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn compose3(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        MultiChannelImage: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compose2(Image1: Hobject, Image2: Hobject, MultiChannelImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn compose2(Image1: Hobject, Image2: Hobject, MultiChannelImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_decompose7(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
        Image5: *mut Hobject,
        Image6: *mut Hobject,
        Image7: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decompose7(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
        Image5: *mut Hobject,
        Image6: *mut Hobject,
        Image7: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decompose6(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
        Image5: *mut Hobject,
        Image6: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decompose6(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
        Image5: *mut Hobject,
        Image6: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decompose5(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
        Image5: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decompose5(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
        Image5: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decompose4(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decompose4(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
        Image4: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decompose3(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decompose3(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
        Image3: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decompose2(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decompose2(
        MultiChannelImage: Hobject,
        Image1: *mut Hobject,
        Image2: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_count_channels(MultiChannelImage: Hobject, Channels: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn count_channels(MultiChannelImage: Hobject, Channels: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_append_channel(
        MultiChannelImage: Hobject,
        Image: Hobject,
        ImageExtended: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn append_channel(
        MultiChannelImage: Hobject,
        Image: Hobject,
        ImageExtended: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_access_channel(
        MultiChannelImage: Hobject,
        Image: *mut Hobject,
        Channel: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn access_channel(
        MultiChannelImage: Hobject,
        Image: *mut Hobject,
        Channel: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tile_images_offset(
        Images: Hobject,
        TiledImage: *mut Hobject,
        OffsetRow: Htuple,
        OffsetCol: Htuple,
        Row1: Htuple,
        Col1: Htuple,
        Row2: Htuple,
        Col2: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tile_images_offset(
        Images: Hobject,
        TiledImage: *mut Hobject,
        OffsetRow: Hlong,
        OffsetCol: Hlong,
        Row1: Hlong,
        Col1: Hlong,
        Row2: Hlong,
        Col2: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tile_images(
        Images: Hobject,
        TiledImage: *mut Hobject,
        NumColumns: Htuple,
        TileOrder: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tile_images(
        Images: Hobject,
        TiledImage: *mut Hobject,
        NumColumns: Hlong,
        TileOrder: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tile_channels(
        Image: Hobject,
        TiledImage: *mut Hobject,
        NumColumns: Htuple,
        TileOrder: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tile_channels(
        Image: Hobject,
        TiledImage: *mut Hobject,
        NumColumns: Hlong,
        TileOrder: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_crop_domain(Image: Hobject, ImagePart: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn crop_domain(Image: Hobject, ImagePart: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_crop_rectangle1(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn crop_rectangle1(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_crop_part(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn crop_part(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_change_format(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn change_format(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_change_domain(Image: Hobject, NewDomain: Hobject, ImageNew: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn change_domain(Image: Hobject, NewDomain: Hobject, ImageNew: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_channels(Regions: Hobject, Image: Hobject, GrayRegions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn add_channels(Regions: Hobject, Image: Hobject, GrayRegions: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_rectangle1_domain(
        Image: Hobject,
        ImageReduced: *mut Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn rectangle1_domain(
        Image: Hobject,
        ImageReduced: *mut Hobject,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reduce_domain(Image: Hobject, Region: Hobject, ImageReduced: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn reduce_domain(Image: Hobject, Region: Hobject, ImageReduced: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_full_domain(Image: Hobject, ImageFull: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn full_domain(Image: Hobject, ImageFull: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_domain(Image: Hobject, Domain: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn get_domain(Image: Hobject, Domain: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_hough_circles(
        RegionIn: Hobject,
        RegionOut: *mut Hobject,
        Radius: Htuple,
        Percent: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hough_circles(
        RegionIn: Hobject,
        RegionOut: *mut Hobject,
        Radius: Hlong,
        Percent: Hlong,
        Mode: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hough_circle_trans(
        Region: Hobject,
        HoughImage: *mut Hobject,
        Radius: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hough_circle_trans(Region: Hobject, HoughImage: *mut Hobject, Radius: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_hough_lines_dir(
        ImageDir: Hobject,
        HoughImage: *mut Hobject,
        Lines: *mut Hobject,
        DirectionUncertainty: Htuple,
        AngleResolution: Htuple,
        Smoothing: Htuple,
        FilterSize: Htuple,
        Threshold: Htuple,
        AngleGap: Htuple,
        DistGap: Htuple,
        GenLines: Htuple,
        Angle: *mut Htuple,
        Dist: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hough_line_trans_dir(
        ImageDir: Hobject,
        HoughImage: *mut Hobject,
        DirectionUncertainty: Htuple,
        AngleResolution: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hough_line_trans_dir(
        ImageDir: Hobject,
        HoughImage: *mut Hobject,
        DirectionUncertainty: Hlong,
        AngleResolution: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hough_lines(
        RegionIn: Hobject,
        AngleResolution: Htuple,
        Threshold: Htuple,
        AngleGap: Htuple,
        DistGap: Htuple,
        Angle: *mut Htuple,
        Dist: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hough_line_trans(
        Region: Hobject,
        HoughImage: *mut Hobject,
        AngleResolution: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hough_line_trans(
        Region: Hobject,
        HoughImage: *mut Hobject,
        AngleResolution: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_matching_lines(
        RegionIn: Hobject,
        RegionLines: *mut Hobject,
        AngleIn: Htuple,
        DistIn: Htuple,
        LineWidth: Htuple,
        Thresh: Htuple,
        AngleOut: *mut Htuple,
        DistOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_matching_lines(
        RegionIn: Hobject,
        RegionLines: *mut Hobject,
        AngleIn: f64,
        DistIn: f64,
        LineWidth: Hlong,
        Thresh: Hlong,
        AngleOut: *mut f64,
        DistOut: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_rectification_grid(
        Image: Hobject,
        GridRegion: *mut Hobject,
        MinContrast: Htuple,
        Radius: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn find_rectification_grid(
        Image: Hobject,
        GridRegion: *mut Hobject,
        MinContrast: f64,
        Radius: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_rectification_grid(
        Width: Htuple,
        NumSquares: Htuple,
        GridFile: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_rectification_grid(
        Width: f64,
        NumSquares: Hlong,
        GridFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_connect_grid_points(
        Image: Hobject,
        ConnectingLines: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Sigma: Htuple,
        MaxDist: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_grid_rectification_map(
        Image: Hobject,
        ConnectingLines: Hobject,
        Map: *mut Hobject,
        Meshes: *mut Hobject,
        GridSpacing: Htuple,
        Rotation: Htuple,
        Row: Htuple,
        Column: Htuple,
        MapType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_arbitrary_distortion_map(
        Map: *mut Hobject,
        GridSpacing: Htuple,
        Row: Htuple,
        Column: Htuple,
        GridWidth: Htuple,
        ImageWidth: Htuple,
        ImageHeight: Htuple,
        MapType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_window_background_image(
        BackgroundImage: *mut Hobject,
        WindowHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_window_background_image(
        BackgroundImage: *mut Hobject,
        WindowHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_drawing_object_callback(
        DrawHandle: Htuple,
        DrawObjectEvent: Htuple,
        CallbackFunction: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_drawing_object_callback(
        DrawHandle: Hlong,
        DrawObjectEvent: *const ::std::os::raw::c_char,
        CallbackFunction: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_detach_background_from_window(WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn detach_background_from_window(WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_attach_background_to_window(Image: Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn attach_background_to_window(Image: Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_detach_drawing_object_from_window(WindowHandle: Htuple, DrawHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn detach_drawing_object_from_window(WindowHandle: Hlong, DrawHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_attach_drawing_object_to_window(WindowHandle: Htuple, DrawHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn attach_drawing_object_to_window(WindowHandle: Hlong, DrawHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_update_window_pose(
        WindowHandle: Htuple,
        LastRow: Htuple,
        LastCol: Htuple,
        CurrentRow: Htuple,
        CurrentCol: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn update_window_pose(
        WindowHandle: Hlong,
        LastRow: f64,
        LastCol: f64,
        CurrentRow: f64,
        CurrentCol: f64,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_unproject_coordinates(
        Image: Hobject,
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        ImageRow: *mut Htuple,
        ImageColumn: *mut Htuple,
        Height: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn unproject_coordinates(
        Image: Hobject,
        WindowHandle: Hlong,
        Row: f64,
        Column: f64,
        ImageRow: *mut Hlong,
        ImageColumn: *mut Hlong,
        Height: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_os_window_handle(
        WindowHandle: Htuple,
        OSWindowHandle: *mut Htuple,
        OSDisplayHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_os_window_handle(
        WindowHandle: Hlong,
        OSWindowHandle: *mut Hlong,
        OSDisplayHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_window_dc(WindowHandle: Htuple, WINHDC: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_window_dc(WindowHandle: Hlong, WINHDC: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_new_extern_window(
        WINHWnd: Htuple,
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
        WindowHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn new_extern_window(
        WINHWnd: Hlong,
        Row: Hlong,
        Column: Hlong,
        Width: Hlong,
        Height: Hlong,
        WindowHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_slide_image(
        WindowHandleSource1: Htuple,
        WindowHandleSource2: Htuple,
        WindowHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn slide_image(
        WindowHandleSource1: Hlong,
        WindowHandleSource2: Hlong,
        WindowHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_window_type(WindowType: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_window_type(WindowType: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_window_extents(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_window_extents(
        WindowHandle: Hlong,
        Row: Hlong,
        Column: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_window_attr(AttributeName: Htuple, AttributeValue: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_window_attr(
        AttributeName: *const ::std::os::raw::c_char,
        AttributeValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_window_attr(AttributeName: Htuple, AttributeValue: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_window_attr(
        AttributeName: *const ::std::os::raw::c_char,
        AttributeValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_window_type(WindowTypes: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_window(
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
        FatherWindow: Htuple,
        Mode: Htuple,
        Machine: Htuple,
        WindowHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn open_window(
        Row: Hlong,
        Column: Hlong,
        Width: Hlong,
        Height: Hlong,
        FatherWindow: Hlong,
        Mode: *const ::std::os::raw::c_char,
        Machine: *const ::std::os::raw::c_char,
        WindowHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_textwindow(
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
        BorderWidth: Htuple,
        BorderColor: Htuple,
        BackgroundColor: Htuple,
        FatherWindow: Htuple,
        Mode: Htuple,
        Machine: Htuple,
        WindowHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn open_textwindow(
        Row: Hlong,
        Column: Hlong,
        Width: Hlong,
        Height: Hlong,
        BorderWidth: Hlong,
        BorderColor: *const ::std::os::raw::c_char,
        BackgroundColor: *const ::std::os::raw::c_char,
        FatherWindow: Hlong,
        Mode: *const ::std::os::raw::c_char,
        Machine: *const ::std::os::raw::c_char,
        WindowHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_move_rectangle(
        WindowHandle: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DestRow: Htuple,
        DestColumn: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn move_rectangle(
        WindowHandle: Hlong,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
        DestRow: Hlong,
        DestColumn: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_window_type(WindowHandle: Htuple, WindowType: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_window_type(WindowHandle: Hlong, WindowType: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_window_pointer3(
        WindowHandle: Htuple,
        ImageRed: *mut Htuple,
        ImageGreen: *mut Htuple,
        ImageBlue: *mut Htuple,
        Width: *mut Htuple,
        Height: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_window_pointer3(
        WindowHandle: Hlong,
        ImageRed: *mut Hlong,
        ImageGreen: *mut Hlong,
        ImageBlue: *mut Hlong,
        Width: *mut Hlong,
        Height: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_window_extents(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Width: *mut Htuple,
        Height: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_window_extents(
        WindowHandle: Hlong,
        Row: *mut Hlong,
        Column: *mut Hlong,
        Width: *mut Hlong,
        Height: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dump_window_image(Image: *mut Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn dump_window_image(Image: *mut Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_dump_window(WindowHandle: Htuple, Device: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn dump_window(
        WindowHandle: Hlong,
        Device: *const ::std::os::raw::c_char,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_rectangle(
        WindowHandleSource: Htuple,
        WindowHandleDestination: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DestRow: Htuple,
        DestColumn: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn copy_rectangle(
        WindowHandleSource: Hlong,
        WindowHandleDestination: Hlong,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
        DestRow: Hlong,
        DestColumn: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_window(WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_window(WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_window(WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_window(WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_rectangle(
        WindowHandle: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn clear_rectangle(
        WindowHandle: Hlong,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_string(WindowHandle: Htuple, String: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_string(WindowHandle: Hlong, String: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_tshape(WindowHandle: Htuple, TextCursor: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_tshape(WindowHandle: Hlong, TextCursor: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_tposition(WindowHandle: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_tposition(WindowHandle: Hlong, Row: Hlong, Column: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_string(
        WindowHandle: Htuple,
        InString: Htuple,
        Length: Htuple,
        OutString: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_string(
        WindowHandle: Hlong,
        InString: *const ::std::os::raw::c_char,
        Length: Hlong,
        OutString: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_char(WindowHandle: Htuple, Char: *mut Htuple, Code: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_char(
        WindowHandle: Hlong,
        Char: *mut ::std::os::raw::c_char,
        Code: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_new_line(WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn new_line(WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_tshape(WindowHandle: Htuple, TextCursor: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_tshape(WindowHandle: Hlong, TextCursor: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_tposition(WindowHandle: Htuple, Row: *mut Htuple, Column: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_tposition(WindowHandle: Hlong, Row: *mut Hlong, Column: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_font_extents(
        WindowHandle: Htuple,
        MaxAscent: *mut Htuple,
        MaxDescent: *mut Htuple,
        MaxWidth: *mut Htuple,
        MaxHeight: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_font_extents(
        WindowHandle: Hlong,
        MaxAscent: *mut Hlong,
        MaxDescent: *mut Hlong,
        MaxWidth: *mut Hlong,
        MaxHeight: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_string_extents(
        WindowHandle: Htuple,
        Values: Htuple,
        Ascent: *mut Htuple,
        Descent: *mut Htuple,
        Width: *mut Htuple,
        Height: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_string_extents(
        WindowHandle: Hlong,
        Values: *const ::std::os::raw::c_char,
        Ascent: *mut Hlong,
        Descent: *mut Hlong,
        Width: *mut Hlong,
        Height: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_font(WindowHandle: Htuple, Font: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_tshape(WindowHandle: Htuple, TextCursor: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_font(WindowHandle: Htuple, Font: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_font(WindowHandle: Hlong, Font: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_font(WindowHandle: Htuple, Font: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_font(WindowHandle: Hlong, Font: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_display_scene_3d_info(
        WindowHandle: Htuple,
        Scene3D: Htuple,
        Row: Htuple,
        Column: Htuple,
        Information: Htuple,
        Value: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_display_scene_3d_info(
        WindowHandle: Hlong,
        Scene3D: Hlong,
        Row: f64,
        Column: f64,
        Information: *const ::std::os::raw::c_char,
        Value: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_scene_3d_to_world_pose(Scene3D: Htuple, ToWorldPose: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_scene_3d_to_world_pose(Scene3D: Hlong, ToWorldPose: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_scene_3d_param(
        Scene3D: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_scene_3d_param(
        Scene3D: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_scene_3d_light_param(
        Scene3D: Htuple,
        LightIndex: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_scene_3d_light_param(
        Scene3D: Hlong,
        LightIndex: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_scene_3d_instance_pose(
        Scene3D: Htuple,
        InstanceIndex: Htuple,
        Pose: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_scene_3d_instance_pose(Scene3D: Hlong, InstanceIndex: Hlong, Pose: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_scene_3d_instance_param(
        Scene3D: Htuple,
        InstanceIndex: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_scene_3d_camera_pose(Scene3D: Htuple, CameraIndex: Htuple, Pose: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn set_scene_3d_camera_pose(Scene3D: Hlong, CameraIndex: Hlong, Pose: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_render_scene_3d(Image: *mut Hobject, Scene3D: Htuple, CameraIndex: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn render_scene_3d(Image: *mut Hobject, Scene3D: Hlong, CameraIndex: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_scene_3d_light(Scene3D: Htuple, LightIndex: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn remove_scene_3d_light(Scene3D: Hlong, LightIndex: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_scene_3d_instance(Scene3D: Htuple, InstanceIndex: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn remove_scene_3d_instance(Scene3D: Hlong, InstanceIndex: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_scene_3d_camera(Scene3D: Htuple, CameraIndex: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn remove_scene_3d_camera(Scene3D: Hlong, CameraIndex: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_display_scene_3d(WindowHandle: Htuple, Scene3D: Htuple, CameraIndex: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn display_scene_3d(
        WindowHandle: Hlong,
        Scene3D: Hlong,
        CameraIndex: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_scene_3d_light(
        Scene3D: Htuple,
        LightPosition: Htuple,
        LightKind: Htuple,
        LightIndex: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_scene_3d_instance(
        Scene3D: Htuple,
        ObjectModel3D: Htuple,
        Pose: Htuple,
        InstanceIndex: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_scene_3d_camera(
        Scene3D: Htuple,
        CameraParam: Htuple,
        CameraIndex: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_scene_3d(Scene3D: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_scene_3d(Scene3D: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_scene_3d(Scene3D: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_scene_3d(Scene3D: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_window_param(WindowHandle: Htuple, Param: Htuple, Value: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_window_param(
        WindowHandle: Hlong,
        Param: *const ::std::os::raw::c_char,
        Value: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_window_param(WindowHandle: Htuple, Param: Htuple, Value: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_window_param(
        WindowHandle: Hlong,
        Param: *const ::std::os::raw::c_char,
        Value: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_shape(WindowHandle: Htuple, Shape: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_shape(WindowHandle: Hlong, Shape: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_rgb(WindowHandle: Htuple, Red: Htuple, Green: Htuple, Blue: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_rgb(WindowHandle: Hlong, Red: Hlong, Green: Hlong, Blue: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_pixel(WindowHandle: Htuple, Pixel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_pixel(WindowHandle: Hlong, Pixel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_part_style(WindowHandle: Htuple, Style: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_part_style(WindowHandle: Hlong, Style: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_part(
        WindowHandle: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_part(
        WindowHandle: Hlong,
        Row1: Hlong,
        Column1: Hlong,
        Row2: Hlong,
        Column2: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_paint(WindowHandle: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_line_width(WindowHandle: Htuple, Width: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_line_width(WindowHandle: Hlong, Width: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_line_style(WindowHandle: Htuple, Style: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_line_approx(WindowHandle: Htuple, Approximation: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_line_approx(WindowHandle: Hlong, Approximation: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_insert(WindowHandle: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_insert(WindowHandle: Hlong, Mode: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_hsi(
        WindowHandle: Htuple,
        Hue: Htuple,
        Saturation: Htuple,
        Intensity: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_hsi(WindowHandle: Hlong, Hue: Hlong, Saturation: Hlong, Intensity: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_gray(WindowHandle: Htuple, GrayValues: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_gray(WindowHandle: Hlong, GrayValues: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_draw(WindowHandle: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_draw(WindowHandle: Hlong, Mode: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_comprise(WindowHandle: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_comprise(WindowHandle: Hlong, Mode: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_colored(WindowHandle: Htuple, NumberOfColors: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_colored(WindowHandle: Hlong, NumberOfColors: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_color(WindowHandle: Htuple, Color: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_color(WindowHandle: Hlong, Color: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_shape(WindowHandle: Htuple, DisplayShape: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_shape(WindowHandle: Hlong, DisplayShape: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_rgb(
        WindowHandle: Htuple,
        Red: *mut Htuple,
        Green: *mut Htuple,
        Blue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_pixel(WindowHandle: Htuple, Pixel: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_part_style(WindowHandle: Htuple, Style: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_part_style(WindowHandle: Hlong, Style: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_part(
        WindowHandle: Htuple,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_part(
        WindowHandle: Hlong,
        Row1: *mut Hlong,
        Column1: *mut Hlong,
        Row2: *mut Hlong,
        Column2: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_paint(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_line_width(WindowHandle: Htuple, Width: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_line_width(WindowHandle: Hlong, Width: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_line_style(WindowHandle: Htuple, Style: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_line_approx(WindowHandle: Htuple, Approximation: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_line_approx(WindowHandle: Hlong, Approximation: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_insert(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_insert(WindowHandle: Hlong, Mode: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_hsi(
        WindowHandle: Htuple,
        Hue: *mut Htuple,
        Saturation: *mut Htuple,
        Intensity: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_draw(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_draw(WindowHandle: Hlong, Mode: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_comprise(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_comprise(WindowHandle: Hlong, Mode: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_shape(DisplayShape: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_paint(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_line_width(Min: *mut Htuple, Max: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn query_line_width(Min: *mut Hlong, Max: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_insert(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_gray(WindowHandle: Htuple, Grayval: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_colored(PossibleNumberOfColors: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_all_colors(WindowHandle: Htuple, Colors: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_color(WindowHandle: Htuple, Colors: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_icon(Icon: *mut Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_icon(Icon: *mut Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_icon(Icon: Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_icon(Icon: Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_region(DispRegions: Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn disp_region(DispRegions: Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_rectangle2(
        WindowHandle: Htuple,
        CenterRow: Htuple,
        CenterCol: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_rectangle2(
        WindowHandle: Hlong,
        CenterRow: f64,
        CenterCol: f64,
        Phi: f64,
        Length1: f64,
        Length2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_rectangle1(
        WindowHandle: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_rectangle1(
        WindowHandle: Hlong,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_polygon(WindowHandle: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_line(
        WindowHandle: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_line(
        WindowHandle: Hlong,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_cross(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Size: Htuple,
        Angle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_cross(WindowHandle: Hlong, Row: f64, Column: f64, Size: f64, Angle: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_image(Image: Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn disp_image(Image: Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_channel(
        MultichannelImage: Hobject,
        WindowHandle: Htuple,
        Channel: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_channel(MultichannelImage: Hobject, WindowHandle: Hlong, Channel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_color(ColorImage: Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn disp_color(ColorImage: Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_ellipse(
        WindowHandle: Htuple,
        CenterRow: Htuple,
        CenterCol: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_ellipse(
        WindowHandle: Hlong,
        CenterRow: Hlong,
        CenterCol: Hlong,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_distribution(
        WindowHandle: Htuple,
        Distribution: Htuple,
        Row: Htuple,
        Column: Htuple,
        Scale: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_circle(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Radius: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_circle(WindowHandle: Hlong, Row: f64, Column: f64, Radius: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_arrow(
        WindowHandle: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        Size: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_arrow(
        WindowHandle: Hlong,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        Size: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_arc(
        WindowHandle: Htuple,
        CenterRow: Htuple,
        CenterCol: Htuple,
        Angle: Htuple,
        BeginRow: Htuple,
        BeginCol: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn disp_arc(
        WindowHandle: Hlong,
        CenterRow: f64,
        CenterCol: f64,
        Angle: f64,
        BeginRow: Hlong,
        BeginCol: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_obj(Object: Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn disp_obj(Object: Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_mshape(WindowHandle: Htuple, Cursor: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_mshape(WindowHandle: Hlong, Cursor: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_mshape(WindowHandle: Htuple, Cursor: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_mshape(WindowHandle: Hlong, Cursor: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_mshape(WindowHandle: Htuple, ShapeNames: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_mposition_sub_pix(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Button: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_mposition_sub_pix(
        WindowHandle: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Button: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_mposition(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Button: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_mposition(
        WindowHandle: Hlong,
        Row: *mut Hlong,
        Column: *mut Hlong,
        Button: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_mbutton_sub_pix(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Button: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_mbutton_sub_pix(
        WindowHandle: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Button: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_mbutton(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Button: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_mbutton(
        WindowHandle: Hlong,
        Row: *mut Hlong,
        Column: *mut Hlong,
        Button: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_lut(WindowHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_lut(WindowHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_lut(WindowHandle: Htuple, Row: Htuple, Column: Htuple, Scale: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn disp_lut(WindowHandle: Hlong, Row: Hlong, Column: Hlong, Scale: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_lut(WindowHandle: Htuple, LookUpTable: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_lut_style(
        WindowHandle: Htuple,
        Hue: *mut Htuple,
        Saturation: *mut Htuple,
        Intensity: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_lut_style(
        WindowHandle: Hlong,
        Hue: *mut f64,
        Saturation: *mut f64,
        Intensity: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_lut_style(
        WindowHandle: Htuple,
        Hue: Htuple,
        Saturation: Htuple,
        Intensity: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_lut_style(WindowHandle: Hlong, Hue: f64, Saturation: f64, Intensity: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_lut(WindowHandle: Htuple, LookUpTable: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_lut(WindowHandle: Htuple, LookUpTable: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_lut(WindowHandle: Hlong, LookUpTable: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_fix(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_fix(WindowHandle: Hlong, Mode: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_fix(WindowHandle: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_fix(WindowHandle: Hlong, Mode: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_fixed_lut(WindowHandle: Htuple, Mode: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_fixed_lut(WindowHandle: Hlong, Mode: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_fixed_lut(WindowHandle: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_fixed_lut(WindowHandle: Hlong, Mode: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_text(
        Row: Htuple,
        Column: Htuple,
        String: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_text(
        Row: Hlong,
        Column: Hlong,
        String: *const ::std::os::raw::c_char,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_drawing_object_iconic(Object: *mut Hobject, DrawID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_drawing_object_iconic(Object: *mut Hobject, DrawID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_drawing_object(DrawID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_drawing_object(DrawID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_drawing_object_params(
        DrawID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_drawing_object_params(
        DrawID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_drawing_object_params(
        DrawID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_drawing_object_params(
        DrawID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_drawing_object_xld(Contour: Hobject, DrawID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_drawing_object_xld(Contour: Hobject, DrawID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_xld(Row: Htuple, Column: Htuple, DrawID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_circle_sector(
        Row: Htuple,
        Column: Htuple,
        Radius: Htuple,
        StartAngle: Htuple,
        EndAngle: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_circle_sector(
        Row: f64,
        Column: f64,
        Radius: f64,
        StartAngle: f64,
        EndAngle: f64,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_ellipse_sector(
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        StartAngle: Htuple,
        EndAngle: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_ellipse_sector(
        Row: f64,
        Column: f64,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
        StartAngle: f64,
        EndAngle: f64,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_line(
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_line(
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_circle(
        Row: Htuple,
        Column: Htuple,
        Radius: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_circle(
        Row: f64,
        Column: f64,
        Radius: f64,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_ellipse(
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_ellipse(
        Row: f64,
        Column: f64,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_rectangle2(
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_rectangle2(
        Row: f64,
        Column: f64,
        Phi: f64,
        Length1: f64,
        Length2: f64,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_drawing_object_rectangle1(
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DrawID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_drawing_object_rectangle1(
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        DrawID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_drag_region3(
        SourceRegion: Hobject,
        MaskRegion: Hobject,
        DestinationRegion: *mut Hobject,
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn drag_region3(
        SourceRegion: Hobject,
        MaskRegion: Hobject,
        DestinationRegion: *mut Hobject,
        WindowHandle: Hlong,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_drag_region2(
        SourceRegion: Hobject,
        DestinationRegion: *mut Hobject,
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn drag_region2(
        SourceRegion: Hobject,
        DestinationRegion: *mut Hobject,
        WindowHandle: Hlong,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_drag_region1(
        SourceRegion: Hobject,
        DestinationRegion: *mut Hobject,
        WindowHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn drag_region1(
        SourceRegion: Hobject,
        DestinationRegion: *mut Hobject,
        WindowHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_nurbs_interp_mod(
        ContOut: *mut Hobject,
        WindowHandle: Htuple,
        Rotate: Htuple,
        Move: Htuple,
        Scale: Htuple,
        KeepRatio: Htuple,
        Edit: Htuple,
        Degree: Htuple,
        RowsIn: Htuple,
        ColsIn: Htuple,
        TangentsIn: Htuple,
        ControlRows: *mut Htuple,
        ControlCols: *mut Htuple,
        Knots: *mut Htuple,
        Rows: *mut Htuple,
        Cols: *mut Htuple,
        Tangents: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_nurbs_interp(
        ContOut: *mut Hobject,
        WindowHandle: Htuple,
        Rotate: Htuple,
        Move: Htuple,
        Scale: Htuple,
        KeepRatio: Htuple,
        Degree: Htuple,
        ControlRows: *mut Htuple,
        ControlCols: *mut Htuple,
        Knots: *mut Htuple,
        Rows: *mut Htuple,
        Cols: *mut Htuple,
        Tangents: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_nurbs_mod(
        ContOut: *mut Hobject,
        WindowHandle: Htuple,
        Rotate: Htuple,
        Move: Htuple,
        Scale: Htuple,
        KeepRatio: Htuple,
        Edit: Htuple,
        Degree: Htuple,
        RowsIn: Htuple,
        ColsIn: Htuple,
        WeightsIn: Htuple,
        Rows: *mut Htuple,
        Cols: *mut Htuple,
        Weights: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_nurbs(
        ContOut: *mut Hobject,
        WindowHandle: Htuple,
        Rotate: Htuple,
        Move: Htuple,
        Scale: Htuple,
        KeepRatio: Htuple,
        Degree: Htuple,
        Rows: *mut Htuple,
        Cols: *mut Htuple,
        Weights: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_xld_mod(
        ContIn: Hobject,
        ContOut: *mut Hobject,
        WindowHandle: Htuple,
        Rotate: Htuple,
        Move: Htuple,
        Scale: Htuple,
        KeepRatio: Htuple,
        Edit: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_xld_mod(
        ContIn: Hobject,
        ContOut: *mut Hobject,
        WindowHandle: Hlong,
        Rotate: *const ::std::os::raw::c_char,
        Move: *const ::std::os::raw::c_char,
        Scale: *const ::std::os::raw::c_char,
        KeepRatio: *const ::std::os::raw::c_char,
        Edit: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_xld(
        ContOut: *mut Hobject,
        WindowHandle: Htuple,
        Rotate: Htuple,
        Move: Htuple,
        Scale: Htuple,
        KeepRatio: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_xld(
        ContOut: *mut Hobject,
        WindowHandle: Hlong,
        Rotate: *const ::std::os::raw::c_char,
        Move: *const ::std::os::raw::c_char,
        Scale: *const ::std::os::raw::c_char,
        KeepRatio: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_rectangle2_mod(
        WindowHandle: Htuple,
        RowIn: Htuple,
        ColumnIn: Htuple,
        PhiIn: Htuple,
        Length1In: Htuple,
        Length2In: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_rectangle2_mod(
        WindowHandle: Hlong,
        RowIn: f64,
        ColumnIn: f64,
        PhiIn: f64,
        Length1In: f64,
        Length2In: f64,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Length1: *mut f64,
        Length2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_rectangle2(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_rectangle2(
        WindowHandle: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Length1: *mut f64,
        Length2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_rectangle1_mod(
        WindowHandle: Htuple,
        Row1In: Htuple,
        Column1In: Htuple,
        Row2In: Htuple,
        Column2In: Htuple,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_rectangle1_mod(
        WindowHandle: Hlong,
        Row1In: f64,
        Column1In: f64,
        Row2In: f64,
        Column2In: f64,
        Row1: *mut f64,
        Column1: *mut f64,
        Row2: *mut f64,
        Column2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_rectangle1(
        WindowHandle: Htuple,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_rectangle1(
        WindowHandle: Hlong,
        Row1: *mut f64,
        Column1: *mut f64,
        Row2: *mut f64,
        Column2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_point_mod(
        WindowHandle: Htuple,
        RowIn: Htuple,
        ColumnIn: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_point_mod(
        WindowHandle: Hlong,
        RowIn: f64,
        ColumnIn: f64,
        Row: *mut f64,
        Column: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_point(WindowHandle: Htuple, Row: *mut Htuple, Column: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn draw_point(WindowHandle: Hlong, Row: *mut f64, Column: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_line_mod(
        WindowHandle: Htuple,
        Row1In: Htuple,
        Column1In: Htuple,
        Row2In: Htuple,
        Column2In: Htuple,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_line_mod(
        WindowHandle: Hlong,
        Row1In: f64,
        Column1In: f64,
        Row2In: f64,
        Column2In: f64,
        Row1: *mut f64,
        Column1: *mut f64,
        Row2: *mut f64,
        Column2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_line(
        WindowHandle: Htuple,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_line(
        WindowHandle: Hlong,
        Row1: *mut f64,
        Column1: *mut f64,
        Row2: *mut f64,
        Column2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_ellipse_mod(
        WindowHandle: Htuple,
        RowIn: Htuple,
        ColumnIn: Htuple,
        PhiIn: Htuple,
        Radius1In: Htuple,
        Radius2In: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Radius1: *mut Htuple,
        Radius2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_ellipse_mod(
        WindowHandle: Hlong,
        RowIn: f64,
        ColumnIn: f64,
        PhiIn: f64,
        Radius1In: f64,
        Radius2In: f64,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Radius1: *mut f64,
        Radius2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_ellipse(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Radius1: *mut Htuple,
        Radius2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_ellipse(
        WindowHandle: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Radius1: *mut f64,
        Radius2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_circle_mod(
        WindowHandle: Htuple,
        RowIn: Htuple,
        ColumnIn: Htuple,
        RadiusIn: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Radius: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_circle_mod(
        WindowHandle: Hlong,
        RowIn: f64,
        ColumnIn: f64,
        RadiusIn: f64,
        Row: *mut f64,
        Column: *mut f64,
        Radius: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_circle(
        WindowHandle: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Radius: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn draw_circle(
        WindowHandle: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Radius: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_region(Region: *mut Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn draw_region(Region: *mut Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_draw_polygon(PolygonRegion: *mut Hobject, WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn draw_polygon(PolygonRegion: *mut Hobject, WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_projection_pl(
        Row: Htuple,
        Column: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        RowProj: *mut Htuple,
        ColProj: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn projection_pl(
        Row: f64,
        Column: f64,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        RowProj: *mut f64,
        ColProj: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_points_ellipse(
        Angle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Radius1: Htuple,
        Radius2: Htuple,
        RowPoint: *mut Htuple,
        ColPoint: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_points_ellipse(
        Angle: f64,
        Row: f64,
        Column: f64,
        Phi: f64,
        Radius1: f64,
        Radius2: f64,
        RowPoint: *mut f64,
        ColPoint: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_ll(
        RowA1: Htuple,
        ColumnA1: Htuple,
        RowA2: Htuple,
        ColumnA2: Htuple,
        RowB1: Htuple,
        ColumnB1: Htuple,
        RowB2: Htuple,
        ColumnB2: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsParallel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_ll(
        RowA1: f64,
        ColumnA1: f64,
        RowA2: f64,
        ColumnA2: f64,
        RowB1: f64,
        ColumnB1: f64,
        RowB2: f64,
        ColumnB2: f64,
        Row: *mut f64,
        Column: *mut f64,
        IsParallel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_contours_xld(
        Contour1: Hobject,
        Contour2: Hobject,
        IntersectionType: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsOverlapping: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_contours_xld(
        Contour1: Hobject,
        Contour2: Hobject,
        IntersectionType: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
        IsOverlapping: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_circle_contour_xld(
        Contour: Hobject,
        CircleRow: Htuple,
        CircleColumn: Htuple,
        CircleRadius: Htuple,
        CircleStartPhi: Htuple,
        CircleEndPhi: Htuple,
        CirclePointOrder: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_circle_contour_xld(
        Contour: Hobject,
        CircleRow: f64,
        CircleColumn: f64,
        CircleRadius: f64,
        CircleStartPhi: f64,
        CircleEndPhi: f64,
        CirclePointOrder: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_circles(
        Circle1Row: Htuple,
        Circle1Column: Htuple,
        Circle1Radius: Htuple,
        Circle1StartPhi: Htuple,
        Circle1EndPhi: Htuple,
        Circle1PointOrder: Htuple,
        Circle2Row: Htuple,
        Circle2Column: Htuple,
        Circle2Radius: Htuple,
        Circle2StartPhi: Htuple,
        Circle2EndPhi: Htuple,
        Circle2PointOrder: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsOverlapping: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_circles(
        Circle1Row: f64,
        Circle1Column: f64,
        Circle1Radius: f64,
        Circle1StartPhi: f64,
        Circle1EndPhi: f64,
        Circle1PointOrder: *const ::std::os::raw::c_char,
        Circle2Row: f64,
        Circle2Column: f64,
        Circle2Radius: f64,
        Circle2StartPhi: f64,
        Circle2EndPhi: f64,
        Circle2PointOrder: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
        IsOverlapping: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_line_contour_xld(
        Contour: Hobject,
        LineRow1: Htuple,
        LineColumn1: Htuple,
        LineRow2: Htuple,
        LineColumn2: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsOverlapping: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_line_contour_xld(
        Contour: Hobject,
        LineRow1: f64,
        LineColumn1: f64,
        LineRow2: f64,
        LineColumn2: f64,
        Row: *mut f64,
        Column: *mut f64,
        IsOverlapping: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_line_circle(
        LineRow1: Htuple,
        LineColumn1: Htuple,
        LineRow2: Htuple,
        LineColumn2: Htuple,
        CircleRow: Htuple,
        CircleColumn: Htuple,
        CircleRadius: Htuple,
        CircleStartPhi: Htuple,
        CircleEndPhi: Htuple,
        CirclePointOrder: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_line_circle(
        LineRow1: f64,
        LineColumn1: f64,
        LineRow2: f64,
        LineColumn2: f64,
        CircleRow: f64,
        CircleColumn: f64,
        CircleRadius: f64,
        CircleStartPhi: f64,
        CircleEndPhi: f64,
        CirclePointOrder: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_lines(
        Line1Row1: Htuple,
        Line1Column1: Htuple,
        Line1Row2: Htuple,
        Line1Column2: Htuple,
        Line2Row1: Htuple,
        Line2Column1: Htuple,
        Line2Row2: Htuple,
        Line2Column2: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsOverlapping: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_lines(
        Line1Row1: f64,
        Line1Column1: f64,
        Line1Row2: f64,
        Line1Column2: f64,
        Line2Row1: f64,
        Line2Column1: f64,
        Line2Row2: f64,
        Line2Column2: f64,
        Row: *mut f64,
        Column: *mut f64,
        IsOverlapping: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_segment_contour_xld(
        Contour: Hobject,
        SegmentRow1: Htuple,
        SegmentColumn1: Htuple,
        SegmentRow2: Htuple,
        SegmentColumn2: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsOverlapping: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_segment_contour_xld(
        Contour: Hobject,
        SegmentRow1: f64,
        SegmentColumn1: f64,
        SegmentRow2: f64,
        SegmentColumn2: f64,
        Row: *mut f64,
        Column: *mut f64,
        IsOverlapping: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_segment_circle(
        SegmentRow1: Htuple,
        SegmentColumn1: Htuple,
        SegmentRow2: Htuple,
        SegmentColumn2: Htuple,
        CircleRow: Htuple,
        CircleColumn: Htuple,
        CircleRadius: Htuple,
        CircleStartPhi: Htuple,
        CircleEndPhi: Htuple,
        CirclePointOrder: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_segment_circle(
        SegmentRow1: f64,
        SegmentColumn1: f64,
        SegmentRow2: f64,
        SegmentColumn2: f64,
        CircleRow: f64,
        CircleColumn: f64,
        CircleRadius: f64,
        CircleStartPhi: f64,
        CircleEndPhi: f64,
        CirclePointOrder: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_segment_line(
        SegmentRow1: Htuple,
        SegmentColumn1: Htuple,
        SegmentRow2: Htuple,
        SegmentColumn2: Htuple,
        LineRow1: Htuple,
        LineColumn1: Htuple,
        LineRow2: Htuple,
        LineColumn2: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsOverlapping: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_segment_line(
        SegmentRow1: f64,
        SegmentColumn1: f64,
        SegmentRow2: f64,
        SegmentColumn2: f64,
        LineRow1: f64,
        LineColumn1: f64,
        LineRow2: f64,
        LineColumn2: f64,
        Row: *mut f64,
        Column: *mut f64,
        IsOverlapping: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_segments(
        Segment1Row1: Htuple,
        Segment1Column1: Htuple,
        Segment1Row2: Htuple,
        Segment1Column2: Htuple,
        Segment2Row1: Htuple,
        Segment2Column1: Htuple,
        Segment2Row2: Htuple,
        Segment2Column2: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        IsOverlapping: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_segments(
        Segment1Row1: f64,
        Segment1Column1: f64,
        Segment1Row2: f64,
        Segment1Column2: f64,
        Segment2Row1: f64,
        Segment2Column1: f64,
        Segment2Row2: f64,
        Segment2Column2: f64,
        Row: *mut f64,
        Column: *mut f64,
        IsOverlapping: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_distance_transform_xld(DistanceTransformID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_distance_transform_xld(DistanceTransformID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_distance_transform_xld(
        Contour: Hobject,
        ContourOut: *mut Hobject,
        DistanceTransformID: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn apply_distance_transform_xld(
        Contour: Hobject,
        ContourOut: *mut Hobject,
        DistanceTransformID: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_distance_transform_xld(
        FileName: Htuple,
        DistanceTransformID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_distance_transform_xld(
        FileName: *const ::std::os::raw::c_char,
        DistanceTransformID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_distance_transform_xld(
        SerializedItemHandle: Htuple,
        DistanceTransformID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_distance_transform_xld(
        SerializedItemHandle: Hlong,
        DistanceTransformID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_distance_transform_xld(
        DistanceTransformID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_distance_transform_xld(
        DistanceTransformID: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_distance_transform_xld(DistanceTransformID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_distance_transform_xld(
        DistanceTransformID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_distance_transform_xld_param(
        DistanceTransformID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_distance_transform_xld_param(
        DistanceTransformID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_distance_transform_xld_param(
        DistanceTransformID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_distance_transform_xld_param(
        DistanceTransformID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_distance_transform_xld_contour(
        Contour: *mut Hobject,
        DistanceTransformID: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_distance_transform_xld_contour(
        Contour: *mut Hobject,
        DistanceTransformID: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_distance_transform_xld(
        Contour: Hobject,
        Mode: Htuple,
        MaxDistance: Htuple,
        DistanceTransformID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_distance_transform_xld(
        Contour: Hobject,
        Mode: *const ::std::os::raw::c_char,
        MaxDistance: f64,
        DistanceTransformID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_contours_xld(
        ContourFrom: Hobject,
        ContourTo: Hobject,
        ContourOut: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_contours_xld(
        ContourFrom: Hobject,
        ContourTo: Hobject,
        ContourOut: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_cc_min(
        Contour1: Hobject,
        Contour2: Hobject,
        Mode: Htuple,
        DistanceMin: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_cc_min(
        Contour1: Hobject,
        Contour2: Hobject,
        Mode: *const ::std::os::raw::c_char,
        DistanceMin: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_cc(
        Contour1: Hobject,
        Contour2: Hobject,
        Mode: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_cc(
        Contour1: Hobject,
        Contour2: Hobject,
        Mode: *const ::std::os::raw::c_char,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_sc(
        Contour: Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_sc(
        Contour: Hobject,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_lc(
        Contour: Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_lc(
        Contour: Hobject,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_pc(
        Contour: Hobject,
        Row: Htuple,
        Column: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_pc(
        Contour: Hobject,
        Row: f64,
        Column: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_sr(
        Region: Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_sr(
        Region: Hobject,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_lr(
        Region: Hobject,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_lr(
        Region: Hobject,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_pr(
        Region: Hobject,
        Row: Htuple,
        Column: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_pr(
        Region: Hobject,
        Row: f64,
        Column: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_angle_lx(
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        Angle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn angle_lx(Row1: f64, Column1: f64, Row2: f64, Column2: f64, Angle: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_angle_ll(
        RowA1: Htuple,
        ColumnA1: Htuple,
        RowA2: Htuple,
        ColumnA2: Htuple,
        RowB1: Htuple,
        ColumnB1: Htuple,
        RowB2: Htuple,
        ColumnB2: Htuple,
        Angle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn angle_ll(
        RowA1: f64,
        ColumnA1: f64,
        RowA2: f64,
        ColumnA2: f64,
        RowB1: f64,
        ColumnB1: f64,
        RowB2: f64,
        ColumnB2: f64,
        Angle: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_sl(
        RowA1: Htuple,
        ColumnA1: Htuple,
        RowA2: Htuple,
        ColumnA2: Htuple,
        RowB1: Htuple,
        ColumnB1: Htuple,
        RowB2: Htuple,
        ColumnB2: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_sl(
        RowA1: f64,
        ColumnA1: f64,
        RowA2: f64,
        ColumnA2: f64,
        RowB1: f64,
        ColumnB1: f64,
        RowB2: f64,
        ColumnB2: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_ss(
        RowA1: Htuple,
        ColumnA1: Htuple,
        RowA2: Htuple,
        ColumnA2: Htuple,
        RowB1: Htuple,
        ColumnB1: Htuple,
        RowB2: Htuple,
        ColumnB2: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_ss(
        RowA1: f64,
        ColumnA1: f64,
        RowA2: f64,
        ColumnA2: f64,
        RowB1: f64,
        ColumnB1: f64,
        RowB2: f64,
        ColumnB2: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_ps(
        Row: Htuple,
        Column: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        DistanceMin: *mut Htuple,
        DistanceMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_ps(
        Row: f64,
        Column: f64,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        DistanceMin: *mut f64,
        DistanceMax: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_pl(
        Row: Htuple,
        Column: Htuple,
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_pl(
        Row: f64,
        Column: f64,
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        Distance: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_pp(
        Row1: Htuple,
        Column1: Htuple,
        Row2: Htuple,
        Column2: Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_pp(
        Row1: f64,
        Column1: f64,
        Row2: f64,
        Column2: f64,
        Distance: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compose_funct_1d(
        Function1: Htuple,
        Function2: Htuple,
        Border: Htuple,
        ComposedFunction: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_invert_funct_1d(Function: Htuple, InverseFunction: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_derivate_funct_1d(Function: Htuple, Mode: Htuple, Derivative: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_local_min_max_funct_1d(
        Function: Htuple,
        Mode: Htuple,
        Interpolation: Htuple,
        Min: *mut Htuple,
        Max: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_zero_crossings_funct_1d(Function: Htuple, ZeroCrossings: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_scale_y_funct_1d(
        Function: Htuple,
        Mult: Htuple,
        Add: Htuple,
        FunctionScaled: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_negate_funct_1d(Function: Htuple, FunctionInverted: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_abs_funct_1d(Function: Htuple, FunctionAbsolute: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_y_value_funct_1d(
        Function: Htuple,
        X: Htuple,
        Border: Htuple,
        Y: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_pair_funct_1d(
        Function: Htuple,
        Index: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_num_points_funct_1d(Function: Htuple, Length: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_y_range_funct_1d(Function: Htuple, YMin: *mut Htuple, YMax: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_x_range_funct_1d(Function: Htuple, XMin: *mut Htuple, XMax: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_funct_1d_to_pairs(
        Function: Htuple,
        XValues: *mut Htuple,
        YValues: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sample_funct_1d(
        Function: Htuple,
        XMin: Htuple,
        XMax: Htuple,
        XDist: Htuple,
        Border: Htuple,
        SampledFunction: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_transform_funct_1d(
        Function: Htuple,
        Params: Htuple,
        TransformedFunction: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_match_funct_1d_trans(
        Function1: Htuple,
        Function2: Htuple,
        Border: Htuple,
        ParamsConst: Htuple,
        UseParams: Htuple,
        Params: *mut Htuple,
        ChiSquare: *mut Htuple,
        Covar: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_funct_1d(
        Function1: Htuple,
        Function2: Htuple,
        Mode: Htuple,
        Sigma: Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smooth_funct_1d_gauss(
        Function: Htuple,
        Sigma: Htuple,
        SmoothedFunction: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_integrate_funct_1d(
        Function: Htuple,
        Positive: *mut Htuple,
        Negative: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_funct_1d(FileName: Htuple, Function: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_funct_1d(FileName: *const ::std::os::raw::c_char, Function: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_funct_1d(Function: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_funct_1d_array(YValues: Htuple, Function: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_funct_1d_pairs(
        XValues: Htuple,
        YValues: Htuple,
        Function: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smooth_funct_1d_mean(
        Function: Htuple,
        SmoothSize: Htuple,
        Iterations: Htuple,
        SmoothedFunction: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_texture_laws(
        Image: Hobject,
        ImageTexture: *mut Hobject,
        FilterTypes: Htuple,
        Shift: Htuple,
        FilterSize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn texture_laws(
        Image: Hobject,
        ImageTexture: *mut Hobject,
        FilterTypes: *const ::std::os::raw::c_char,
        Shift: Hlong,
        FilterSize: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deviation_image(
        Image: Hobject,
        ImageDeviation: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deviation_image(
        Image: Hobject,
        ImageDeviation: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_entropy_image(
        Image: Hobject,
        ImageEntropy: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn entropy_image(
        Image: Hobject,
        ImageEntropy: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_isotropic_diffusion(
        Image: Hobject,
        SmoothedImage: *mut Hobject,
        Sigma: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn isotropic_diffusion(
        Image: Hobject,
        SmoothedImage: *mut Hobject,
        Sigma: f64,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_anisotropic_diffusion(
        Image: Hobject,
        ImageAniso: *mut Hobject,
        Mode: Htuple,
        Contrast: Htuple,
        Theta: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn anisotropic_diffusion(
        Image: Hobject,
        ImageAniso: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Contrast: f64,
        Theta: f64,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smooth_image(
        Image: Hobject,
        ImageSmooth: *mut Hobject,
        Filter: Htuple,
        Alpha: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smooth_image(
        Image: Hobject,
        ImageSmooth: *mut Hobject,
        Filter: *const ::std::os::raw::c_char,
        Alpha: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sigma_image(
        Image: Hobject,
        ImageSigma: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
        Sigma: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sigma_image(
        Image: Hobject,
        ImageSigma: *mut Hobject,
        MaskHeight: Hlong,
        MaskWidth: Hlong,
        Sigma: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_midrange_image(
        Image: Hobject,
        Mask: Hobject,
        ImageMidrange: *mut Hobject,
        Margin: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn midrange_image(
        Image: Hobject,
        Mask: Hobject,
        ImageMidrange: *mut Hobject,
        Margin: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trimmed_mean(
        Image: Hobject,
        Mask: Hobject,
        ImageTMean: *mut Hobject,
        Number: Htuple,
        Margin: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn trimmed_mean(
        Image: Hobject,
        Mask: Hobject,
        ImageTMean: *mut Hobject,
        Number: Hlong,
        Margin: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_median_separate(
        Image: Hobject,
        ImageSMedian: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        Margin: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn median_separate(
        Image: Hobject,
        ImageSMedian: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        Margin: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_median_rect(
        Image: Hobject,
        ImageMedian: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn median_rect(
        Image: Hobject,
        ImageMedian: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_median_image(
        Image: Hobject,
        ImageMedian: *mut Hobject,
        MaskType: Htuple,
        Radius: Htuple,
        Margin: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn median_image(
        Image: Hobject,
        ImageMedian: *mut Hobject,
        MaskType: *const ::std::os::raw::c_char,
        Radius: Hlong,
        Margin: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_median_weighted(
        Image: Hobject,
        ImageWMedian: *mut Hobject,
        MaskType: Htuple,
        MaskSize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn median_weighted(
        Image: Hobject,
        ImageWMedian: *mut Hobject,
        MaskType: *const ::std::os::raw::c_char,
        MaskSize: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rank_rect(
        Image: Hobject,
        ImageRank: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        Rank: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn rank_rect(
        Image: Hobject,
        ImageRank: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        Rank: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rank_image(
        Image: Hobject,
        Mask: Hobject,
        ImageRank: *mut Hobject,
        Rank: Htuple,
        Margin: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn rank_image(
        Image: Hobject,
        Mask: Hobject,
        ImageRank: *mut Hobject,
        Rank: Hlong,
        Margin: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_rank(
        Image: Hobject,
        ImageRank: *mut Hobject,
        MaskType: Htuple,
        Radius: Htuple,
        ModePercent: Htuple,
        Margin: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dual_rank(
        Image: Hobject,
        ImageRank: *mut Hobject,
        MaskType: *const ::std::os::raw::c_char,
        Radius: Hlong,
        ModePercent: Hlong,
        Margin: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mean_image(
        Image: Hobject,
        ImageMean: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mean_image(
        Image: Hobject,
        ImageMean: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_info_smooth(
        Filter: Htuple,
        Alpha: Htuple,
        Size: *mut Htuple,
        Coeffs: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_binomial_filter(
        Image: Hobject,
        ImageBinomial: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn binomial_filter(
        Image: Hobject,
        ImageBinomial: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gauss_image(Image: Hobject, ImageGauss: *mut Hobject, Size: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn gauss_image(Image: Hobject, ImageGauss: *mut Hobject, Size: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_gauss_filter(Image: Hobject, ImageGauss: *mut Hobject, Size: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn gauss_filter(Image: Hobject, ImageGauss: *mut Hobject, Size: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_eliminate_min_max(
        Image: Hobject,
        FilteredImage: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        Gap: Htuple,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn eliminate_min_max(
        Image: Hobject,
        FilteredImage: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        Gap: f64,
        Mode: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fill_interlace(
        ImageCamera: Hobject,
        ImageFilled: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fill_interlace(
        ImageCamera: Hobject,
        ImageFilled: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rank_n(Image: Hobject, RankImage: *mut Hobject, RankIndex: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn rank_n(Image: Hobject, RankImage: *mut Hobject, RankIndex: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_mean_n(Image: Hobject, ImageMean: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn mean_n(Image: Hobject, ImageMean: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_eliminate_sp(
        Image: Hobject,
        ImageFillSP: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        MinThresh: Htuple,
        MaxThresh: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn eliminate_sp(
        Image: Hobject,
        ImageFillSP: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        MinThresh: Hlong,
        MaxThresh: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mean_sp(
        Image: Hobject,
        ImageSPMean: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        MinThresh: Htuple,
        MaxThresh: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mean_sp(
        Image: Hobject,
        ImageSPMean: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        MinThresh: Hlong,
        MaxThresh: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_points_sojka(
        Image: Hobject,
        MaskSize: Htuple,
        SigmaW: Htuple,
        SigmaD: Htuple,
        MinGrad: Htuple,
        MinApparentness: Htuple,
        MinAngle: Htuple,
        Subpix: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dots_image(
        Image: Hobject,
        DotImage: *mut Hobject,
        Diameter: Htuple,
        FilterType: Htuple,
        PixelShift: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn dots_image(
        Image: Hobject,
        DotImage: *mut Hobject,
        Diameter: Hlong,
        FilterType: *const ::std::os::raw::c_char,
        PixelShift: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_local_min_sub_pix(
        Image: Hobject,
        Filter: Htuple,
        Sigma: Htuple,
        Threshold: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_local_max_sub_pix(
        Image: Hobject,
        Filter: Htuple,
        Sigma: Htuple,
        Threshold: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_saddle_points_sub_pix(
        Image: Hobject,
        Filter: Htuple,
        Sigma: Htuple,
        Threshold: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_critical_points_sub_pix(
        Image: Hobject,
        Filter: Htuple,
        Sigma: Htuple,
        Threshold: Htuple,
        RowMin: *mut Htuple,
        ColumnMin: *mut Htuple,
        RowMax: *mut Htuple,
        ColumnMax: *mut Htuple,
        RowSaddle: *mut Htuple,
        ColumnSaddle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_points_harris(
        Image: Hobject,
        SigmaGrad: Htuple,
        SigmaSmooth: Htuple,
        Alpha: Htuple,
        Threshold: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_points_harris_binomial(
        Image: Hobject,
        MaskSizeGrad: Htuple,
        MaskSizeSmooth: Htuple,
        Alpha: Htuple,
        Threshold: Htuple,
        Subpix: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_points_lepetit(
        Image: Hobject,
        Radius: Htuple,
        CheckNeighbor: Htuple,
        MinCheckNeighborDiff: Htuple,
        MinScore: Htuple,
        Subpix: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_points_foerstner(
        Image: Hobject,
        SigmaGrad: Htuple,
        SigmaInt: Htuple,
        SigmaPoints: Htuple,
        ThreshInhom: Htuple,
        ThreshShape: Htuple,
        Smoothing: Htuple,
        EliminateDoublets: Htuple,
        RowJunctions: *mut Htuple,
        ColumnJunctions: *mut Htuple,
        CoRRJunctions: *mut Htuple,
        CoRCJunctions: *mut Htuple,
        CoCCJunctions: *mut Htuple,
        RowArea: *mut Htuple,
        ColumnArea: *mut Htuple,
        CoRRArea: *mut Htuple,
        CoRCArea: *mut Htuple,
        CoCCArea: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_estimate_noise(
        Image: Hobject,
        Method: Htuple,
        Percent: Htuple,
        Sigma: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn estimate_noise(
        Image: Hobject,
        Method: *const ::std::os::raw::c_char,
        Percent: f64,
        Sigma: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_noise_distribution_mean(
        ConstRegion: Hobject,
        Image: Hobject,
        FilterSize: Htuple,
        Distribution: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_noise_white(Image: Hobject, ImageNoise: *mut Hobject, Amp: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_noise_white(Image: Hobject, ImageNoise: *mut Hobject, Amp: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_noise_distribution(
        Image: Hobject,
        ImageNoise: *mut Hobject,
        Distribution: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gauss_distribution(Sigma: Htuple, Distribution: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_sp_distribution(
        PercentSalt: Htuple,
        PercentPepper: Htuple,
        Distribution: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deviation_n(Image: Hobject, ImageDeviation: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn deviation_n(Image: Hobject, ImageDeviation: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_inpainting_texture(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        MaskSize: Htuple,
        SearchSize: Htuple,
        Anisotropy: Htuple,
        PostIteration: Htuple,
        Smoothness: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inpainting_texture(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        MaskSize: Hlong,
        SearchSize: Hlong,
        Anisotropy: f64,
        PostIteration: *const ::std::os::raw::c_char,
        Smoothness: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inpainting_ct(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Epsilon: Htuple,
        Kappa: Htuple,
        Sigma: Htuple,
        Rho: Htuple,
        ChannelCoefficients: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inpainting_ct(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Epsilon: f64,
        Kappa: f64,
        Sigma: f64,
        Rho: f64,
        ChannelCoefficients: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inpainting_mcf(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Sigma: Htuple,
        Theta: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inpainting_mcf(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Sigma: f64,
        Theta: f64,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inpainting_ced(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Sigma: Htuple,
        Rho: Htuple,
        Theta: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inpainting_ced(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Sigma: f64,
        Rho: f64,
        Theta: f64,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inpainting_aniso(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Mode: Htuple,
        Contrast: Htuple,
        Theta: Htuple,
        Iterations: Htuple,
        Rho: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inpainting_aniso(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Contrast: f64,
        Theta: f64,
        Iterations: Hlong,
        Rho: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_harmonic_interpolation(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Precision: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn harmonic_interpolation(
        Image: Hobject,
        Region: Hobject,
        InpaintedImage: *mut Hobject,
        Precision: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_expand_domain_gray(
        InputImage: Hobject,
        ExpandedImage: *mut Hobject,
        ExpansionRange: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn expand_domain_gray(
        InputImage: Hobject,
        ExpandedImage: *mut Hobject,
        ExpansionRange: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_topographic_sketch(Image: Hobject, Sketch: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn topographic_sketch(Image: Hobject, Sketch: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_linear_trans_color(
        Image: Hobject,
        ImageTrans: *mut Hobject,
        TransMat: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_principal_comp_trans(
        MultichannelImage: Hobject,
        Trans: *mut Htuple,
        TransInv: *mut Htuple,
        Mean: *mut Htuple,
        Cov: *mut Htuple,
        InfoPerComp: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_principal_comp(
        MultichannelImage: Hobject,
        PCAImage: *mut Hobject,
        InfoPerComp: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fuzzy_entropy(
        Regions: Hobject,
        Image: Hobject,
        Apar: Htuple,
        Cpar: Htuple,
        Entropy: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fuzzy_entropy(
        Regions: Hobject,
        Image: Hobject,
        Apar: Hlong,
        Cpar: Hlong,
        Entropy: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fuzzy_perimeter(
        Regions: Hobject,
        Image: Hobject,
        Apar: Htuple,
        Cpar: Htuple,
        Perimeter: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fuzzy_perimeter(
        Regions: Hobject,
        Image: Hobject,
        Apar: Hlong,
        Cpar: Hlong,
        Perimeter: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_closing_shape(
        Image: Hobject,
        ImageClosing: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
        MaskShape: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_closing_shape(
        Image: Hobject,
        ImageClosing: *mut Hobject,
        MaskHeight: f64,
        MaskWidth: f64,
        MaskShape: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_opening_shape(
        Image: Hobject,
        ImageOpening: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
        MaskShape: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_opening_shape(
        Image: Hobject,
        ImageOpening: *mut Hobject,
        MaskHeight: f64,
        MaskWidth: f64,
        MaskShape: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_erosion_shape(
        Image: Hobject,
        ImageMin: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
        MaskShape: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_erosion_shape(
        Image: Hobject,
        ImageMin: *mut Hobject,
        MaskHeight: f64,
        MaskWidth: f64,
        MaskShape: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_dilation_shape(
        Image: Hobject,
        ImageMax: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
        MaskShape: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_dilation_shape(
        Image: Hobject,
        ImageMax: *mut Hobject,
        MaskHeight: f64,
        MaskWidth: f64,
        MaskShape: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_range_rect(
        Image: Hobject,
        ImageResult: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_range_rect(
        Image: Hobject,
        ImageResult: *mut Hobject,
        MaskHeight: Hlong,
        MaskWidth: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_closing_rect(
        Image: Hobject,
        ImageClosing: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_closing_rect(
        Image: Hobject,
        ImageClosing: *mut Hobject,
        MaskHeight: Hlong,
        MaskWidth: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_opening_rect(
        Image: Hobject,
        ImageOpening: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_opening_rect(
        Image: Hobject,
        ImageOpening: *mut Hobject,
        MaskHeight: Hlong,
        MaskWidth: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_erosion_rect(
        Image: Hobject,
        ImageMin: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_erosion_rect(
        Image: Hobject,
        ImageMin: *mut Hobject,
        MaskHeight: Hlong,
        MaskWidth: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_dilation_rect(
        Image: Hobject,
        ImageMax: *mut Hobject,
        MaskHeight: Htuple,
        MaskWidth: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_dilation_rect(
        Image: Hobject,
        ImageMax: *mut Hobject,
        MaskHeight: Hlong,
        MaskWidth: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_skeleton(Image: Hobject, GraySkeleton: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_skeleton(Image: Hobject, GraySkeleton: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_lut_trans(Image: Hobject, ImageResult: *mut Hobject, Lut: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_convol_image(
        Image: Hobject,
        ImageResult: *mut Hobject,
        FilterMask: Htuple,
        Margin: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convol_image(
        Image: Hobject,
        ImageResult: *mut Hobject,
        FilterMask: *const ::std::os::raw::c_char,
        Margin: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convert_image_type(
        Image: Hobject,
        ImageConverted: *mut Hobject,
        NewType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convert_image_type(
        Image: Hobject,
        ImageConverted: *mut Hobject,
        NewType: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_real_to_vector_field(
        Row: Hobject,
        Col: Hobject,
        VectorField: *mut Hobject,
        Type: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn real_to_vector_field(
        Row: Hobject,
        Col: Hobject,
        VectorField: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_field_to_real(
        VectorField: Hobject,
        Row: *mut Hobject,
        Col: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn vector_field_to_real(
        VectorField: Hobject,
        Row: *mut Hobject,
        Col: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_real_to_complex(
        ImageReal: Hobject,
        ImageImaginary: Hobject,
        ImageComplex: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn real_to_complex(
        ImageReal: Hobject,
        ImageImaginary: Hobject,
        ImageComplex: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_complex_to_real(
        ImageComplex: Hobject,
        ImageReal: *mut Hobject,
        ImageImaginary: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn complex_to_real(
        ImageComplex: Hobject,
        ImageReal: *mut Hobject,
        ImageImaginary: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_region_to_mean(Regions: Hobject, Image: Hobject, ImageMean: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn region_to_mean(Regions: Hobject, Image: Hobject, ImageMean: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_inside(Image: Hobject, ImageDist: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn gray_inside(Image: Hobject, ImageDist: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_symmetry(
        Image: Hobject,
        ImageSymmetry: *mut Hobject,
        MaskSize: Htuple,
        Direction: Htuple,
        Exponent: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn symmetry(
        Image: Hobject,
        ImageSymmetry: *mut Hobject,
        MaskSize: Hlong,
        Direction: f64,
        Exponent: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_grayvalues_from_channels(
        MultichannelImage: Hobject,
        IndexImage: Hobject,
        Selected: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_grayvalues_from_channels(
        MultichannelImage: Hobject,
        IndexImage: Hobject,
        Selected: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_depth_from_focus(
        MultiFocusImage: Hobject,
        Depth: *mut Hobject,
        Confidence: *mut Hobject,
        Filter: Htuple,
        Selection: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn depth_from_focus(
        MultiFocusImage: Hobject,
        Depth: *mut Hobject,
        Confidence: *mut Hobject,
        Filter: *const ::std::os::raw::c_char,
        Selection: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_scene_flow_calib(
        ImageRect1T1: Hobject,
        ImageRect2T1: Hobject,
        ImageRect1T2: Hobject,
        ImageRect2T2: Hobject,
        Disparity: Hobject,
        SmoothingFlow: Htuple,
        SmoothingDisparity: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        CamParamRect1: Htuple,
        CamParamRect2: Htuple,
        RelPoseRect: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_scene_flow_uncalib(
        ImageRect1T1: Hobject,
        ImageRect2T1: Hobject,
        ImageRect1T2: Hobject,
        ImageRect2T2: Hobject,
        Disparity: Hobject,
        OpticalFlow: *mut Hobject,
        DisparityChange: *mut Hobject,
        SmoothingFlow: Htuple,
        SmoothingDisparity: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn scene_flow_uncalib(
        ImageRect1T1: Hobject,
        ImageRect2T1: Hobject,
        ImageRect1T2: Hobject,
        ImageRect2T2: Hobject,
        Disparity: Hobject,
        OpticalFlow: *mut Hobject,
        DisparityChange: *mut Hobject,
        SmoothingFlow: f64,
        SmoothingDisparity: f64,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_unwarp_image_vector_field(
        Image: Hobject,
        VectorField: Hobject,
        ImageUnwarped: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn unwarp_image_vector_field(
        Image: Hobject,
        VectorField: Hobject,
        ImageUnwarped: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_derivate_vector_field(
        VectorField: Hobject,
        Result: *mut Hobject,
        Sigma: Htuple,
        Component: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn derivate_vector_field(
        VectorField: Hobject,
        Result: *mut Hobject,
        Sigma: f64,
        Component: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_field_length(
        VectorField: Hobject,
        Length: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn vector_field_length(
        VectorField: Hobject,
        Length: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_optical_flow_mg(
        ImageT1: Hobject,
        ImageT2: Hobject,
        VectorField: *mut Hobject,
        Algorithm: Htuple,
        SmoothingSigma: Htuple,
        IntegrationSigma: Htuple,
        FlowSmoothness: Htuple,
        GradientConstancy: Htuple,
        MGParamName: Htuple,
        MGParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn optical_flow_mg(
        ImageT1: Hobject,
        ImageT2: Hobject,
        VectorField: *mut Hobject,
        Algorithm: *const ::std::os::raw::c_char,
        SmoothingSigma: f64,
        IntegrationSigma: f64,
        FlowSmoothness: f64,
        GradientConstancy: f64,
        MGParamName: *const ::std::os::raw::c_char,
        MGParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_exhaustive_match_mg(
        Image: Hobject,
        ImageTemplate: Hobject,
        ImageMatch: *mut Hobject,
        Mode: Htuple,
        Level: Htuple,
        Threshold: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn exhaustive_match_mg(
        Image: Hobject,
        ImageTemplate: Hobject,
        ImageMatch: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Level: Hlong,
        Threshold: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_template_rot(
        Template: Hobject,
        NumLevel: Htuple,
        AngleStart: Htuple,
        AngleExtend: Htuple,
        AngleStep: Htuple,
        Optimize: Htuple,
        GrayValues: Htuple,
        TemplateID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_template_rot(
        Template: Hobject,
        NumLevel: Hlong,
        AngleStart: f64,
        AngleExtend: f64,
        AngleStep: f64,
        Optimize: *const ::std::os::raw::c_char,
        GrayValues: *const ::std::os::raw::c_char,
        TemplateID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_template(
        Template: Hobject,
        FirstError: Htuple,
        NumLevel: Htuple,
        Optimize: Htuple,
        GrayValues: Htuple,
        TemplateID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_template(
        Template: Hobject,
        FirstError: Hlong,
        NumLevel: Hlong,
        Optimize: *const ::std::os::raw::c_char,
        GrayValues: *const ::std::os::raw::c_char,
        TemplateID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_template(TemplateID: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_template(TemplateID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_template(SerializedItemHandle: Htuple, TemplateID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_template(SerializedItemHandle: Hlong, TemplateID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_template(TemplateID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_template(TemplateID: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_template(FileName: Htuple, TemplateID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_template(FileName: *const ::std::os::raw::c_char, TemplateID: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_templates() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_templates() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_template(TemplateID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_template(TemplateID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_offset_template(TemplateID: Htuple, GrayOffset: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_offset_template(TemplateID: Hlong, GrayOffset: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_reference_template(TemplateID: Htuple, Row: Htuple, Column: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_reference_template(TemplateID: Hlong, Row: f64, Column: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_adapt_template(Image: Hobject, TemplateID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn adapt_template(Image: Hobject, TemplateID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_fast_match_mg(
        Image: Hobject,
        Matches: *mut Hobject,
        TemplateID: Htuple,
        MaxError: Htuple,
        NumLevel: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fast_match_mg(
        Image: Hobject,
        Matches: *mut Hobject,
        TemplateID: Hlong,
        MaxError: f64,
        NumLevel: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_best_match_pre_mg(
        ImagePyramid: Hobject,
        TemplateID: Htuple,
        MaxError: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        WhichLevels: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn best_match_pre_mg(
        ImagePyramid: Hobject,
        TemplateID: Hlong,
        MaxError: f64,
        SubPixel: *const ::std::os::raw::c_char,
        NumLevels: Hlong,
        WhichLevels: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Error: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_best_match_mg(
        Image: Hobject,
        TemplateID: Htuple,
        MaxError: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        WhichLevels: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn best_match_mg(
        Image: Hobject,
        TemplateID: Hlong,
        MaxError: f64,
        SubPixel: *const ::std::os::raw::c_char,
        NumLevels: Hlong,
        WhichLevels: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Error: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fast_match(
        Image: Hobject,
        Matches: *mut Hobject,
        TemplateID: Htuple,
        MaxError: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fast_match(
        Image: Hobject,
        Matches: *mut Hobject,
        TemplateID: Hlong,
        MaxError: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_best_match_rot_mg(
        Image: Hobject,
        TemplateID: Htuple,
        AngleStart: Htuple,
        AngleExtend: Htuple,
        MaxError: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn best_match_rot_mg(
        Image: Hobject,
        TemplateID: Hlong,
        AngleStart: f64,
        AngleExtend: f64,
        MaxError: f64,
        SubPixel: *const ::std::os::raw::c_char,
        NumLevels: Hlong,
        Row: *mut f64,
        Column: *mut f64,
        Angle: *mut f64,
        Error: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_best_match_rot(
        Image: Hobject,
        TemplateID: Htuple,
        AngleStart: Htuple,
        AngleExtend: Htuple,
        MaxError: Htuple,
        SubPixel: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn best_match_rot(
        Image: Hobject,
        TemplateID: Hlong,
        AngleStart: f64,
        AngleExtend: f64,
        MaxError: f64,
        SubPixel: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
        Angle: *mut f64,
        Error: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_best_match(
        Image: Hobject,
        TemplateID: Htuple,
        MaxError: Htuple,
        SubPixel: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn best_match(
        Image: Hobject,
        TemplateID: Hlong,
        MaxError: f64,
        SubPixel: *const ::std::os::raw::c_char,
        Row: *mut f64,
        Column: *mut f64,
        Error: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_exhaustive_match(
        Image: Hobject,
        RegionOfInterest: Hobject,
        ImageTemplate: Hobject,
        ImageMatch: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn exhaustive_match(
        Image: Hobject,
        RegionOfInterest: Hobject,
        ImageTemplate: Hobject,
        ImageMatch: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_corner_response(
        Image: Hobject,
        ImageCorner: *mut Hobject,
        Size: Htuple,
        Weight: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn corner_response(
        Image: Hobject,
        ImageCorner: *mut Hobject,
        Size: Hlong,
        Weight: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_gauss_pyramid(
        Image: Hobject,
        ImagePyramid: *mut Hobject,
        Mode: Htuple,
        Scale: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_gauss_pyramid(
        Image: Hobject,
        ImagePyramid: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        Scale: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_monotony(Image: Hobject, ImageMonotony: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn monotony(Image: Hobject, ImageMonotony: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_bandpass_image(
        Image: Hobject,
        ImageBandpass: *mut Hobject,
        FilterType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn bandpass_image(
        Image: Hobject,
        ImageBandpass: *mut Hobject,
        FilterType: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_lines_color(
        Image: Hobject,
        Lines: *mut Hobject,
        Sigma: Htuple,
        Low: Htuple,
        High: Htuple,
        ExtractWidth: Htuple,
        CompleteJunctions: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn lines_color(
        Image: Hobject,
        Lines: *mut Hobject,
        Sigma: f64,
        Low: f64,
        High: f64,
        ExtractWidth: *const ::std::os::raw::c_char,
        CompleteJunctions: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_lines_gauss(
        Image: Hobject,
        Lines: *mut Hobject,
        Sigma: Htuple,
        Low: Htuple,
        High: Htuple,
        LightDark: Htuple,
        ExtractWidth: Htuple,
        LineModel: Htuple,
        CompleteJunctions: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn lines_gauss(
        Image: Hobject,
        Lines: *mut Hobject,
        Sigma: f64,
        Low: f64,
        High: f64,
        LightDark: *const ::std::os::raw::c_char,
        ExtractWidth: *const ::std::os::raw::c_char,
        LineModel: *const ::std::os::raw::c_char,
        CompleteJunctions: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_lines_facet(
        Image: Hobject,
        Lines: *mut Hobject,
        MaskSize: Htuple,
        Low: Htuple,
        High: Htuple,
        LightDark: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn lines_facet(
        Image: Hobject,
        Lines: *mut Hobject,
        MaskSize: Hlong,
        Low: f64,
        High: f64,
        LightDark: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_filter_mask(
        ImageFilter: *mut Hobject,
        FilterMask: Htuple,
        Scale: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_filter_mask(
        ImageFilter: *mut Hobject,
        FilterMask: *const ::std::os::raw::c_char,
        Scale: f64,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_mean_filter(
        ImageMean: *mut Hobject,
        MaskShape: Htuple,
        Diameter1: Htuple,
        Diameter2: Htuple,
        Phi: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_mean_filter(
        ImageMean: *mut Hobject,
        MaskShape: *const ::std::os::raw::c_char,
        Diameter1: f64,
        Diameter2: f64,
        Phi: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_gauss_filter(
        ImageGauss: *mut Hobject,
        Sigma1: Htuple,
        Sigma2: Htuple,
        Phi: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_gauss_filter(
        ImageGauss: *mut Hobject,
        Sigma1: f64,
        Sigma2: f64,
        Phi: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_derivative_filter(
        ImageDerivative: *mut Hobject,
        Derivative: Htuple,
        Exponent: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_derivative_filter(
        ImageDerivative: *mut Hobject,
        Derivative: *const ::std::os::raw::c_char,
        Exponent: Hlong,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_std_bandpass(
        ImageFilter: *mut Hobject,
        Frequency: Htuple,
        Sigma: Htuple,
        Type: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_std_bandpass(
        ImageFilter: *mut Hobject,
        Frequency: f64,
        Sigma: f64,
        Type: *const ::std::os::raw::c_char,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_sin_bandpass(
        ImageFilter: *mut Hobject,
        Frequency: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_sin_bandpass(
        ImageFilter: *mut Hobject,
        Frequency: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_bandfilter(
        ImageFilter: *mut Hobject,
        MinFrequency: Htuple,
        MaxFrequency: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_bandfilter(
        ImageFilter: *mut Hobject,
        MinFrequency: f64,
        MaxFrequency: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_bandpass(
        ImageBandpass: *mut Hobject,
        MinFrequency: Htuple,
        MaxFrequency: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_bandpass(
        ImageBandpass: *mut Hobject,
        MinFrequency: f64,
        MaxFrequency: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_lowpass(
        ImageLowpass: *mut Hobject,
        Frequency: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_lowpass(
        ImageLowpass: *mut Hobject,
        Frequency: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_highpass(
        ImageHighpass: *mut Hobject,
        Frequency: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_highpass(
        ImageHighpass: *mut Hobject,
        Frequency: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_power_ln(Image: Hobject, ImageResult: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn power_ln(Image: Hobject, ImageResult: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_power_real(Image: Hobject, ImageResult: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn power_real(Image: Hobject, ImageResult: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_power_byte(Image: Hobject, PowerByte: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn power_byte(Image: Hobject, PowerByte: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_phase_deg(ImageComplex: Hobject, ImagePhase: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn phase_deg(ImageComplex: Hobject, ImagePhase: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_phase_rad(ImageComplex: Hobject, ImagePhase: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn phase_rad(ImageComplex: Hobject, ImagePhase: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_energy_gabor(
        ImageGabor: Hobject,
        ImageHilbert: Hobject,
        Energy: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn energy_gabor(ImageGabor: Hobject, ImageHilbert: Hobject, Energy: *mut Hobject)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_convol_gabor(
        ImageFFT: Hobject,
        GaborFilter: Hobject,
        ImageResultGabor: *mut Hobject,
        ImageResultHilbert: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convol_gabor(
        ImageFFT: Hobject,
        GaborFilter: Hobject,
        ImageResultGabor: *mut Hobject,
        ImageResultHilbert: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_gabor(
        ImageFilter: *mut Hobject,
        Angle: Htuple,
        Frequency: Htuple,
        Bandwidth: Htuple,
        Orientation: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_gabor(
        ImageFilter: *mut Hobject,
        Angle: f64,
        Frequency: f64,
        Bandwidth: f64,
        Orientation: f64,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_phase_correlation_fft(
        ImageFFT1: Hobject,
        ImageFFT2: Hobject,
        ImagePhaseCorrelation: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn phase_correlation_fft(
        ImageFFT1: Hobject,
        ImageFFT2: Hobject,
        ImagePhaseCorrelation: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_correlation_fft(
        ImageFFT1: Hobject,
        ImageFFT2: Hobject,
        ImageCorrelation: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn correlation_fft(
        ImageFFT1: Hobject,
        ImageFFT2: Hobject,
        ImageCorrelation: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convol_fft(
        ImageFFT: Hobject,
        ImageFilter: Hobject,
        ImageConvol: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convol_fft(ImageFFT: Hobject, ImageFilter: Hobject, ImageConvol: *mut Hobject)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_fft_optimization_data(SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_fft_optimization_data(SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_fft_optimization_data(SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_fft_optimization_data(SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_fft_optimization_data(FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_fft_optimization_data(FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_fft_optimization_data(FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_fft_optimization_data(FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_optimize_rft_speed(Width: Htuple, Height: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn optimize_rft_speed(
        Width: Hlong,
        Height: Hlong,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_optimize_fft_speed(Width: Htuple, Height: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn optimize_fft_speed(
        Width: Hlong,
        Height: Hlong,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rft_generic(
        Image: Hobject,
        ImageFFT: *mut Hobject,
        Direction: Htuple,
        Norm: Htuple,
        ResultType: Htuple,
        Width: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn rft_generic(
        Image: Hobject,
        ImageFFT: *mut Hobject,
        Direction: *const ::std::os::raw::c_char,
        Norm: *const ::std::os::raw::c_char,
        ResultType: *const ::std::os::raw::c_char,
        Width: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fft_image_inv(Image: Hobject, ImageFFTInv: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn fft_image_inv(Image: Hobject, ImageFFTInv: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_fft_image(Image: Hobject, ImageFFT: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn fft_image(Image: Hobject, ImageFFT: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_fft_generic(
        Image: Hobject,
        ImageFFT: *mut Hobject,
        Direction: Htuple,
        Exponent: Htuple,
        Norm: Htuple,
        Mode: Htuple,
        ResultType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fft_generic(
        Image: Hobject,
        ImageFFT: *mut Hobject,
        Direction: *const ::std::os::raw::c_char,
        Exponent: Hlong,
        Norm: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        ResultType: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_shock_filter(
        Image: Hobject,
        SharpenedImage: *mut Hobject,
        Theta: Htuple,
        Iterations: Htuple,
        Mode: Htuple,
        Sigma: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn shock_filter(
        Image: Hobject,
        SharpenedImage: *mut Hobject,
        Theta: f64,
        Iterations: Hlong,
        Mode: *const ::std::os::raw::c_char,
        Sigma: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mean_curvature_flow(
        Image: Hobject,
        ImageMCF: *mut Hobject,
        Sigma: Htuple,
        Theta: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mean_curvature_flow(
        Image: Hobject,
        ImageMCF: *mut Hobject,
        Sigma: f64,
        Theta: f64,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_coherence_enhancing_diff(
        Image: Hobject,
        ImageCED: *mut Hobject,
        Sigma: Htuple,
        Rho: Htuple,
        Theta: Htuple,
        Iterations: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn coherence_enhancing_diff(
        Image: Hobject,
        ImageCED: *mut Hobject,
        Sigma: f64,
        Rho: f64,
        Theta: f64,
        Iterations: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_equ_histo_image(Image: Hobject, ImageEquHisto: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn equ_histo_image(Image: Hobject, ImageEquHisto: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_illuminate(
        Image: Hobject,
        ImageIlluminate: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        Factor: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn illuminate(
        Image: Hobject,
        ImageIlluminate: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        Factor: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_emphasize(
        Image: Hobject,
        ImageEmphasize: *mut Hobject,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        Factor: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn emphasize(
        Image: Hobject,
        ImageEmphasize: *mut Hobject,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        Factor: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_scale_image_max(Image: Hobject, ImageScaleMax: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn scale_image_max(Image: Hobject, ImageScaleMax: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_robinson_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn robinson_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_robinson_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn robinson_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_kirsch_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn kirsch_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_kirsch_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn kirsch_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_frei_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn frei_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_frei_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn frei_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_prewitt_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn prewitt_dir(
        Image: Hobject,
        ImageEdgeAmp: *mut Hobject,
        ImageEdgeDir: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_prewitt_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn prewitt_amp(Image: Hobject, ImageEdgeAmp: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_sobel_amp(
        Image: Hobject,
        EdgeAmplitude: *mut Hobject,
        FilterType: Htuple,
        Size: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sobel_amp(
        Image: Hobject,
        EdgeAmplitude: *mut Hobject,
        FilterType: *const ::std::os::raw::c_char,
        Size: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sobel_dir(
        Image: Hobject,
        EdgeAmplitude: *mut Hobject,
        EdgeDirection: *mut Hobject,
        FilterType: Htuple,
        Size: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sobel_dir(
        Image: Hobject,
        EdgeAmplitude: *mut Hobject,
        EdgeDirection: *mut Hobject,
        FilterType: *const ::std::os::raw::c_char,
        Size: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_roberts(Image: Hobject, ImageRoberts: *mut Hobject, FilterType: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn roberts(
        Image: Hobject,
        ImageRoberts: *mut Hobject,
        FilterType: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_laplace(
        Image: Hobject,
        ImageLaplace: *mut Hobject,
        ResultType: Htuple,
        MaskSize: Htuple,
        FilterMask: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn laplace(
        Image: Hobject,
        ImageLaplace: *mut Hobject,
        ResultType: *const ::std::os::raw::c_char,
        MaskSize: Hlong,
        FilterMask: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_highpass_image(
        Image: Hobject,
        Highpass: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn highpass_image(
        Image: Hobject,
        Highpass: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_info_edges(
        Filter: Htuple,
        Mode: Htuple,
        Alpha: Htuple,
        Size: *mut Htuple,
        Coeffs: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_edges_color_sub_pix(
        Image: Hobject,
        Edges: *mut Hobject,
        Filter: Htuple,
        Alpha: Htuple,
        Low: Htuple,
        High: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn edges_color_sub_pix(
        Image: Hobject,
        Edges: *mut Hobject,
        Filter: *const ::std::os::raw::c_char,
        Alpha: f64,
        Low: f64,
        High: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_edges_color(
        Image: Hobject,
        ImaAmp: *mut Hobject,
        ImaDir: *mut Hobject,
        Filter: Htuple,
        Alpha: Htuple,
        NMS: Htuple,
        Low: Htuple,
        High: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn edges_color(
        Image: Hobject,
        ImaAmp: *mut Hobject,
        ImaDir: *mut Hobject,
        Filter: *const ::std::os::raw::c_char,
        Alpha: f64,
        NMS: *const ::std::os::raw::c_char,
        Low: Hlong,
        High: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_edges_sub_pix(
        Image: Hobject,
        Edges: *mut Hobject,
        Filter: Htuple,
        Alpha: Htuple,
        Low: Htuple,
        High: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn edges_sub_pix(
        Image: Hobject,
        Edges: *mut Hobject,
        Filter: *const ::std::os::raw::c_char,
        Alpha: f64,
        Low: Hlong,
        High: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_edges_image(
        Image: Hobject,
        ImaAmp: *mut Hobject,
        ImaDir: *mut Hobject,
        Filter: Htuple,
        Alpha: Htuple,
        NMS: Htuple,
        Low: Htuple,
        High: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn edges_image(
        Image: Hobject,
        ImaAmp: *mut Hobject,
        ImaDir: *mut Hobject,
        Filter: *const ::std::os::raw::c_char,
        Alpha: f64,
        NMS: *const ::std::os::raw::c_char,
        Low: Hlong,
        High: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_derivate_gauss(
        Image: Hobject,
        DerivGauss: *mut Hobject,
        Sigma: Htuple,
        Component: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn derivate_gauss(
        Image: Hobject,
        DerivGauss: *mut Hobject,
        Sigma: f64,
        Component: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_laplace_of_gauss(Image: Hobject, ImageLaplace: *mut Hobject, Sigma: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn laplace_of_gauss(Image: Hobject, ImageLaplace: *mut Hobject, Sigma: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_diff_of_gauss(
        Image: Hobject,
        DiffOfGauss: *mut Hobject,
        Sigma: Htuple,
        SigFactor: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn diff_of_gauss(
        Image: Hobject,
        DiffOfGauss: *mut Hobject,
        Sigma: f64,
        SigFactor: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_edges_length(
        Edges: Hobject,
        Gradient: Hobject,
        ClosedEdges: *mut Hobject,
        MinAmplitude: Htuple,
        MaxGapLength: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn close_edges_length(
        Edges: Hobject,
        Gradient: Hobject,
        ClosedEdges: *mut Hobject,
        MinAmplitude: Hlong,
        MaxGapLength: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_edges(
        Edges: Hobject,
        EdgeImage: Hobject,
        RegionResult: *mut Hobject,
        MinAmplitude: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn close_edges(
        Edges: Hobject,
        EdgeImage: Hobject,
        RegionResult: *mut Hobject,
        MinAmplitude: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_detect_edge_segments(
        Image: Hobject,
        SobelSize: Htuple,
        MinAmplitude: Htuple,
        MaxDistance: Htuple,
        MinLength: Htuple,
        BeginRow: *mut Htuple,
        BeginCol: *mut Htuple,
        EndRow: *mut Htuple,
        EndCol: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_color_trans_luts() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_color_trans_luts() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_color_trans_lut(ColorTransLUTHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_color_trans_lut(ColorTransLUTHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_color_trans_lut(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        ImageResult1: *mut Hobject,
        ImageResult2: *mut Hobject,
        ImageResult3: *mut Hobject,
        ColorTransLUTHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn apply_color_trans_lut(
        Image1: Hobject,
        Image2: Hobject,
        Image3: Hobject,
        ImageResult1: *mut Hobject,
        ImageResult2: *mut Hobject,
        ImageResult3: *mut Hobject,
        ColorTransLUTHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_color_trans_lut(
        ColorSpace: Htuple,
        TransDirection: Htuple,
        NumBits: Htuple,
        ColorTransLUTHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_color_trans_lut(
        ColorSpace: *const ::std::os::raw::c_char,
        TransDirection: *const ::std::os::raw::c_char,
        NumBits: Hlong,
        ColorTransLUTHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_cfa_to_rgb(
        CFAImage: Hobject,
        RGBImage: *mut Hobject,
        CFAType: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn cfa_to_rgb(
        CFAImage: Hobject,
        RGBImage: *mut Hobject,
        CFAType: *const ::std::os::raw::c_char,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rgb1_to_gray(RGBImage: Hobject, GrayImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn rgb1_to_gray(RGBImage: Hobject, GrayImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_rgb3_to_gray(
        ImageRed: Hobject,
        ImageGreen: Hobject,
        ImageBlue: Hobject,
        ImageGray: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn rgb3_to_gray(
        ImageRed: Hobject,
        ImageGreen: Hobject,
        ImageBlue: Hobject,
        ImageGray: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trans_from_rgb(
        ImageRed: Hobject,
        ImageGreen: Hobject,
        ImageBlue: Hobject,
        ImageResult1: *mut Hobject,
        ImageResult2: *mut Hobject,
        ImageResult3: *mut Hobject,
        ColorSpace: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn trans_from_rgb(
        ImageRed: Hobject,
        ImageGreen: Hobject,
        ImageBlue: Hobject,
        ImageResult1: *mut Hobject,
        ImageResult2: *mut Hobject,
        ImageResult3: *mut Hobject,
        ColorSpace: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_trans_to_rgb(
        ImageInput1: Hobject,
        ImageInput2: Hobject,
        ImageInput3: Hobject,
        ImageRed: *mut Hobject,
        ImageGreen: *mut Hobject,
        ImageBlue: *mut Hobject,
        ColorSpace: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn trans_to_rgb(
        ImageInput1: Hobject,
        ImageInput2: Hobject,
        ImageInput3: Hobject,
        ImageRed: *mut Hobject,
        ImageGreen: *mut Hobject,
        ImageBlue: *mut Hobject,
        ColorSpace: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_mask(Image: Hobject, ImageMask: *mut Hobject, BitMask: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn bit_mask(Image: Hobject, ImageMask: *mut Hobject, BitMask: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_slice(Image: Hobject, ImageSlice: *mut Hobject, Bit: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn bit_slice(Image: Hobject, ImageSlice: *mut Hobject, Bit: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_rshift(Image: Hobject, ImageRShift: *mut Hobject, Shift: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn bit_rshift(Image: Hobject, ImageRShift: *mut Hobject, Shift: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_lshift(Image: Hobject, ImageLShift: *mut Hobject, Shift: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn bit_lshift(Image: Hobject, ImageLShift: *mut Hobject, Shift: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_not(Image: Hobject, ImageNot: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn bit_not(Image: Hobject, ImageNot: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_xor(Image1: Hobject, Image2: Hobject, ImageXor: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn bit_xor(Image1: Hobject, Image2: Hobject, ImageXor: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_or(Image1: Hobject, Image2: Hobject, ImageOr: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn bit_or(Image1: Hobject, Image2: Hobject, ImageOr: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_bit_and(Image1: Hobject, Image2: Hobject, ImageAnd: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn bit_and(Image1: Hobject, Image2: Hobject, ImageAnd: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gamma_image(
        Image: Hobject,
        GammaImage: *mut Hobject,
        Gamma: Htuple,
        Offset: Htuple,
        Threshold: Htuple,
        MaxGray: Htuple,
        Encode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gamma_image(
        Image: Hobject,
        GammaImage: *mut Hobject,
        Gamma: f64,
        Offset: f64,
        Threshold: f64,
        MaxGray: f64,
        Encode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pow_image(Image: Hobject, PowImage: *mut Hobject, Exponent: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn pow_image(Image: Hobject, PowImage: *mut Hobject, Exponent: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_exp_image(Image: Hobject, ExpImage: *mut Hobject, Base: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn exp_image(
        Image: Hobject,
        ExpImage: *mut Hobject,
        Base: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_log_image(Image: Hobject, LogImage: *mut Hobject, Base: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn log_image(
        Image: Hobject,
        LogImage: *mut Hobject,
        Base: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_atan2_image(ImageY: Hobject, ImageX: Hobject, ArctanImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn atan2_image(ImageY: Hobject, ImageX: Hobject, ArctanImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_atan_image(Image: Hobject, ArctanImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn atan_image(Image: Hobject, ArctanImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_acos_image(Image: Hobject, ArccosImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn acos_image(Image: Hobject, ArccosImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_asin_image(Image: Hobject, ArcsinImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn asin_image(Image: Hobject, ArcsinImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_tan_image(Image: Hobject, TanImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn tan_image(Image: Hobject, TanImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_cos_image(Image: Hobject, CosImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn cos_image(Image: Hobject, CosImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_sin_image(Image: Hobject, SinImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn sin_image(Image: Hobject, SinImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_abs_diff_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageAbsDiff: *mut Hobject,
        Mult: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn abs_diff_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageAbsDiff: *mut Hobject,
        Mult: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_sqrt_image(Image: Hobject, SqrtImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn sqrt_image(Image: Hobject, SqrtImage: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_sub_image(
        ImageMinuend: Hobject,
        ImageSubtrahend: Hobject,
        ImageSub: *mut Hobject,
        Mult: Htuple,
        Add: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn sub_image(
        ImageMinuend: Hobject,
        ImageSubtrahend: Hobject,
        ImageSub: *mut Hobject,
        Mult: f64,
        Add: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_scale_image(
        Image: Hobject,
        ImageScaled: *mut Hobject,
        Mult: Htuple,
        Add: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn scale_image(Image: Hobject, ImageScaled: *mut Hobject, Mult: f64, Add: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_div_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageResult: *mut Hobject,
        Mult: Htuple,
        Add: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn div_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageResult: *mut Hobject,
        Mult: f64,
        Add: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mult_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageResult: *mut Hobject,
        Mult: Htuple,
        Add: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn mult_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageResult: *mut Hobject,
        Mult: f64,
        Add: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageResult: *mut Hobject,
        Mult: Htuple,
        Add: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_image(
        Image1: Hobject,
        Image2: Hobject,
        ImageResult: *mut Hobject,
        Mult: f64,
        Add: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_abs_image(Image: Hobject, ImageAbs: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn abs_image(Image: Hobject, ImageAbs: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_min_image(Image1: Hobject, Image2: Hobject, ImageMin: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn min_image(Image1: Hobject, Image2: Hobject, ImageMin: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_max_image(Image1: Hobject, Image2: Hobject, ImageMax: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn max_image(Image1: Hobject, Image2: Hobject, ImageMax: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_invert_image(Image: Hobject, ImageInvert: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn invert_image(Image: Hobject, ImageInvert: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_adjust_mosaic_images(
        Images: Hobject,
        CorrectedImages: *mut Hobject,
        From: Htuple,
        To: Htuple,
        ReferenceImage: Htuple,
        HomMatrices2D: Htuple,
        EstimationMethod: Htuple,
        EstimateParameters: Htuple,
        OECFModel: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_cube_map_mosaic(
        Images: Hobject,
        Front: *mut Hobject,
        Rear: *mut Hobject,
        Left: *mut Hobject,
        Right: *mut Hobject,
        Top: *mut Hobject,
        Bottom: *mut Hobject,
        CameraMatrices: Htuple,
        RotationMatrices: Htuple,
        CubeMapDimension: Htuple,
        StackingOrder: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_spherical_mosaic(
        Images: Hobject,
        MosaicImage: *mut Hobject,
        CameraMatrices: Htuple,
        RotationMatrices: Htuple,
        LatMin: Htuple,
        LatMax: Htuple,
        LongMin: Htuple,
        LongMax: Htuple,
        LatLongStep: Htuple,
        StackingOrder: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_bundle_adjusted_mosaic(
        Images: Hobject,
        MosaicImage: *mut Hobject,
        HomMatrices2D: Htuple,
        StackingOrder: Htuple,
        TransformDomain: Htuple,
        TransMat2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_projective_mosaic(
        Images: Hobject,
        MosaicImage: *mut Hobject,
        StartImage: Htuple,
        MappingSource: Htuple,
        MappingDest: Htuple,
        HomMatrices2D: Htuple,
        StackingOrder: Htuple,
        TransformDomain: Htuple,
        MosaicMatrices2D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_image_size(
        Image: Hobject,
        TransImage: *mut Hobject,
        HomMat2D: Htuple,
        Interpolation: Htuple,
        Width: Htuple,
        Height: Htuple,
        TransformDomain: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_projective_trans_image(
        Image: Hobject,
        TransImage: *mut Hobject,
        HomMat2D: Htuple,
        Interpolation: Htuple,
        AdaptImageSize: Htuple,
        TransformDomain: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_image_size(
        Image: Hobject,
        ImageAffineTrans: *mut Hobject,
        HomMat2D: Htuple,
        Interpolation: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_affine_trans_image(
        Image: Hobject,
        ImageAffineTrans: *mut Hobject,
        HomMat2D: Htuple,
        Interpolation: Htuple,
        AdaptImageSize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_zoom_image_factor(
        Image: Hobject,
        ImageZoomed: *mut Hobject,
        ScaleWidth: Htuple,
        ScaleHeight: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn zoom_image_factor(
        Image: Hobject,
        ImageZoomed: *mut Hobject,
        ScaleWidth: f64,
        ScaleHeight: f64,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_zoom_image_size(
        Image: Hobject,
        ImageZoom: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn zoom_image_size(
        Image: Hobject,
        ImageZoom: *mut Hobject,
        Width: Hlong,
        Height: Hlong,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mirror_image(Image: Hobject, ImageMirror: *mut Hobject, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn mirror_image(
        Image: Hobject,
        ImageMirror: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rotate_image(
        Image: Hobject,
        ImageRotate: *mut Hobject,
        Phi: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn rotate_image(
        Image: Hobject,
        ImageRotate: *mut Hobject,
        Phi: f64,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_polar_trans_image_inv(
        PolarImage: Hobject,
        XYTransImage: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        AngleStart: Htuple,
        AngleEnd: Htuple,
        RadiusStart: Htuple,
        RadiusEnd: Htuple,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn polar_trans_image_inv(
        PolarImage: Hobject,
        XYTransImage: *mut Hobject,
        Row: f64,
        Column: f64,
        AngleStart: f64,
        AngleEnd: f64,
        RadiusStart: f64,
        RadiusEnd: f64,
        Width: Hlong,
        Height: Hlong,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_polar_trans_image_ext(
        Image: Hobject,
        PolarTransImage: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        AngleStart: Htuple,
        AngleEnd: Htuple,
        RadiusStart: Htuple,
        RadiusEnd: Htuple,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn polar_trans_image_ext(
        Image: Hobject,
        PolarTransImage: *mut Hobject,
        Row: f64,
        Column: f64,
        AngleStart: f64,
        AngleEnd: f64,
        RadiusStart: f64,
        RadiusEnd: f64,
        Width: Hlong,
        Height: Hlong,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_polar_trans_image(
        ImageXY: Hobject,
        ImagePolar: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn polar_trans_image(
        ImageXY: Hobject,
        ImagePolar: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_field_to_hom_mat2d(VectorField: Hobject, HomMat2D: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_xld(XLD: *mut Hobject, SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_xld(XLD: *mut Hobject, SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_xld(XLD: Hobject, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_xld(XLD: Hobject, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_polygon_xld_dxf(
        Polygons: *mut Hobject,
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DxfStatus: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_polygon_xld_dxf(
        Polygons: *mut Hobject,
        FileName: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
        DxfStatus: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_polygon_xld_dxf(Polygons: Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_polygon_xld_dxf(
        Polygons: Hobject,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_contour_xld_dxf(
        Contours: *mut Hobject,
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DxfStatus: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_contour_xld_dxf(
        Contours: *mut Hobject,
        FileName: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
        DxfStatus: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_contour_xld_dxf(Contours: Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_contour_xld_dxf(
        Contours: Hobject,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_file(SourceFile: Htuple, DestinationFile: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn copy_file(
        SourceFile: *const ::std::os::raw::c_char,
        DestinationFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_current_dir(DirName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_current_dir(DirName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_current_dir(DirName: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_current_dir(DirName: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_dir(DirName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn remove_dir(DirName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_make_dir(DirName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn make_dir(DirName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_list_files(Directory: Htuple, Options: Htuple, Files: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_delete_file(FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn delete_file(FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_file_exists(FileName: Htuple, FileExists: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn file_exists(FileName: *const ::std::os::raw::c_char, FileExists: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_object(Object: *mut Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_object(Object: *mut Hobject, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_object(Object: Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_object(Object: Hobject, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_object(Object: *mut Hobject, SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_object(Object: *mut Hobject, SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_object(Object: Hobject, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_object(Object: Hobject, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_image(Image: *mut Hobject, SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_image(Image: *mut Hobject, SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_image(Image: Hobject, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_image(Image: Hobject, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_region(Region: *mut Hobject, SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_region(Region: *mut Hobject, SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_region(Region: Hobject, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_region(Region: Hobject, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_region(Region: Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_region(Region: Hobject, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_image(
        Image: Hobject,
        Format: Htuple,
        FillColor: Htuple,
        FileName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_image(
        Image: Hobject,
        Format: *const ::std::os::raw::c_char,
        FillColor: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_sequence(
        Image: *mut Hobject,
        HeaderSize: Htuple,
        SourceWidth: Htuple,
        SourceHeight: Htuple,
        StartRow: Htuple,
        StartColumn: Htuple,
        DestWidth: Htuple,
        DestHeight: Htuple,
        PixelType: Htuple,
        BitOrder: Htuple,
        ByteOrder: Htuple,
        Pad: Htuple,
        Index: Htuple,
        FileName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_sequence(
        Image: *mut Hobject,
        HeaderSize: Hlong,
        SourceWidth: Hlong,
        SourceHeight: Hlong,
        StartRow: Hlong,
        StartColumn: Hlong,
        DestWidth: Hlong,
        DestHeight: Hlong,
        PixelType: *const ::std::os::raw::c_char,
        BitOrder: *const ::std::os::raw::c_char,
        ByteOrder: *const ::std::os::raw::c_char,
        Pad: *const ::std::os::raw::c_char,
        Index: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_region(Region: *mut Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_region(Region: *mut Hobject, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_image(Image: *mut Hobject, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_image(Image: *mut Hobject, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_file(FileName: Htuple, FileType: Htuple, FileHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn open_file(
        FileName: *const ::std::os::raw::c_char,
        FileType: *const ::std::os::raw::c_char,
        FileHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fwrite_string(FileHandle: Htuple, String: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn fwrite_string(FileHandle: Hlong, String: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_fread_line(FileHandle: Htuple, OutLine: *mut Htuple, IsEOF: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn fread_line(
        FileHandle: Hlong,
        OutLine: *mut ::std::os::raw::c_char,
        IsEOF: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fread_string(FileHandle: Htuple, OutString: *mut Htuple, IsEOF: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn fread_string(
        FileHandle: Hlong,
        OutString: *mut ::std::os::raw::c_char,
        IsEOF: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fread_char(FileHandle: Htuple, Char: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn fread_char(FileHandle: Hlong, Char: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_fnew_line(FileHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn fnew_line(FileHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_file(FileHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_file(FileHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_files() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_files() -> Herror;
}
unsafe extern "C" {
    pub fn T_test_closed_xld(XLD: Hobject, IsClosed: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn test_closed_xld(XLD: Hobject, IsClosed: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_grayval_contour_xld(
        Image: Hobject,
        Contour: Hobject,
        Interpolation: Htuple,
        Grayval: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_grayval_contour_xld(
        Image: Hobject,
        Contour: Hobject,
        Interpolation: *const ::std::os::raw::c_char,
        Grayval: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_any_points_xld(
        XLD: Hobject,
        Mode: Htuple,
        Area: Htuple,
        CenterRow: Htuple,
        CenterCol: Htuple,
        P: Htuple,
        Q: Htuple,
        M: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_any_points_xld(
        XLD: Hobject,
        Mode: *const ::std::os::raw::c_char,
        Area: f64,
        CenterRow: f64,
        CenterCol: f64,
        P: Hlong,
        Q: Hlong,
        M: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_eccentricity_points_xld(XLD: Hobject, Anisometry: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn eccentricity_points_xld(XLD: Hobject, Anisometry: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_elliptic_axis_points_xld(
        XLD: Hobject,
        Ra: *mut Htuple,
        Rb: *mut Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn elliptic_axis_points_xld(
        XLD: Hobject,
        Ra: *mut f64,
        Rb: *mut f64,
        Phi: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_orientation_points_xld(XLD: Hobject, Phi: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn orientation_points_xld(XLD: Hobject, Phi: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_points_xld(
        XLD: Hobject,
        M11: *mut Htuple,
        M20: *mut Htuple,
        M02: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_points_xld(XLD: Hobject, M11: *mut f64, M20: *mut f64, M02: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_area_center_points_xld(
        XLD: Hobject,
        Area: *mut Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn area_center_points_xld(
        XLD: Hobject,
        Area: *mut f64,
        Row: *mut f64,
        Column: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_self_intersection_xld(
        XLD: Hobject,
        CloseXLD: Htuple,
        DoesIntersect: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn test_self_intersection_xld(
        XLD: Hobject,
        CloseXLD: *const ::std::os::raw::c_char,
        DoesIntersect: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_xld_point(
        XLDs: Hobject,
        DestXLDs: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_xld_point(XLDs: Hobject, DestXLDs: *mut Hobject, Row: f64, Column: f64)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_test_xld_point(
        XLD: Hobject,
        Row: Htuple,
        Column: Htuple,
        IsInside: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn test_xld_point(XLD: Hobject, Row: f64, Column: f64, IsInside: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_shape_xld(
        XLD: Hobject,
        SelectedXLD: *mut Hobject,
        Features: Htuple,
        Operation: Htuple,
        Min: Htuple,
        Max: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_shape_xld(
        XLD: Hobject,
        SelectedXLD: *mut Hobject,
        Features: *const ::std::os::raw::c_char,
        Operation: *const ::std::os::raw::c_char,
        Min: f64,
        Max: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_orientation_xld(XLD: Hobject, Phi: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn orientation_xld(XLD: Hobject, Phi: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_eccentricity_xld(
        XLD: Hobject,
        Anisometry: *mut Htuple,
        Bulkiness: *mut Htuple,
        StructureFactor: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn eccentricity_xld(
        XLD: Hobject,
        Anisometry: *mut f64,
        Bulkiness: *mut f64,
        StructureFactor: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compactness_xld(XLD: Hobject, Compactness: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn compactness_xld(XLD: Hobject, Compactness: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_diameter_xld(
        XLD: Hobject,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
        Diameter: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn diameter_xld(
        XLD: Hobject,
        Row1: *mut f64,
        Column1: *mut f64,
        Row2: *mut f64,
        Column2: *mut f64,
        Diameter: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convexity_xld(XLD: Hobject, Convexity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn convexity_xld(XLD: Hobject, Convexity: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_circularity_xld(XLD: Hobject, Circularity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn circularity_xld(XLD: Hobject, Circularity: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_elliptic_axis_xld(
        XLD: Hobject,
        Ra: *mut Htuple,
        Rb: *mut Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn elliptic_axis_xld(XLD: Hobject, Ra: *mut f64, Rb: *mut f64, Phi: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_rectangle2_xld(
        XLD: Hobject,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smallest_rectangle2_xld(
        XLD: Hobject,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Length1: *mut f64,
        Length2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_rectangle1_xld(
        XLD: Hobject,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smallest_rectangle1_xld(
        XLD: Hobject,
        Row1: *mut f64,
        Column1: *mut f64,
        Row2: *mut f64,
        Column2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_circle_xld(
        XLD: Hobject,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Radius: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smallest_circle_xld(
        XLD: Hobject,
        Row: *mut f64,
        Column: *mut f64,
        Radius: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_shape_trans_xld(XLD: Hobject, XLDTrans: *mut Hobject, Type: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn shape_trans_xld(
        XLD: Hobject,
        XLDTrans: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_length_xld(XLD: Hobject, Length: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn length_xld(XLD: Hobject, Length: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_any_xld(
        XLD: Hobject,
        Mode: Htuple,
        PointOrder: Htuple,
        Area: Htuple,
        CenterRow: Htuple,
        CenterCol: Htuple,
        P: Htuple,
        Q: Htuple,
        M: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_any_xld(
        XLD: Hobject,
        Mode: *const ::std::os::raw::c_char,
        PointOrder: *const ::std::os::raw::c_char,
        Area: f64,
        CenterRow: f64,
        CenterCol: f64,
        P: Hlong,
        Q: Hlong,
        M: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_xld(
        XLD: Hobject,
        M11: *mut Htuple,
        M20: *mut Htuple,
        M02: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_xld(XLD: Hobject, M11: *mut f64, M20: *mut f64, M02: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_area_center_xld(
        XLD: Hobject,
        Area: *mut Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        PointOrder: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn area_center_xld(
        XLD: Hobject,
        Area: *mut f64,
        Row: *mut f64,
        Column: *mut f64,
        PointOrder: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_region_central_invar(
        Regions: Hobject,
        PSI1: *mut Htuple,
        PSI2: *mut Htuple,
        PSI3: *mut Htuple,
        PSI4: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_region_central_invar(
        Regions: Hobject,
        PSI1: *mut f64,
        PSI2: *mut f64,
        PSI3: *mut f64,
        PSI4: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_region_central(
        Regions: Hobject,
        I1: *mut Htuple,
        I2: *mut Htuple,
        I3: *mut Htuple,
        I4: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_region_central(
        Regions: Hobject,
        I1: *mut f64,
        I2: *mut f64,
        I3: *mut f64,
        I4: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_region_3rd_invar(
        Regions: Hobject,
        M21: *mut Htuple,
        M12: *mut Htuple,
        M03: *mut Htuple,
        M30: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_region_3rd_invar(
        Regions: Hobject,
        M21: *mut f64,
        M12: *mut f64,
        M03: *mut f64,
        M30: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_region_3rd(
        Regions: Hobject,
        M21: *mut Htuple,
        M12: *mut Htuple,
        M03: *mut Htuple,
        M30: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_region_3rd(
        Regions: Hobject,
        M21: *mut f64,
        M12: *mut f64,
        M03: *mut f64,
        M30: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_rectangle2(
        Regions: Hobject,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Phi: *mut Htuple,
        Length1: *mut Htuple,
        Length2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smallest_rectangle2(
        Regions: Hobject,
        Row: *mut f64,
        Column: *mut f64,
        Phi: *mut f64,
        Length1: *mut f64,
        Length2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_rectangle1(
        Regions: Hobject,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smallest_rectangle1(
        Regions: Hobject,
        Row1: *mut Hlong,
        Column1: *mut Hlong,
        Row2: *mut Hlong,
        Column2: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_smallest_circle(
        Regions: Hobject,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Radius: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn smallest_circle(
        Regions: Hobject,
        Row: *mut f64,
        Column: *mut f64,
        Radius: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_shape_proto(
        Regions: Hobject,
        Pattern: Hobject,
        SelectedRegions: *mut Hobject,
        Feature: Htuple,
        Min: Htuple,
        Max: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_shape_proto(
        Regions: Hobject,
        Pattern: Hobject,
        SelectedRegions: *mut Hobject,
        Feature: *const ::std::os::raw::c_char,
        Min: f64,
        Max: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_region_features(Regions: Hobject, Features: Htuple, Value: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn region_features(
        Regions: Hobject,
        Features: *const ::std::os::raw::c_char,
        Value: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_shape(
        Regions: Hobject,
        SelectedRegions: *mut Hobject,
        Features: Htuple,
        Operation: Htuple,
        Min: Htuple,
        Max: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_shape(
        Regions: Hobject,
        SelectedRegions: *mut Hobject,
        Features: *const ::std::os::raw::c_char,
        Operation: *const ::std::os::raw::c_char,
        Min: f64,
        Max: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_runlength_features(
        Regions: Hobject,
        NumRuns: *mut Htuple,
        KFactor: *mut Htuple,
        LFactor: *mut Htuple,
        MeanLength: *mut Htuple,
        Bytes: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn runlength_features(
        Regions: Hobject,
        NumRuns: *mut Hlong,
        KFactor: *mut f64,
        LFactor: *mut f64,
        MeanLength: *mut f64,
        Bytes: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_neighbors(
        Regions1: Hobject,
        Regions2: Hobject,
        MaxDistance: Htuple,
        RegionIndex1: *mut Htuple,
        RegionIndex2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_region_2nd_rel_invar(
        Regions: Hobject,
        PHI1: *mut Htuple,
        PHI2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_region_2nd_rel_invar(Regions: Hobject, PHI1: *mut f64, PHI2: *mut f64)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_region_2nd_invar(
        Regions: Hobject,
        M11: *mut Htuple,
        M20: *mut Htuple,
        M02: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_region_2nd_invar(
        Regions: Hobject,
        M11: *mut f64,
        M20: *mut f64,
        M02: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_region_2nd(
        Regions: Hobject,
        M11: *mut Htuple,
        M20: *mut Htuple,
        M02: *mut Htuple,
        Ia: *mut Htuple,
        Ib: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_region_2nd(
        Regions: Hobject,
        M11: *mut f64,
        M20: *mut f64,
        M02: *mut f64,
        Ia: *mut f64,
        Ib: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_rr_min(
        Regions1: Hobject,
        Regions2: Hobject,
        MinDistance: *mut Htuple,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_rr_min(
        Regions1: Hobject,
        Regions2: Hobject,
        MinDistance: *mut f64,
        Row1: *mut Hlong,
        Column1: *mut Hlong,
        Row2: *mut Hlong,
        Column2: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_rr_min_dil(
        Regions1: Hobject,
        Regions2: Hobject,
        MinDistance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_rr_min_dil(
        Regions1: Hobject,
        Regions2: Hobject,
        MinDistance: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_diameter_region(
        Regions: Hobject,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
        Diameter: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn diameter_region(
        Regions: Hobject,
        Row1: *mut Hlong,
        Column1: *mut Hlong,
        Row2: *mut Hlong,
        Column2: *mut Hlong,
        Diameter: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_region_point(
        Regions: Hobject,
        Row: Htuple,
        Column: Htuple,
        IsInside: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn test_region_point(
        Regions: Hobject,
        Row: Hlong,
        Column: Hlong,
        IsInside: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_region_index(
        Regions: Hobject,
        Row: Htuple,
        Column: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_region_index(
        Regions: Hobject,
        Row: Hlong,
        Column: Hlong,
        Index: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_region_point(
        Regions: Hobject,
        DestRegions: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_region_point(
        Regions: Hobject,
        DestRegions: *mut Hobject,
        Row: Hlong,
        Column: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_shape_std(
        Regions: Hobject,
        SelectedRegions: *mut Hobject,
        Shape: Htuple,
        Percent: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_shape_std(
        Regions: Hobject,
        SelectedRegions: *mut Hobject,
        Shape: *const ::std::os::raw::c_char,
        Percent: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hamming_distance_norm(
        Regions1: Hobject,
        Regions2: Hobject,
        Norm: Htuple,
        Distance: *mut Htuple,
        Similarity: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hamming_distance_norm(
        Regions1: Hobject,
        Regions2: Hobject,
        Norm: *const ::std::os::raw::c_char,
        Distance: *mut Hlong,
        Similarity: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hamming_distance(
        Regions1: Hobject,
        Regions2: Hobject,
        Distance: *mut Htuple,
        Similarity: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn hamming_distance(
        Regions1: Hobject,
        Regions2: Hobject,
        Distance: *mut Hlong,
        Similarity: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_eccentricity(
        Regions: Hobject,
        Anisometry: *mut Htuple,
        Bulkiness: *mut Htuple,
        StructureFactor: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn eccentricity(
        Regions: Hobject,
        Anisometry: *mut f64,
        Bulkiness: *mut f64,
        StructureFactor: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_euler_number(Regions: Hobject, EulerNumber: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn euler_number(Regions: Hobject, EulerNumber: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_orientation_region(Regions: Hobject, Phi: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn orientation_region(Regions: Hobject, Phi: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_elliptic_axis(
        Regions: Hobject,
        Ra: *mut Htuple,
        Rb: *mut Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn elliptic_axis(Regions: Hobject, Ra: *mut f64, Rb: *mut f64, Phi: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_region_spatial(
        Regions1: Hobject,
        Regions2: Hobject,
        Direction: Htuple,
        RegionIndex1: *mut Htuple,
        RegionIndex2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_spatial_relation(
        Regions1: Hobject,
        Regions2: Hobject,
        Percent: Htuple,
        RegionIndex1: *mut Htuple,
        RegionIndex2: *mut Htuple,
        Relation1: *mut Htuple,
        Relation2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convexity(Regions: Hobject, Convexity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn convexity(Regions: Hobject, Convexity: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_contlength(Regions: Hobject, ContLength: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn contlength(Regions: Hobject, ContLength: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_connect_and_holes(
        Regions: Hobject,
        NumConnected: *mut Htuple,
        NumHoles: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn connect_and_holes(
        Regions: Hobject,
        NumConnected: *mut Hlong,
        NumHoles: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rectangularity(Regions: Hobject, Rectangularity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn rectangularity(Regions: Hobject, Rectangularity: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_compactness(Regions: Hobject, Compactness: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn compactness(Regions: Hobject, Compactness: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_circularity(Regions: Hobject, Circularity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn circularity(Regions: Hobject, Circularity: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_area_holes(Regions: Hobject, Area: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn area_holes(Regions: Hobject, Area: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_area_center(
        Regions: Hobject,
        Area: *mut Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn area_center(
        Regions: Hobject,
        Area: *mut Hlong,
        Row: *mut f64,
        Column: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_runlength_distribution(
        Region: Hobject,
        Foreground: *mut Htuple,
        Background: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_roundness(
        Regions: Hobject,
        Distance: *mut Htuple,
        Sigma: *mut Htuple,
        Roundness: *mut Htuple,
        Sides: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn roundness(
        Regions: Hobject,
        Distance: *mut f64,
        Sigma: *mut f64,
        Roundness: *mut f64,
        Sides: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inner_rectangle1(
        Regions: Hobject,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inner_rectangle1(
        Regions: Hobject,
        Row1: *mut Hlong,
        Column1: *mut Hlong,
        Row2: *mut Hlong,
        Column2: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_inner_circle(
        Regions: Hobject,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Radius: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn inner_circle(
        Regions: Hobject,
        Row: *mut f64,
        Column: *mut f64,
        Radius: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_lines_longest(
        RowBeginIn: Htuple,
        ColBeginIn: Htuple,
        RowEndIn: Htuple,
        ColEndIn: Htuple,
        Num: Htuple,
        RowBeginOut: *mut Htuple,
        ColBeginOut: *mut Htuple,
        RowEndOut: *mut Htuple,
        ColEndOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_partition_lines(
        RowBeginIn: Htuple,
        ColBeginIn: Htuple,
        RowEndIn: Htuple,
        ColEndIn: Htuple,
        Feature: Htuple,
        Operation: Htuple,
        Min: Htuple,
        Max: Htuple,
        RowBeginOut: *mut Htuple,
        ColBeginOut: *mut Htuple,
        RowEndOut: *mut Htuple,
        ColEndOut: *mut Htuple,
        FailRowBOut: *mut Htuple,
        FailColBOut: *mut Htuple,
        FailRowEOut: *mut Htuple,
        FailColEOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_lines(
        RowBeginIn: Htuple,
        ColBeginIn: Htuple,
        RowEndIn: Htuple,
        ColEndIn: Htuple,
        Feature: Htuple,
        Operation: Htuple,
        Min: Htuple,
        Max: Htuple,
        RowBeginOut: *mut Htuple,
        ColBeginOut: *mut Htuple,
        RowEndOut: *mut Htuple,
        ColEndOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_line_position(
        RowBegin: Htuple,
        ColBegin: Htuple,
        RowEnd: Htuple,
        ColEnd: Htuple,
        RowCenter: *mut Htuple,
        ColCenter: *mut Htuple,
        Length: *mut Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn line_position(
        RowBegin: f64,
        ColBegin: f64,
        RowEnd: f64,
        ColEnd: f64,
        RowCenter: *mut f64,
        ColCenter: *mut f64,
        Length: *mut f64,
        Phi: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_line_orientation(
        RowBegin: Htuple,
        ColBegin: Htuple,
        RowEnd: Htuple,
        ColEnd: Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn line_orientation(
        RowBegin: f64,
        ColBegin: f64,
        RowEnd: f64,
        ColEnd: f64,
        Phi: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_approx_chain_simple(
        Row: Htuple,
        Column: Htuple,
        ArcCenterRow: *mut Htuple,
        ArcCenterCol: *mut Htuple,
        ArcAngle: *mut Htuple,
        ArcBeginRow: *mut Htuple,
        ArcBeginCol: *mut Htuple,
        LineBeginRow: *mut Htuple,
        LineBeginCol: *mut Htuple,
        LineEndRow: *mut Htuple,
        LineEndCol: *mut Htuple,
        Order: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_approx_chain(
        Row: Htuple,
        Column: Htuple,
        MinWidthCoord: Htuple,
        MaxWidthCoord: Htuple,
        ThreshStart: Htuple,
        ThreshEnd: Htuple,
        ThreshStep: Htuple,
        MinWidthSmooth: Htuple,
        MaxWidthSmooth: Htuple,
        MinWidthCurve: Htuple,
        MaxWidthCurve: Htuple,
        Weight1: Htuple,
        Weight2: Htuple,
        Weight3: Htuple,
        ArcCenterRow: *mut Htuple,
        ArcCenterCol: *mut Htuple,
        ArcAngle: *mut Htuple,
        ArcBeginRow: *mut Htuple,
        ArcBeginCol: *mut Htuple,
        LineBeginRow: *mut Htuple,
        LineBeginCol: *mut Htuple,
        LineEndRow: *mut Htuple,
        LineEndCol: *mut Htuple,
        Order: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_surface_first_order(
        Regions: Hobject,
        Image: Hobject,
        Algorithm: Htuple,
        Iterations: Htuple,
        ClippingFactor: Htuple,
        Alpha: *mut Htuple,
        Beta: *mut Htuple,
        Gamma: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fit_surface_first_order(
        Regions: Hobject,
        Image: Hobject,
        Algorithm: *const ::std::os::raw::c_char,
        Iterations: Hlong,
        ClippingFactor: f64,
        Alpha: *mut f64,
        Beta: *mut f64,
        Gamma: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_surface_second_order(
        Regions: Hobject,
        Image: Hobject,
        Algorithm: Htuple,
        Iterations: Htuple,
        ClippingFactor: Htuple,
        Alpha: *mut Htuple,
        Beta: *mut Htuple,
        Gamma: *mut Htuple,
        Delta: *mut Htuple,
        Epsilon: *mut Htuple,
        Zeta: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn fit_surface_second_order(
        Regions: Hobject,
        Image: Hobject,
        Algorithm: *const ::std::os::raw::c_char,
        Iterations: Hlong,
        ClippingFactor: f64,
        Alpha: *mut f64,
        Beta: *mut f64,
        Gamma: *mut f64,
        Delta: *mut f64,
        Epsilon: *mut f64,
        Zeta: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image_surface_second_order(
        ImageSurface: *mut Hobject,
        Type: Htuple,
        Alpha: Htuple,
        Beta: Htuple,
        Gamma: Htuple,
        Delta: Htuple,
        Epsilon: Htuple,
        Zeta: Htuple,
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image_surface_second_order(
        ImageSurface: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Alpha: f64,
        Beta: f64,
        Gamma: f64,
        Delta: f64,
        Epsilon: f64,
        Zeta: f64,
        Row: f64,
        Column: f64,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image_surface_first_order(
        ImageSurface: *mut Hobject,
        Type: Htuple,
        Alpha: Htuple,
        Beta: Htuple,
        Gamma: Htuple,
        Row: Htuple,
        Column: Htuple,
        Width: Htuple,
        Height: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_image_surface_first_order(
        ImageSurface: *mut Hobject,
        Type: *const ::std::os::raw::c_char,
        Alpha: f64,
        Beta: f64,
        Gamma: f64,
        Row: f64,
        Column: f64,
        Width: Hlong,
        Height: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_shape_histo_point(
        Region: Hobject,
        Image: Hobject,
        Feature: Htuple,
        Row: Htuple,
        Column: Htuple,
        AbsoluteHisto: *mut Htuple,
        RelativeHisto: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_shape_histo_all(
        Region: Hobject,
        Image: Hobject,
        Feature: Htuple,
        AbsoluteHisto: *mut Htuple,
        RelativeHisto: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_features(
        Regions: Hobject,
        Image: Hobject,
        Features: Htuple,
        Value: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_features(
        Regions: Hobject,
        Image: Hobject,
        Features: *const ::std::os::raw::c_char,
        Value: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_gray(
        Regions: Hobject,
        Image: Hobject,
        SelectedRegions: *mut Hobject,
        Features: Htuple,
        Operation: Htuple,
        Min: Htuple,
        Max: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn select_gray(
        Regions: Hobject,
        Image: Hobject,
        SelectedRegions: *mut Hobject,
        Features: *const ::std::os::raw::c_char,
        Operation: *const ::std::os::raw::c_char,
        Min: f64,
        Max: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_min_max_gray(
        Regions: Hobject,
        Image: Hobject,
        Percent: Htuple,
        Min: *mut Htuple,
        Max: *mut Htuple,
        Range: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn min_max_gray(
        Regions: Hobject,
        Image: Hobject,
        Percent: f64,
        Min: *mut f64,
        Max: *mut f64,
        Range: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intensity(
        Regions: Hobject,
        Image: Hobject,
        Mean: *mut Htuple,
        Deviation: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intensity(
        Regions: Hobject,
        Image: Hobject,
        Mean: *mut f64,
        Deviation: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_histo_range(
        Region: Hobject,
        Image: Hobject,
        Min: Htuple,
        Max: Htuple,
        NumBins: Htuple,
        Histo: *mut Htuple,
        BinSize: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gray_histo_range(
        Region: Hobject,
        Image: Hobject,
        Min: f64,
        Max: f64,
        NumBins: Hlong,
        Histo: *mut Hlong,
        BinSize: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_histo_2dim(
        Regions: Hobject,
        ImageCol: Hobject,
        ImageRow: Hobject,
        Histo2Dim: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn histo_2dim(
        Regions: Hobject,
        ImageCol: Hobject,
        ImageRow: Hobject,
        Histo2Dim: *mut Hobject,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_histo_abs(
        Region: Hobject,
        Image: Hobject,
        Quantization: Htuple,
        AbsoluteHisto: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_histo(
        Region: Hobject,
        Image: Hobject,
        AbsoluteHisto: *mut Htuple,
        RelativeHisto: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_entropy_gray(
        Regions: Hobject,
        Image: Hobject,
        Entropy: *mut Htuple,
        Anisotropy: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn entropy_gray(
        Regions: Hobject,
        Image: Hobject,
        Entropy: *mut f64,
        Anisotropy: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_cooc_feature_matrix(
        CoocMatrix: Hobject,
        Energy: *mut Htuple,
        Correlation: *mut Htuple,
        Homogeneity: *mut Htuple,
        Contrast: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn cooc_feature_matrix(
        CoocMatrix: Hobject,
        Energy: *mut f64,
        Correlation: *mut f64,
        Homogeneity: *mut f64,
        Contrast: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_cooc_feature_image(
        Regions: Hobject,
        Image: Hobject,
        LdGray: Htuple,
        Direction: Htuple,
        Energy: *mut Htuple,
        Correlation: *mut Htuple,
        Homogeneity: *mut Htuple,
        Contrast: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn cooc_feature_image(
        Regions: Hobject,
        Image: Hobject,
        LdGray: Hlong,
        Direction: Hlong,
        Energy: *mut f64,
        Correlation: *mut f64,
        Homogeneity: *mut f64,
        Contrast: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_cooc_matrix(
        Regions: Hobject,
        Image: Hobject,
        Matrix: *mut Hobject,
        LdGray: Htuple,
        Direction: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_cooc_matrix(
        Regions: Hobject,
        Image: Hobject,
        Matrix: *mut Hobject,
        LdGray: Hlong,
        Direction: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_moments_gray_plane(
        Regions: Hobject,
        Image: Hobject,
        MRow: *mut Htuple,
        MCol: *mut Htuple,
        Alpha: *mut Htuple,
        Beta: *mut Htuple,
        Mean: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn moments_gray_plane(
        Regions: Hobject,
        Image: Hobject,
        MRow: *mut f64,
        MCol: *mut f64,
        Alpha: *mut f64,
        Beta: *mut f64,
        Mean: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_plane_deviation(Regions: Hobject, Image: Hobject, Deviation: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn plane_deviation(Regions: Hobject, Image: Hobject, Deviation: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_elliptic_axis_gray(
        Regions: Hobject,
        Image: Hobject,
        Ra: *mut Htuple,
        Rb: *mut Htuple,
        Phi: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn elliptic_axis_gray(
        Regions: Hobject,
        Image: Hobject,
        Ra: *mut f64,
        Rb: *mut f64,
        Phi: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_area_center_gray(
        Regions: Hobject,
        Image: Hobject,
        Area: *mut Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn area_center_gray(
        Regions: Hobject,
        Image: Hobject,
        Area: *mut f64,
        Row: *mut f64,
        Column: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gray_projections(
        Region: Hobject,
        Image: Hobject,
        Mode: Htuple,
        HorProjection: *mut Htuple,
        VertProjection: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_data_code_2d_objects(
        DataCodeObjects: *mut Hobject,
        DataCodeHandle: Htuple,
        CandidateHandle: Htuple,
        ObjectName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_data_code_2d_objects(
        DataCodeObjects: *mut Hobject,
        DataCodeHandle: Hlong,
        CandidateHandle: Hlong,
        ObjectName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_data_code_2d_results(
        DataCodeHandle: Htuple,
        CandidateHandle: Htuple,
        ResultNames: Htuple,
        ResultValues: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_data_code_2d_results(
        DataCodeHandle: Hlong,
        CandidateHandle: *const ::std::os::raw::c_char,
        ResultNames: *const ::std::os::raw::c_char,
        ResultValues: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_data_code_2d(
        Image: Hobject,
        SymbolXLDs: *mut Hobject,
        DataCodeHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ResultHandles: *mut Htuple,
        DecodedDataStrings: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn find_data_code_2d(
        Image: Hobject,
        SymbolXLDs: *mut Hobject,
        DataCodeHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: Hlong,
        ResultHandles: *mut Hlong,
        DecodedDataStrings: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_data_code_2d_param(
        DataCodeHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_data_code_2d_param(
        DataCodeHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_data_code_2d_param(
        DataCodeHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_data_code_2d_param(
        DataCodeHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_data_code_2d_params(
        DataCodeHandle: Htuple,
        QueryName: Htuple,
        GenParamName: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_data_code_2d_model(
        SerializedItemHandle: Htuple,
        DataCodeHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_data_code_2d_model(
        SerializedItemHandle: Hlong,
        DataCodeHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_data_code_2d_model(
        DataCodeHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_data_code_2d_model(
        DataCodeHandle: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_data_code_2d_model(FileName: Htuple, DataCodeHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_data_code_2d_model(
        FileName: *const ::std::os::raw::c_char,
        DataCodeHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_data_code_2d_model(DataCodeHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_data_code_2d_model(
        DataCodeHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_data_code_2d_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_data_code_2d_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_data_code_2d_model(DataCodeHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_data_code_2d_model(DataCodeHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_data_code_2d_model(
        SymbolType: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DataCodeHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_data_code_2d_model(
        SymbolType: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
        DataCodeHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_class_train_data(
        SerializedItemHandle: Htuple,
        ClassTrainDataHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_class_train_data(
        SerializedItemHandle: Hlong,
        ClassTrainDataHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_class_train_data(
        ClassTrainDataHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_class_train_data(
        ClassTrainDataHandle: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_class_train_data(FileName: Htuple, ClassTrainDataHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_class_train_data(
        FileName: *const ::std::os::raw::c_char,
        ClassTrainDataHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_class_train_data(ClassTrainDataHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_class_train_data(
        ClassTrainDataHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_sub_feature_class_train_data(
        ClassTrainDataHandle: Htuple,
        SubFeatureIndices: Htuple,
        SelectedClassTrainDataHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_feature_lengths_class_train_data(
        ClassTrainDataHandle: Htuple,
        SubFeatureLength: Htuple,
        Names: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_class_train_data_gmm(
        GMMHandle: Htuple,
        ClassTrainDataHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_class_train_data_gmm(GMMHandle: Hlong, ClassTrainDataHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_class_train_data_gmm(GMMHandle: Htuple, ClassTrainDataHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_class_train_data_gmm(GMMHandle: Hlong, ClassTrainDataHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_class_train_data_mlp(
        MLPHandle: Htuple,
        ClassTrainDataHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_class_train_data_mlp(MLPHandle: Hlong, ClassTrainDataHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_class_train_data_mlp(MLPHandle: Htuple, ClassTrainDataHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_class_train_data_mlp(MLPHandle: Hlong, ClassTrainDataHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_class_train_data_knn(
        KNNHandle: Htuple,
        ClassTrainDataHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_class_train_data_knn(KNNHandle: Hlong, ClassTrainDataHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_class_train_data_knn(KNNHandle: Htuple, ClassTrainDataHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_class_train_data_knn(KNNHandle: Hlong, ClassTrainDataHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_class_train_data_svm(
        SVMHandle: Htuple,
        ClassTrainDataHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_class_train_data_svm(SVMHandle: Hlong, ClassTrainDataHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_class_train_data_svm(SVMHandle: Htuple, ClassTrainDataHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_class_train_data_svm(SVMHandle: Hlong, ClassTrainDataHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_num_class_train_data(
        ClassTrainDataHandle: Htuple,
        NumSamples: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_sample_num_class_train_data(
        ClassTrainDataHandle: Hlong,
        NumSamples: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_class_train_data(
        ClassTrainDataHandle: Htuple,
        IndexSample: Htuple,
        Features: *mut Htuple,
        ClassID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_class_train_data() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_class_train_data() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_class_train_data(ClassTrainDataHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_class_train_data(ClassTrainDataHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_sample_class_train_data(
        ClassTrainDataHandle: Htuple,
        Order: Htuple,
        Features: Htuple,
        ClassID: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_train_data(NumDim: Htuple, ClassTrainDataHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_class_train_data(NumDim: Hlong, ClassTrainDataHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_mlp(
        ClassTrainDataHandle: Htuple,
        SelectionMethod: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        MLPHandle: *mut Htuple,
        SelectedFeatureIndices: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_svm(
        ClassTrainDataHandle: Htuple,
        SelectionMethod: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        SVMHandle: *mut Htuple,
        SelectedFeatureIndices: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_gmm(
        ClassTrainDataHandle: Htuple,
        SelectionMethod: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        GMMHandle: *mut Htuple,
        SelectedFeatureIndices: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_select_feature_set_knn(
        ClassTrainDataHandle: Htuple,
        SelectionMethod: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        KNNHandle: *mut Htuple,
        SelectedFeatureIndices: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_class_knn() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_class_knn() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_class_knn(KNNHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_class_knn(KNNHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_num_class_knn(KNNHandle: Htuple, NumSamples: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_sample_num_class_knn(KNNHandle: Hlong, NumSamples: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_class_knn(
        KNNHandle: Htuple,
        IndexSample: Htuple,
        Features: *mut Htuple,
        ClassID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_class_knn(SerializedItemHandle: Htuple, KNNHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_class_knn(SerializedItemHandle: Hlong, KNNHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_class_knn(KNNHandle: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_class_knn(KNNHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_class_knn(FileName: Htuple, KNNHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_class_knn(FileName: *const ::std::os::raw::c_char, KNNHandle: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_write_class_knn(KNNHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_class_knn(KNNHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_class_knn(
        KNNHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_params_class_knn(
        KNNHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_class_knn(
        KNNHandle: Htuple,
        Features: Htuple,
        Result: *mut Htuple,
        Rating: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_class_knn(
        KNNHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_sample_class_knn(KNNHandle: Htuple, Features: Htuple, ClassID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn add_sample_class_knn(KNNHandle: Hlong, Features: f64, ClassID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_knn(NumDim: Htuple, KNNHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_class_lut() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_class_lut() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_class_lut(ClassLUTHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_class_lut(ClassLUTHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_lut_knn(
        KNNHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ClassLUTHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_lut_gmm(
        GMMHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ClassLUTHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_lut_svm(
        SVMHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ClassLUTHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_lut_mlp(
        MLPHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ClassLUTHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_class_gmm() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_class_gmm() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_class_gmm(GMMHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_class_gmm(GMMHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_samples_class_gmm(GMMHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_samples_class_gmm(GMMHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_class_gmm(SerializedItemHandle: Htuple, GMMHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_class_gmm(SerializedItemHandle: Hlong, GMMHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_class_gmm(GMMHandle: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_class_gmm(GMMHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_class_gmm(FileName: Htuple, GMMHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_class_gmm(FileName: *const ::std::os::raw::c_char, GMMHandle: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_write_class_gmm(GMMHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_class_gmm(GMMHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_samples_class_gmm(GMMHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_samples_class_gmm(
        GMMHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_samples_class_gmm(GMMHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_samples_class_gmm(
        GMMHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_class_gmm(
        GMMHandle: Htuple,
        Features: Htuple,
        Num: Htuple,
        ClassID: *mut Htuple,
        ClassProb: *mut Htuple,
        Density: *mut Htuple,
        KSigmaProb: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_evaluate_class_gmm(
        GMMHandle: Htuple,
        Features: Htuple,
        ClassProb: *mut Htuple,
        Density: *mut Htuple,
        KSigmaProb: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_class_gmm(
        GMMHandle: Htuple,
        MaxIter: Htuple,
        Threshold: Htuple,
        ClassPriors: Htuple,
        Regularize: Htuple,
        Centers: *mut Htuple,
        Iter: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_prep_info_class_gmm(
        GMMHandle: Htuple,
        Preprocessing: Htuple,
        InformationCont: *mut Htuple,
        CumInformationCont: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_num_class_gmm(GMMHandle: Htuple, NumSamples: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_sample_num_class_gmm(GMMHandle: Hlong, NumSamples: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_class_gmm(
        GMMHandle: Htuple,
        NumSample: Htuple,
        Features: *mut Htuple,
        ClassID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_sample_class_gmm(
        GMMHandle: Htuple,
        Features: Htuple,
        ClassID: Htuple,
        Randomize: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_class_gmm(
        GMMHandle: Htuple,
        NumDim: *mut Htuple,
        NumClasses: *mut Htuple,
        MinCenters: *mut Htuple,
        MaxCenters: *mut Htuple,
        CovarType: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_gmm(
        NumDim: Htuple,
        NumClasses: Htuple,
        NumCenters: Htuple,
        CovarType: Htuple,
        Preprocessing: Htuple,
        NumComponents: Htuple,
        RandSeed: Htuple,
        GMMHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_class_gmm(
        NumDim: Hlong,
        NumClasses: Hlong,
        NumCenters: Hlong,
        CovarType: *const ::std::os::raw::c_char,
        Preprocessing: *const ::std::os::raw::c_char,
        NumComponents: Hlong,
        RandSeed: Hlong,
        GMMHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_class_svm() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_class_svm() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_class_svm(SVMHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_class_svm(SVMHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_samples_class_svm(SVMHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_samples_class_svm(SVMHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_class_svm(SerializedItemHandle: Htuple, SVMHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_class_svm(SerializedItemHandle: Hlong, SVMHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_class_svm(SVMHandle: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_class_svm(SVMHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_class_svm(FileName: Htuple, SVMHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_class_svm(FileName: *const ::std::os::raw::c_char, SVMHandle: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_write_class_svm(SVMHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_class_svm(SVMHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_samples_class_svm(SVMHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_samples_class_svm(
        SVMHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_samples_class_svm(SVMHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_samples_class_svm(
        SVMHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_evaluate_class_svm(SVMHandle: Htuple, Features: Htuple, Result: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_class_svm(
        SVMHandle: Htuple,
        Features: Htuple,
        Num: Htuple,
        Class: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reduce_class_svm(
        SVMHandle: Htuple,
        Method: Htuple,
        MinRemainingSV: Htuple,
        MaxError: Htuple,
        SVMHandleReduced: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn reduce_class_svm(
        SVMHandle: Hlong,
        Method: *const ::std::os::raw::c_char,
        MinRemainingSV: Hlong,
        MaxError: f64,
        SVMHandleReduced: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_class_svm(SVMHandle: Htuple, Epsilon: Htuple, TrainMode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn train_class_svm(
        SVMHandle: Hlong,
        Epsilon: f64,
        TrainMode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_prep_info_class_svm(
        SVMHandle: Htuple,
        Preprocessing: Htuple,
        InformationCont: *mut Htuple,
        CumInformationCont: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_support_vector_num_class_svm(
        SVMHandle: Htuple,
        NumSupportVectors: *mut Htuple,
        NumSVPerSVM: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_support_vector_class_svm(
        SVMHandle: Htuple,
        IndexSupportVector: Htuple,
        Index: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_support_vector_class_svm(
        SVMHandle: Hlong,
        IndexSupportVector: Hlong,
        Index: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_num_class_svm(SVMHandle: Htuple, NumSamples: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_sample_num_class_svm(SVMHandle: Hlong, NumSamples: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_class_svm(
        SVMHandle: Htuple,
        IndexSample: Htuple,
        Features: *mut Htuple,
        Target: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_sample_class_svm(SVMHandle: Htuple, Features: Htuple, Class: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_class_svm(
        SVMHandle: Htuple,
        NumFeatures: *mut Htuple,
        KernelType: *mut Htuple,
        KernelParam: *mut Htuple,
        Nu: *mut Htuple,
        NumClasses: *mut Htuple,
        Mode: *mut Htuple,
        Preprocessing: *mut Htuple,
        NumComponents: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_params_class_svm(
        SVMHandle: Hlong,
        NumFeatures: *mut Hlong,
        KernelType: *mut ::std::os::raw::c_char,
        KernelParam: *mut f64,
        Nu: *mut f64,
        NumClasses: *mut Hlong,
        Mode: *mut ::std::os::raw::c_char,
        Preprocessing: *mut ::std::os::raw::c_char,
        NumComponents: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_svm(
        NumFeatures: Htuple,
        KernelType: Htuple,
        KernelParam: Htuple,
        Nu: Htuple,
        NumClasses: Htuple,
        Mode: Htuple,
        Preprocessing: Htuple,
        NumComponents: Htuple,
        SVMHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_class_svm(
        NumFeatures: Hlong,
        KernelType: *const ::std::os::raw::c_char,
        KernelParam: f64,
        Nu: f64,
        NumClasses: Hlong,
        Mode: *const ::std::os::raw::c_char,
        Preprocessing: *const ::std::os::raw::c_char,
        NumComponents: Hlong,
        SVMHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_class_mlp() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_class_mlp() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_class_mlp(MLPHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_class_mlp(MLPHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_samples_class_mlp(MLPHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_samples_class_mlp(MLPHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_class_mlp(SerializedItemHandle: Htuple, MLPHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_class_mlp(SerializedItemHandle: Hlong, MLPHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_class_mlp(MLPHandle: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_class_mlp(MLPHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_class_mlp(FileName: Htuple, MLPHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_class_mlp(FileName: *const ::std::os::raw::c_char, MLPHandle: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_write_class_mlp(MLPHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_class_mlp(MLPHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_samples_class_mlp(MLPHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_samples_class_mlp(
        MLPHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_samples_class_mlp(MLPHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_samples_class_mlp(
        MLPHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_classify_class_mlp(
        MLPHandle: Htuple,
        Features: Htuple,
        Num: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_evaluate_class_mlp(MLPHandle: Htuple, Features: Htuple, Result: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_train_class_mlp(
        MLPHandle: Htuple,
        MaxIterations: Htuple,
        WeightTolerance: Htuple,
        ErrorTolerance: Htuple,
        Error: *mut Htuple,
        ErrorLog: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_prep_info_class_mlp(
        MLPHandle: Htuple,
        Preprocessing: Htuple,
        InformationCont: *mut Htuple,
        CumInformationCont: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_num_class_mlp(MLPHandle: Htuple, NumSamples: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_sample_num_class_mlp(MLPHandle: Hlong, NumSamples: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_sample_class_mlp(
        MLPHandle: Htuple,
        IndexSample: Htuple,
        Features: *mut Htuple,
        Target: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_rejection_params_class_mlp(
        MLPHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_rejection_params_class_mlp(
        MLPHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_rejection_params_class_mlp(
        MLPHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_rejection_params_class_mlp(
        MLPHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_sample_class_mlp(MLPHandle: Htuple, Features: Htuple, Target: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_regularization_params_class_mlp(
        MLPHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_regularization_params_class_mlp(
        MLPHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_regularization_params_class_mlp(
        MLPHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_regularization_params_class_mlp(
        MLPHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_class_mlp(
        MLPHandle: Htuple,
        NumInput: *mut Htuple,
        NumHidden: *mut Htuple,
        NumOutput: *mut Htuple,
        OutputFunction: *mut Htuple,
        Preprocessing: *mut Htuple,
        NumComponents: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_params_class_mlp(
        MLPHandle: Hlong,
        NumInput: *mut Hlong,
        NumHidden: *mut Hlong,
        NumOutput: *mut Hlong,
        OutputFunction: *mut ::std::os::raw::c_char,
        Preprocessing: *mut ::std::os::raw::c_char,
        NumComponents: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_mlp(
        NumInput: Htuple,
        NumHidden: Htuple,
        NumOutput: Htuple,
        OutputFunction: Htuple,
        Preprocessing: Htuple,
        NumComponents: Htuple,
        RandSeed: Htuple,
        MLPHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_class_mlp(
        NumInput: Hlong,
        NumHidden: Hlong,
        NumOutput: Hlong,
        OutputFunction: *const ::std::os::raw::c_char,
        Preprocessing: *const ::std::os::raw::c_char,
        NumComponents: Hlong,
        RandSeed: Hlong,
        MLPHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_class_box(ClassifHandle: Htuple, SerializedItemHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_class_box(ClassifHandle: Hlong, SerializedItemHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_class_box(
        ClassifHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_class_box(ClassifHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_class_box(ClassifHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_class_box(ClassifHandle: Hlong, FileName: *const ::std::os::raw::c_char)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_set_class_box_param(ClassifHandle: Htuple, Flag: Htuple, Value: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_class_box_param(
        ClassifHandle: Hlong,
        Flag: *const ::std::os::raw::c_char,
        Value: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_sampset(FileName: Htuple, SampKey: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_sampset(FileName: *const ::std::os::raw::c_char, SampKey: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_class_box(ClassifHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_class_box(ClassifHandle: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_learn_sampset_box(
        ClassifHandle: Htuple,
        SampKey: Htuple,
        Outfile: Htuple,
        NSamples: Htuple,
        StopError: Htuple,
        ErrorN: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn learn_sampset_box(
        ClassifHandle: Hlong,
        SampKey: Hlong,
        Outfile: *const ::std::os::raw::c_char,
        NSamples: Hlong,
        StopError: f64,
        ErrorN: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_learn_class_box(ClassifHandle: Htuple, Features: Htuple, Class: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_class_box_param(ClassifHandle: Htuple, Flag: Htuple, Value: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn get_class_box_param(
        ClassifHandle: Hlong,
        Flag: *const ::std::os::raw::c_char,
        Value: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_sampset(SampKey: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_sampset(SampKey: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_class_box(ClassifHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_class_box(ClassifHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_class_box(ClassifHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn create_class_box(ClassifHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_descript_class_box(
        ClassifHandle: Htuple,
        Dimensions: Htuple,
        ClassIdx: *mut Htuple,
        BoxIdx: *mut Htuple,
        BoxLowerBound: *mut Htuple,
        BoxHigherBound: *mut Htuple,
        BoxNumSamplesTrain: *mut Htuple,
        BoxNumSamplesWrong: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn descript_class_box(
        ClassifHandle: Hlong,
        Dimensions: Hlong,
        ClassIdx: *mut Hlong,
        BoxIdx: *mut Hlong,
        BoxLowerBound: *mut Hlong,
        BoxHigherBound: *mut Hlong,
        BoxNumSamplesTrain: *mut Hlong,
        BoxNumSamplesWrong: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_sampset_box(ClassifHandle: Htuple, SampKey: Htuple, Error: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn test_sampset_box(ClassifHandle: Hlong, SampKey: Hlong, Error: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_enquire_reject_class_box(
        ClassifHandle: Htuple,
        FeatureList: Htuple,
        Class: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_enquire_class_box(
        ClassifHandle: Htuple,
        FeatureList: Htuple,
        Class: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_class_box() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_class_box() -> Herror;
}
unsafe extern "C" {
    pub fn T_convert_map_type(
        Map: Hobject,
        MapConverted: *mut Hobject,
        NewType: Htuple,
        ImageWidth: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convert_map_type(
        Map: Hobject,
        MapConverted: *mut Hobject,
        NewType: *const ::std::os::raw::c_char,
        ImageWidth: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_vector_to_pose(
        WorldX: Htuple,
        WorldY: Htuple,
        WorldZ: Htuple,
        ImageRow: Htuple,
        ImageColumn: Htuple,
        CameraParam: Htuple,
        Method: Htuple,
        QualityType: Htuple,
        Pose: *mut Htuple,
        Quality: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_proj_hom_mat2d_to_pose(
        Homography: Htuple,
        CameraMatrix: Htuple,
        Method: Htuple,
        Pose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_radial_distortion_self_calibration(
        Contours: Hobject,
        SelectedContours: *mut Hobject,
        Width: Htuple,
        Height: Htuple,
        InlierThreshold: Htuple,
        RandSeed: Htuple,
        DistortionModel: Htuple,
        DistortionCenter: Htuple,
        PrincipalPointVar: Htuple,
        CameraParam: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_cam_par_to_cam_mat(
        CameraParam: Htuple,
        CameraMatrix: *mut Htuple,
        ImageWidth: *mut Htuple,
        ImageHeight: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_cam_mat_to_cam_par(
        CameraMatrix: Htuple,
        Kappa: Htuple,
        ImageWidth: Htuple,
        ImageHeight: Htuple,
        CameraParam: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_stationary_camera_self_calibration(
        NumImages: Htuple,
        ImageWidth: Htuple,
        ImageHeight: Htuple,
        ReferenceImage: Htuple,
        MappingSource: Htuple,
        MappingDest: Htuple,
        HomMatrices2D: Htuple,
        Rows1: Htuple,
        Cols1: Htuple,
        Rows2: Htuple,
        Cols2: Htuple,
        NumCorrespondences: Htuple,
        EstimationMethod: Htuple,
        CameraModel: Htuple,
        FixedCameraParams: Htuple,
        CameraMatrices: *mut Htuple,
        Kappa: *mut Htuple,
        RotationMatrices: *mut Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_rectangle_pose(
        Contour: Hobject,
        CameraParam: Htuple,
        Width: Htuple,
        Height: Htuple,
        WeightingMode: Htuple,
        ClippingFactor: Htuple,
        Pose: *mut Htuple,
        CovPose: *mut Htuple,
        Error: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_circle_pose(
        Contour: Hobject,
        CameraParam: Htuple,
        Radius: Htuple,
        OutputType: Htuple,
        Pose1: *mut Htuple,
        Pose2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_radiometric_self_calibration(
        Images: Hobject,
        ExposureRatios: Htuple,
        Features: Htuple,
        FunctionType: Htuple,
        Smoothness: Htuple,
        PolynomialDegree: Htuple,
        InverseResponse: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_map_image(Image: Hobject, Map: Hobject, ImageMapped: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn map_image(Image: Hobject, Map: Hobject, ImageMapped: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_radial_distortion_map(
        Map: *mut Hobject,
        CamParamIn: Htuple,
        CamParamOut: Htuple,
        MapType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_image_to_world_plane_map(
        Map: *mut Hobject,
        CameraParam: Htuple,
        WorldPose: Htuple,
        WidthIn: Htuple,
        HeightIn: Htuple,
        WidthMapped: Htuple,
        HeightMapped: Htuple,
        Scale: Htuple,
        MapType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_image_to_world_plane(
        Image: Hobject,
        ImageWorld: *mut Hobject,
        CameraParam: Htuple,
        WorldPose: Htuple,
        Width: Htuple,
        Height: Htuple,
        Scale: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_contour_to_world_plane_xld(
        Contours: Hobject,
        ContoursTrans: *mut Hobject,
        CameraParam: Htuple,
        WorldPose: Htuple,
        Scale: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_image_points_to_world_plane(
        CameraParam: Htuple,
        WorldPose: Htuple,
        Rows: Htuple,
        Cols: Htuple,
        Scale: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_origin_pose(
        PoseIn: Htuple,
        DX: Htuple,
        DY: Htuple,
        DZ: Htuple,
        PoseNewOrigin: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hand_eye_calibration(
        X: Htuple,
        Y: Htuple,
        Z: Htuple,
        Row: Htuple,
        Col: Htuple,
        NumPoints: Htuple,
        RobotPoses: Htuple,
        CameraParam: Htuple,
        Method: Htuple,
        QualityType: Htuple,
        CameraPose: *mut Htuple,
        CalibrationPose: *mut Htuple,
        Quality: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_pose_type(
        Pose: Htuple,
        OrderOfTransform: *mut Htuple,
        OrderOfRotation: *mut Htuple,
        ViewOfTransform: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convert_pose_type(
        PoseIn: Htuple,
        OrderOfTransform: Htuple,
        OrderOfRotation: Htuple,
        ViewOfTransform: Htuple,
        PoseOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_pose(
        TransX: Htuple,
        TransY: Htuple,
        TransZ: Htuple,
        RotX: Htuple,
        RotY: Htuple,
        RotZ: Htuple,
        OrderOfTransform: Htuple,
        OrderOfRotation: Htuple,
        ViewOfTransform: Htuple,
        Pose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_change_radial_distortion_contours_xld(
        Contours: Hobject,
        ContoursRectified: *mut Hobject,
        CamParamIn: Htuple,
        CamParamOut: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_change_radial_distortion_points(
        Row: Htuple,
        Col: Htuple,
        CamParamIn: Htuple,
        CamParamOut: Htuple,
        RowChanged: *mut Htuple,
        ColChanged: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_change_radial_distortion_image(
        Image: Hobject,
        Region: Hobject,
        ImageRectified: *mut Hobject,
        CamParamIn: Htuple,
        CamParamOut: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_change_radial_distortion_cam_par(
        Mode: Htuple,
        CamParamIn: Htuple,
        DistortionCoeffs: Htuple,
        CamParamOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_caltab(
        XNum: Htuple,
        YNum: Htuple,
        MarkDist: Htuple,
        DiameterRatio: Htuple,
        CalPlateDescr: Htuple,
        CalPlatePSFile: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_caltab(
        XNum: Hlong,
        YNum: Hlong,
        MarkDist: f64,
        DiameterRatio: f64,
        CalPlateDescr: *const ::std::os::raw::c_char,
        CalPlatePSFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_caltab(
        NumRows: Htuple,
        MarksPerRow: Htuple,
        Diameter: Htuple,
        FinderRow: Htuple,
        FinderColumn: Htuple,
        Polarity: Htuple,
        CalPlateDescr: Htuple,
        CalPlatePSFile: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_caltab(
        NumRows: Hlong,
        MarksPerRow: Hlong,
        Diameter: f64,
        FinderRow: Hlong,
        FinderColumn: Hlong,
        Polarity: *const ::std::os::raw::c_char,
        CalPlateDescr: *const ::std::os::raw::c_char,
        CalPlatePSFile: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_caltab_points(
        CalPlateDescr: Htuple,
        X: *mut Htuple,
        Y: *mut Htuple,
        Z: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_line_of_sight(
        Row: Htuple,
        Column: Htuple,
        CameraParam: Htuple,
        PX: *mut Htuple,
        PY: *mut Htuple,
        PZ: *mut Htuple,
        QX: *mut Htuple,
        QY: *mut Htuple,
        QZ: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_project_hom_point_hom_mat3d(
        HomMat3D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Pw: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
        Qw: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_project_point_hom_mat3d(
        HomMat3D: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Qx: *mut Htuple,
        Qy: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_project_3d_point(
        X: Htuple,
        Y: Htuple,
        Z: Htuple,
        CameraParam: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_cam_par_pose_to_hom_mat3d(
        CameraParam: Htuple,
        Pose: Htuple,
        HomMat3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_hom_mat3d_to_pose(HomMat3D: Htuple, Pose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_pose_to_hom_mat3d(Pose: Htuple, HomMat3D: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_cam_par(SerializedItemHandle: Htuple, CameraParam: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_cam_par(CameraParam: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_pose(SerializedItemHandle: Htuple, Pose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_pose(Pose: Htuple, SerializedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_pose(PoseFile: Htuple, Pose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_pose(Pose: Htuple, PoseFile: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_cam_par(CamParFile: Htuple, CameraParam: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_cam_par(CameraParam: Htuple, CamParFile: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_sim_caltab(
        SimImage: *mut Hobject,
        CalPlateDescr: Htuple,
        CameraParam: Htuple,
        CalPlatePose: Htuple,
        GrayBackground: Htuple,
        GrayPlate: Htuple,
        GrayMarks: Htuple,
        ScaleFac: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_caltab(
        WindowHandle: Htuple,
        CalPlateDescr: Htuple,
        CameraParam: Htuple,
        CalPlatePose: Htuple,
        ScaleFac: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_camera_calibration(
        NX: Htuple,
        NY: Htuple,
        NZ: Htuple,
        NRow: Htuple,
        NCol: Htuple,
        StartCamParam: Htuple,
        NStartPose: Htuple,
        EstimateParams: Htuple,
        CameraParam: *mut Htuple,
        NFinalPose: *mut Htuple,
        Errors: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_marks_and_pose(
        Image: Hobject,
        CalPlateRegion: Hobject,
        CalPlateDescr: Htuple,
        StartCamParam: Htuple,
        StartThresh: Htuple,
        DeltaThresh: Htuple,
        MinThresh: Htuple,
        Alpha: Htuple,
        MinContLength: Htuple,
        MaxDiamMarks: Htuple,
        RCoord: *mut Htuple,
        CCoord: *mut Htuple,
        StartPose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_caltab(
        Image: Hobject,
        CalPlate: *mut Hobject,
        CalPlateDescr: Htuple,
        SizeGauss: Htuple,
        MarkThresh: Htuple,
        MinDiamMarks: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn find_caltab(
        Image: Hobject,
        CalPlate: *mut Hobject,
        CalPlateDescr: *const ::std::os::raw::c_char,
        SizeGauss: Hlong,
        MarkThresh: Hlong,
        MinDiamMarks: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_camera_setup_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_camera_setup_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_camera_setup_model(CameraSetupModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_camera_setup_model(CameraSetupModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_camera_setup_model(
        CameraSetupModelID: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_camera_setup_model(
        CameraSetupModelID: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_camera_setup_model(
        SerializedItemHandle: Htuple,
        CameraSetupModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_camera_setup_model(
        SerializedItemHandle: Hlong,
        CameraSetupModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_camera_setup_model(CameraSetupModelID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_camera_setup_model(
        CameraSetupModelID: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_camera_setup_model(FileName: Htuple, CameraSetupModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_camera_setup_model(
        FileName: *const ::std::os::raw::c_char,
        CameraSetupModelID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_camera_setup_param(
        CameraSetupModelID: Htuple,
        CameraIdx: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_camera_setup_param(
        CameraSetupModelID: Hlong,
        CameraIdx: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_camera_setup_param(
        CameraSetupModelID: Htuple,
        CameraIdx: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_camera_setup_param(
        CameraSetupModelID: Hlong,
        CameraIdx: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_camera_setup_cam_param(
        CameraSetupModelID: Htuple,
        CameraIdx: Htuple,
        CameraType: Htuple,
        CameraParam: Htuple,
        CameraPose: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_camera_setup_model(
        NumCameras: Htuple,
        CameraSetupModelID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_camera_setup_model(NumCameras: Hlong, CameraSetupModelID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_calib_data() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_calib_data() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_calib_data(CalibDataID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_calib_data(CalibDataID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_calib_data(
        SerializedItemHandle: Htuple,
        CalibDataID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_calib_data(SerializedItemHandle: Hlong, CalibDataID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_calib_data(CalibDataID: Htuple, SerializedItemHandle: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn serialize_calib_data(CalibDataID: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_calib_data(FileName: Htuple, CalibDataID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_calib_data(
        FileName: *const ::std::os::raw::c_char,
        CalibDataID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_calib_data(CalibDataID: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_calib_data(CalibDataID: Hlong, FileName: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_calibrate_hand_eye(CalibDataID: Htuple, Errors: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_calibrate_cameras(CalibDataID: Htuple, Error: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn calibrate_cameras(CalibDataID: Hlong, Error: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_calib_data(CalibDataID: Htuple, ItemType: Htuple, ItemIdx: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn remove_calib_data(
        CalibDataID: Hlong,
        ItemType: *const ::std::os::raw::c_char,
        ItemIdx: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_calib_data(
        CalibDataID: Htuple,
        ItemType: Htuple,
        ItemIdx: Htuple,
        DataName: Htuple,
        DataValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_calib_data(
        CalibDataID: Hlong,
        ItemType: *const ::std::os::raw::c_char,
        ItemIdx: Hlong,
        DataName: *const ::std::os::raw::c_char,
        DataValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_calib_object(
        Image: Hobject,
        CalibDataID: Htuple,
        CameraIdx: Htuple,
        CalibObjIdx: Htuple,
        CalibObjPoseIdx: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_calib_data_observ(
        CalibDataID: Htuple,
        CameraIdx: Htuple,
        CalibObjIdx: Htuple,
        CalibObjPoseIdx: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn remove_calib_data_observ(
        CalibDataID: Hlong,
        CameraIdx: Hlong,
        CalibObjIdx: Hlong,
        CalibObjPoseIdx: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_calib_data_observ_contours(
        Contours: *mut Hobject,
        CalibDataID: Htuple,
        ContourName: Htuple,
        CameraIdx: Htuple,
        CalibObjIdx: Htuple,
        CalibObjPoseIdx: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_calib_data_observ_contours(
        Contours: *mut Hobject,
        CalibDataID: Hlong,
        ContourName: *const ::std::os::raw::c_char,
        CameraIdx: Hlong,
        CalibObjIdx: Hlong,
        CalibObjPoseIdx: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_calib_data_observ_pose(
        CalibDataID: Htuple,
        CameraIdx: Htuple,
        CalibObjIdx: Htuple,
        CalibObjPoseIdx: Htuple,
        ObjInCameraPose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_calib_data_observ_pose(
        CalibDataID: Htuple,
        CameraIdx: Htuple,
        CalibObjIdx: Htuple,
        CalibObjPoseIdx: Htuple,
        ObjInCameraPose: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_calib_data_observ_points(
        CalibDataID: Htuple,
        CameraIdx: Htuple,
        CalibObjIdx: Htuple,
        CalibObjPoseIdx: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Index: *mut Htuple,
        Pose: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_calib_data_observ_points(
        CalibDataID: Htuple,
        CameraIdx: Htuple,
        CalibObjIdx: Htuple,
        CalibObjPoseIdx: Htuple,
        Row: Htuple,
        Column: Htuple,
        Index: Htuple,
        Pose: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_calib_data_observ_indices(
        CalibDataID: Htuple,
        ItemType: Htuple,
        ItemIdx: Htuple,
        Index1: *mut Htuple,
        Index2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_calib_data(
        CalibDataID: Htuple,
        ItemType: Htuple,
        ItemIdx: Htuple,
        DataName: Htuple,
        DataValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_calib_data(
        CalibDataID: Hlong,
        ItemType: *const ::std::os::raw::c_char,
        ItemIdx: Hlong,
        DataName: *const ::std::os::raw::c_char,
        DataValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_calib_data_calib_object(
        CalibDataID: Htuple,
        CalibObjIdx: Htuple,
        CalibObjDescr: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_calib_data_calib_object(
        CalibDataID: Hlong,
        CalibObjIdx: Hlong,
        CalibObjDescr: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_calib_data_cam_param(
        CalibDataID: Htuple,
        CameraIdx: Htuple,
        CameraType: Htuple,
        CameraParam: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_calib_data(
        CalibSetup: Htuple,
        NumCameras: Htuple,
        NumCalibObjects: Htuple,
        CalibDataID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_calib_data(
        CalibSetup: *const ::std::os::raw::c_char,
        NumCameras: Hlong,
        NumCalibObjects: Hlong,
        CalibDataID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_bead_inspection_param(
        BeadInspectionModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_bead_inspection_param(
        BeadInspectionModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_bead_inspection_param(
        BeadInspectionModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_bead_inspection_param(
        BeadInspectionModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_bead_inspection_model(
        Image: Hobject,
        LeftContour: *mut Hobject,
        RightContour: *mut Hobject,
        ErrorSegment: *mut Hobject,
        BeadInspectionModel: Htuple,
        ErrorType: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_bead_inspection_model(BeadInspectionModel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_bead_inspection_model(BeadInspectionModel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_bead_inspection_model(
        BeadContour: Hobject,
        TargetThickness: Htuple,
        ThicknessTolerance: Htuple,
        PositionTolerance: Htuple,
        Polarity: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        BeadInspectionModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_bead_inspection_model(
        BeadContour: Hobject,
        TargetThickness: Hlong,
        ThicknessTolerance: Hlong,
        PositionTolerance: Hlong,
        Polarity: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: Hlong,
        BeadInspectionModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_bar_code_model(
        SerializedItemHandle: Htuple,
        BarCodeHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_bar_code_model(
        SerializedItemHandle: Hlong,
        BarCodeHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_bar_code_model(
        BarCodeHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_bar_code_model(
        BarCodeHandle: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_bar_code_model(FileName: Htuple, BarCodeHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_bar_code_model(
        FileName: *const ::std::os::raw::c_char,
        BarCodeHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_bar_code_model(BarCodeHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_bar_code_model(
        BarCodeHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_bar_code_object(
        BarCodeObjects: *mut Hobject,
        BarCodeHandle: Htuple,
        CandidateHandle: Htuple,
        ObjectName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_bar_code_object(
        BarCodeObjects: *mut Hobject,
        BarCodeHandle: Hlong,
        CandidateHandle: *const ::std::os::raw::c_char,
        ObjectName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_bar_code_result(
        BarCodeHandle: Htuple,
        CandidateHandle: Htuple,
        ResultName: Htuple,
        BarCodeResults: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_bar_code_result(
        BarCodeHandle: Hlong,
        CandidateHandle: *const ::std::os::raw::c_char,
        ResultName: *const ::std::os::raw::c_char,
        BarCodeResults: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decode_bar_code_rectangle2(
        Image: Hobject,
        BarCodeHandle: Htuple,
        CodeType: Htuple,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
        DecodedDataStrings: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decode_bar_code_rectangle2(
        Image: Hobject,
        BarCodeHandle: Hlong,
        CodeType: *const ::std::os::raw::c_char,
        Row: f64,
        Column: f64,
        Phi: f64,
        Length1: f64,
        Length2: f64,
        DecodedDataStrings: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_bar_code(
        Image: Hobject,
        SymbolRegions: *mut Hobject,
        BarCodeHandle: Htuple,
        CodeType: Htuple,
        DecodedDataStrings: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn find_bar_code(
        Image: Hobject,
        SymbolRegions: *mut Hobject,
        BarCodeHandle: Hlong,
        CodeType: *const ::std::os::raw::c_char,
        DecodedDataStrings: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_bar_code_params(
        BarCodeHandle: Htuple,
        Properties: Htuple,
        GenParamName: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn query_bar_code_params(
        BarCodeHandle: Hlong,
        Properties: *const ::std::os::raw::c_char,
        GenParamName: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_bar_code_param_specific(
        BarCodeHandle: Htuple,
        CodeTypes: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_bar_code_param_specific(
        BarCodeHandle: Hlong,
        CodeTypes: *const ::std::os::raw::c_char,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_bar_code_param(
        BarCodeHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_bar_code_param(
        BarCodeHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_bar_code_param_specific(
        BarCodeHandle: Htuple,
        CodeTypes: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_bar_code_param(
        BarCodeHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_bar_code_param(
        BarCodeHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_all_bar_code_models() -> Herror;
}
unsafe extern "C" {
    pub fn clear_all_bar_code_models() -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_bar_code_model(BarCodeHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_bar_code_model(BarCodeHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_bar_code_model(
        GenParamName: Htuple,
        GenParamValue: Htuple,
        BarCodeHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_bar_code_model(
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
        BarCodeHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_bg_esti(BgEstiHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_bg_esti(BgEstiHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_give_bg_esti(BackgroundImage: *mut Hobject, BgEstiHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn give_bg_esti(BackgroundImage: *mut Hobject, BgEstiHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_update_bg_esti(
        PresentImage: Hobject,
        UpDateRegion: Hobject,
        BgEstiHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn update_bg_esti(
        PresentImage: Hobject,
        UpDateRegion: Hobject,
        BgEstiHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_run_bg_esti(
        PresentImage: Hobject,
        ForegroundRegion: *mut Hobject,
        BgEstiHandle: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn run_bg_esti(
        PresentImage: Hobject,
        ForegroundRegion: *mut Hobject,
        BgEstiHandle: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_bg_esti_params(
        BgEstiHandle: Htuple,
        Syspar1: *mut Htuple,
        Syspar2: *mut Htuple,
        GainMode: *mut Htuple,
        Gain1: *mut Htuple,
        Gain2: *mut Htuple,
        AdaptMode: *mut Htuple,
        MinDiff: *mut Htuple,
        StatNum: *mut Htuple,
        ConfidenceC: *mut Htuple,
        TimeC: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_bg_esti_params(
        BgEstiHandle: Hlong,
        Syspar1: *mut f64,
        Syspar2: *mut f64,
        GainMode: *mut ::std::os::raw::c_char,
        Gain1: *mut f64,
        Gain2: *mut f64,
        AdaptMode: *mut ::std::os::raw::c_char,
        MinDiff: *mut f64,
        StatNum: *mut Hlong,
        ConfidenceC: *mut f64,
        TimeC: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_bg_esti_params(
        BgEstiHandle: Htuple,
        Syspar1: Htuple,
        Syspar2: Htuple,
        GainMode: Htuple,
        Gain1: Htuple,
        Gain2: Htuple,
        AdaptMode: Htuple,
        MinDiff: Htuple,
        StatNum: Htuple,
        ConfidenceC: Htuple,
        TimeC: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_bg_esti_params(
        BgEstiHandle: Hlong,
        Syspar1: f64,
        Syspar2: f64,
        GainMode: *const ::std::os::raw::c_char,
        Gain1: f64,
        Gain2: f64,
        AdaptMode: *const ::std::os::raw::c_char,
        MinDiff: f64,
        StatNum: Hlong,
        ConfidenceC: f64,
        TimeC: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_bg_esti(
        InitializeImage: Hobject,
        Syspar1: Htuple,
        Syspar2: Htuple,
        GainMode: Htuple,
        Gain1: Htuple,
        Gain2: Htuple,
        AdaptMode: Htuple,
        MinDiff: Htuple,
        StatNum: Htuple,
        ConfidenceC: Htuple,
        TimeC: Htuple,
        BgEstiHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_bg_esti(
        InitializeImage: Hobject,
        Syspar1: f64,
        Syspar2: f64,
        GainMode: *const ::std::os::raw::c_char,
        Gain1: f64,
        Gain2: f64,
        AdaptMode: *const ::std::os::raw::c_char,
        MinDiff: f64,
        StatNum: Hlong,
        ConfidenceC: f64,
        TimeC: f64,
        BgEstiHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_bg_esti() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_bg_esti() -> Herror;
}
unsafe extern "C" {
    pub fn T_control_io_channel(
        IOChannelHandle: Htuple,
        Action: Htuple,
        Argument: Htuple,
        Result: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_io_channel(
        IOChannelHandle: Htuple,
        Value: Htuple,
        Status: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_io_channel(
        IOChannelHandle: Htuple,
        Value: *mut Htuple,
        Status: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_io_channel_param(
        IOChannelHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_io_channel_param(
        IOChannelHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_io_channel(IOChannelHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_io_channel(IOChannelHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_io_channel(
        IODeviceHandle: Htuple,
        IOChannelName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        IOChannelHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_io_device(
        IODeviceHandle: Htuple,
        IOChannelName: Htuple,
        Query: Htuple,
        Result: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_control_io_device(
        IODeviceHandle: Htuple,
        Action: Htuple,
        Argument: Htuple,
        Result: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_io_device_param(
        IODeviceHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_io_device_param(
        IODeviceHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_io_device_param(
        IODeviceHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_io_device_param(
        IODeviceHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_io_device(IODeviceHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_io_device(IODeviceHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_io_device(
        IOInterfaceName: Htuple,
        IODeviceName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        IODeviceHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_control_io_interface(
        IOInterfaceName: Htuple,
        Action: Htuple,
        Argument: Htuple,
        Result: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_io_interface(
        IOInterfaceName: Htuple,
        Query: Htuple,
        Result: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_framegrabber_param(AcqHandle: Htuple, Param: Htuple, Value: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn get_framegrabber_param(
        AcqHandle: Hlong,
        Param: *const ::std::os::raw::c_char,
        Value: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_framegrabber_param(AcqHandle: Htuple, Param: Htuple, Value: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_framegrabber_param(
        AcqHandle: Hlong,
        Param: *const ::std::os::raw::c_char,
        Value: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_framegrabber_callback(
        AcqHandle: Htuple,
        CallbackType: Htuple,
        CallbackFunction: *mut Htuple,
        UserContext: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_framegrabber_callback(
        AcqHandle: Hlong,
        CallbackType: *const ::std::os::raw::c_char,
        CallbackFunction: *mut Hlong,
        UserContext: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_framegrabber_callback(
        AcqHandle: Htuple,
        CallbackType: Htuple,
        CallbackFunction: Htuple,
        UserContext: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_framegrabber_callback(
        AcqHandle: Hlong,
        CallbackType: *const ::std::os::raw::c_char,
        CallbackFunction: Hlong,
        UserContext: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_grab_data_async(
        Image: *mut Hobject,
        Region: *mut Hobject,
        Contours: *mut Hobject,
        AcqHandle: Htuple,
        MaxDelay: Htuple,
        Data: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn grab_data_async(
        Image: *mut Hobject,
        Region: *mut Hobject,
        Contours: *mut Hobject,
        AcqHandle: Hlong,
        MaxDelay: f64,
        Data: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_grab_data(
        Image: *mut Hobject,
        Region: *mut Hobject,
        Contours: *mut Hobject,
        AcqHandle: Htuple,
        Data: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn grab_data(
        Image: *mut Hobject,
        Region: *mut Hobject,
        Contours: *mut Hobject,
        AcqHandle: Hlong,
        Data: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_grab_image_async(Image: *mut Hobject, AcqHandle: Htuple, MaxDelay: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn grab_image_async(Image: *mut Hobject, AcqHandle: Hlong, MaxDelay: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_grab_image_start(AcqHandle: Htuple, MaxDelay: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn grab_image_start(AcqHandle: Hlong, MaxDelay: f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_grab_image(Image: *mut Hobject, AcqHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn grab_image(Image: *mut Hobject, AcqHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_info_framegrabber(
        Name: Htuple,
        Query: Htuple,
        Information: *mut Htuple,
        ValueList: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_close_all_framegrabbers() -> Herror;
}
unsafe extern "C" {
    pub fn close_all_framegrabbers() -> Herror;
}
unsafe extern "C" {
    pub fn T_close_framegrabber(AcqHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn close_framegrabber(AcqHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_open_framegrabber(
        Name: Htuple,
        HorizontalResolution: Htuple,
        VerticalResolution: Htuple,
        ImageWidth: Htuple,
        ImageHeight: Htuple,
        StartRow: Htuple,
        StartColumn: Htuple,
        Field: Htuple,
        BitsPerChannel: Htuple,
        ColorSpace: Htuple,
        Generic: Htuple,
        ExternalTrigger: Htuple,
        CameraType: Htuple,
        Device: Htuple,
        Port: Htuple,
        LineIn: Htuple,
        AcqHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn open_framegrabber(
        Name: *const ::std::os::raw::c_char,
        HorizontalResolution: Hlong,
        VerticalResolution: Hlong,
        ImageWidth: Hlong,
        ImageHeight: Hlong,
        StartRow: Hlong,
        StartColumn: Hlong,
        Field: *const ::std::os::raw::c_char,
        BitsPerChannel: Hlong,
        ColorSpace: *const ::std::os::raw::c_char,
        Generic: f64,
        ExternalTrigger: *const ::std::os::raw::c_char,
        CameraType: *const ::std::os::raw::c_char,
        Device: *const ::std::os::raw::c_char,
        Port: Hlong,
        LineIn: Hlong,
        AcqHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_framegrabber_lut(
        AcqHandle: Htuple,
        ImageRed: *mut Htuple,
        ImageGreen: *mut Htuple,
        ImageBlue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_framegrabber_lut(
        AcqHandle: Htuple,
        ImageRed: Htuple,
        ImageGreen: Htuple,
        ImageBlue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_scene_3d_label(
        Scene3D: Htuple,
        Text: Htuple,
        ReferencePoint: Htuple,
        Position: Htuple,
        RelatesTo: Htuple,
        LabelIndex: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_scene_3d_label(Scene3D: Htuple, LabelIndex: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn remove_scene_3d_label(Scene3D: Hlong, LabelIndex: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_scene_3d_label_param(
        Scene3D: Htuple,
        LabelIndex: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_texture_inspection_model_image(
        Image: Hobject,
        TextureInspectionModel: Htuple,
        Indices: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_texture_inspection_model_image(
        Image: Hobject,
        TextureInspectionModel: Hlong,
        Indices: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_texture_inspection_model(
        Image: Hobject,
        NoveltyRegion: *mut Hobject,
        TextureInspectionModel: Htuple,
        TextureInspectionResultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn apply_texture_inspection_model(
        Image: Hobject,
        NoveltyRegion: *mut Hobject,
        TextureInspectionModel: Hlong,
        TextureInspectionResultID: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_bilateral_filter(
        Image: Hobject,
        ImageJoint: Hobject,
        ImageBilateral: *mut Hobject,
        SigmaSpatial: Htuple,
        SigmaRange: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn bilateral_filter(
        Image: Hobject,
        ImageJoint: Hobject,
        ImageBilateral: *mut Hobject,
        SigmaSpatial: f64,
        SigmaRange: f64,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_ocr_class_cnn(OCRHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_ocr_class_cnn(OCRHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_texture_inspection_model(TextureInspectionModel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_texture_inspection_model(TextureInspectionModel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_texture_inspection_result(TextureInspectionResultID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_texture_inspection_result(TextureInspectionResultID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_convert_coordinates_image_to_window(
        WindowHandle: Htuple,
        RowImage: Htuple,
        ColumnImage: Htuple,
        RowWindow: *mut Htuple,
        ColumnWindow: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convert_coordinates_image_to_window(
        WindowHandle: Hlong,
        RowImage: f64,
        ColumnImage: f64,
        RowWindow: *mut f64,
        ColumnWindow: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_convert_coordinates_window_to_image(
        WindowHandle: Htuple,
        RowWindow: Htuple,
        ColumnWindow: Htuple,
        RowImage: *mut Htuple,
        ColumnImage: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn convert_coordinates_window_to_image(
        WindowHandle: Hlong,
        RowWindow: f64,
        ColumnWindow: f64,
        RowImage: *mut f64,
        ColumnImage: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_texture_inspection_model(
        ModelType: Htuple,
        TextureInspectionModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_texture_inspection_model(
        ModelType: *const ::std::os::raw::c_char,
        TextureInspectionModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_dual_quat(
        SerializedItemHandle: Htuple,
        DualQuaternion: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_ocr_class_cnn(
        SerializedItemHandle: Htuple,
        OCRHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_ocr_class_cnn(SerializedItemHandle: Hlong, OCRHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_texture_inspection_model(
        SerializedItemHandle: Htuple,
        TextureInspectionModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_texture_inspection_model(
        SerializedItemHandle: Hlong,
        TextureInspectionModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_disp_text(
        WindowHandle: Htuple,
        String: Htuple,
        CoordSystem: Htuple,
        Row: Htuple,
        Column: Htuple,
        Color: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_multi_class_cnn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_multi_class_cnn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Confidence: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_single_class_cnn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Num: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_do_ocr_word_cnn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Htuple,
        Expression: Htuple,
        NumAlternatives: Htuple,
        NumCorrections: Htuple,
        Class: *mut Htuple,
        Confidence: *mut Htuple,
        Word: *mut Htuple,
        Score: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn do_ocr_word_cnn(
        Character: Hobject,
        Image: Hobject,
        OCRHandle: Hlong,
        Expression: *const ::std::os::raw::c_char,
        NumAlternatives: Hlong,
        NumCorrections: Hlong,
        Class: *mut ::std::os::raw::c_char,
        Confidence: *mut f64,
        Word: *mut ::std::os::raw::c_char,
        Score: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_compose(
        DualQuaternionLeft: Htuple,
        DualQuaternionRight: Htuple,
        DualQuaternionComposed: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_conjugate(
        DualQuaternion: Htuple,
        DualQuaternionConjugate: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_interpolate(
        DualQuaternionStart: Htuple,
        DualQuaternionEnd: Htuple,
        InterpPos: Htuple,
        DualQuaternionInterpolated: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_normalize(
        DualQuaternion: Htuple,
        DualQuaternionNormalized: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_to_hom_mat3d(DualQuaternion: Htuple, HomMat3D: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_to_pose(DualQuaternion: Htuple, Pose: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_to_screw(
        DualQuaternion: Htuple,
        ScrewFormat: Htuple,
        AxisDirectionX: *mut Htuple,
        AxisDirectionY: *mut Htuple,
        AxisDirectionZ: *mut Htuple,
        AxisMomentOrPointX: *mut Htuple,
        AxisMomentOrPointY: *mut Htuple,
        AxisMomentOrPointZ: *mut Htuple,
        Rotation: *mut Htuple,
        Translation: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_trans_line_3d(
        DualQuaternion: Htuple,
        LineFormat: Htuple,
        LineDirectionX: Htuple,
        LineDirectionY: Htuple,
        LineDirectionZ: Htuple,
        LineMomentOrPointX: Htuple,
        LineMomentOrPointY: Htuple,
        LineMomentOrPointZ: Htuple,
        TransLineDirectionX: *mut Htuple,
        TransLineDirectionY: *mut Htuple,
        TransLineDirectionZ: *mut Htuple,
        TransLineMomentOrPointX: *mut Htuple,
        TransLineMomentOrPointY: *mut Htuple,
        TransLineMomentOrPointZ: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_edges_object_model_3d(
        ObjectModel3D: Htuple,
        MinAmplitude: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectModel3DEdges: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn edges_object_model_3d(
        ObjectModel3D: Hlong,
        MinAmplitude: f64,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
        ObjectModel3DEdges: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_ncc_models(
        Image: Hobject,
        ModelIDs: Htuple,
        AngleStart: Htuple,
        AngleExtent: Htuple,
        MinScore: Htuple,
        NumMatches: Htuple,
        MaxOverlap: Htuple,
        SubPixel: Htuple,
        NumLevels: Htuple,
        Row: *mut Htuple,
        Column: *mut Htuple,
        Angle: *mut Htuple,
        Score: *mut Htuple,
        Model: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_surface_model_image(
        Image: Hobject,
        SurfaceModelID: Htuple,
        ObjectModel3D: Htuple,
        RelSamplingDistance: Htuple,
        KeyPointFraction: Htuple,
        MinScore: Htuple,
        ReturnResultHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Pose: *mut Htuple,
        Score: *mut Htuple,
        SurfaceMatchingResultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_flush_buffer(WindowHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn flush_buffer(WindowHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_ncc_model_region(ModelRegion: *mut Hobject, ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_ncc_model_region(ModelRegion: *mut Hobject, ModelID: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_params_ocr_class_cnn(
        OCRHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_params_ocr_class_cnn(
        OCRHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_rgba(
        WindowHandle: Htuple,
        Red: *mut Htuple,
        Green: *mut Htuple,
        Blue: *mut Htuple,
        Alpha: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_stereo_model_object_model_3d(
        StereoModelID: Htuple,
        GenParamName: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_stereo_model_object_model_3d(
        StereoModelID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        ObjectModel3D: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_texture_inspection_model_image(
        ModelImages: *mut Hobject,
        TextureInspectionModel: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_texture_inspection_model_image(
        ModelImages: *mut Hobject,
        TextureInspectionModel: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_texture_inspection_model_param(
        TextureInspectionModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_texture_inspection_model_param(
        TextureInspectionModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_texture_inspection_result_object(
        Object: *mut Hobject,
        TextureInspectionResultID: Htuple,
        ResultName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_texture_inspection_result_object(
        Object: *mut Hobject,
        TextureInspectionResultID: Hlong,
        ResultName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_guided_filter(
        Image: Hobject,
        ImageGuide: Hobject,
        ImageGuided: *mut Hobject,
        Radius: Htuple,
        Amplitude: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn guided_filter(
        Image: Hobject,
        ImageGuide: Hobject,
        ImageGuided: *mut Hobject,
        Radius: Hlong,
        Amplitude: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_interleave_channels(
        MultichannelImage: Hobject,
        InterleavedImage: *mut Hobject,
        PixelFormat: Htuple,
        RowBytes: Htuple,
        Alpha: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn interleave_channels(
        MultichannelImage: Hobject,
        InterleavedImage: *mut Hobject,
        PixelFormat: *const ::std::os::raw::c_char,
        RowBytes: *const ::std::os::raw::c_char,
        Alpha: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pose_to_dual_quat(Pose: Htuple, DualQuaternion: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_params_ocr_class_cnn(OCRHandle: Htuple, GenParamName: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn query_params_ocr_class_cnn(
        OCRHandle: Hlong,
        GenParamName: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_ocr_class_cnn(FileName: Htuple, OCRHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_ocr_class_cnn(
        FileName: *const ::std::os::raw::c_char,
        OCRHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_texture_inspection_model(
        FileName: Htuple,
        TextureInspectionModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_texture_inspection_model(
        FileName: *const ::std::os::raw::c_char,
        TextureInspectionModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_refine_surface_model_pose_image(
        Image: Hobject,
        SurfaceModelID: Htuple,
        ObjectModel3D: Htuple,
        InitialPose: Htuple,
        MinScore: Htuple,
        ReturnResultHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        Pose: *mut Htuple,
        Score: *mut Htuple,
        SurfaceMatchingResultID: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_texture_inspection_model_image(
        TextureInspectionModel: Htuple,
        Indices: Htuple,
        RemainingIndices: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_screw_to_dual_quat(
        ScrewFormat: Htuple,
        AxisDirectionX: Htuple,
        AxisDirectionY: Htuple,
        AxisDirectionZ: Htuple,
        AxisMomentOrPointX: Htuple,
        AxisMomentOrPointY: Htuple,
        AxisMomentOrPointZ: Htuple,
        Rotation: Htuple,
        Translation: Htuple,
        DualQuaternion: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_segment_image_mser(
        Image: Hobject,
        MSERDark: *mut Hobject,
        MSERLight: *mut Hobject,
        Polarity: Htuple,
        MinArea: Htuple,
        MaxArea: Htuple,
        Delta: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_mouse_double_click_event(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Button: Htuple,
        Processed: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn send_mouse_double_click_event(
        WindowHandle: Hlong,
        Row: Hlong,
        Column: Hlong,
        Button: Hlong,
        Processed: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_mouse_down_event(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Button: Htuple,
        Processed: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn send_mouse_down_event(
        WindowHandle: Hlong,
        Row: Hlong,
        Column: Hlong,
        Button: Hlong,
        Processed: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_mouse_drag_event(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Button: Htuple,
        Processed: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn send_mouse_drag_event(
        WindowHandle: Hlong,
        Row: Hlong,
        Column: Hlong,
        Button: Hlong,
        Processed: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_mouse_up_event(
        WindowHandle: Htuple,
        Row: Htuple,
        Column: Htuple,
        Button: Htuple,
        Processed: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn send_mouse_up_event(
        WindowHandle: Hlong,
        Row: Hlong,
        Column: Hlong,
        Button: Hlong,
        Processed: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_dual_quat(
        DualQuaternion: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_ocr_class_cnn(
        OCRHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_ocr_class_cnn(OCRHandle: Hlong, SerializedItemHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_texture_inspection_model(
        TextureInspectionModel: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_texture_inspection_model(
        TextureInspectionModel: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_content_update_callback(
        WindowHandle: Htuple,
        CallbackFunction: Htuple,
        CallbackContext: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_content_update_callback(
        WindowHandle: Hlong,
        CallbackFunction: Hlong,
        CallbackContext: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_rgba(
        WindowHandle: Htuple,
        Red: Htuple,
        Green: Htuple,
        Blue: Htuple,
        Alpha: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_rgba(
        WindowHandle: Hlong,
        Red: Hlong,
        Green: Hlong,
        Blue: Hlong,
        Alpha: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_surface_model_param(
        SurfaceModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_surface_model_param(
        SurfaceModelID: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_texture_inspection_model_param(
        TextureInspectionModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_texture_inspection_model_param(
        TextureInspectionModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_texture_inspection_model(TextureInspectionModel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn train_texture_inspection_model(TextureInspectionModel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_texture_inspection_model(
        TextureInspectionModel: Htuple,
        FileName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_texture_inspection_model(
        TextureInspectionModel: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_uncalibrated_photometric_stereo(
        Images: Hobject,
        NormalField: *mut Hobject,
        Gradient: *mut Hobject,
        Albedo: *mut Hobject,
        ResultType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_dl_classifier(
        Images: Hobject,
        DLClassifierHandle: Htuple,
        DLClassifierResultHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn apply_dl_classifier(
        Images: Hobject,
        DLClassifierHandle: Hlong,
        DLClassifierResultHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_dl_classifier(DLClassifierHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_dl_classifier(DLClassifierHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_dl_classifier_result(DLClassifierResultHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_dl_classifier_result(DLClassifierResultHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_dl_classifier_train_result(DLClassifierTrainResultHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_dl_classifier_train_result(DLClassifierTrainResultHandle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_structured_light_model(StructuredLightModel: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_structured_light_model(StructuredLightModel: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_structured_light_model(
        ModelType: Htuple,
        StructuredLightModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn create_structured_light_model(
        ModelType: *const ::std::os::raw::c_char,
        StructuredLightModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decode_structured_light_pattern(
        CameraImages: Hobject,
        StructuredLightModel: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn decode_structured_light_pattern(
        CameraImages: Hobject,
        StructuredLightModel: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_dl_classifier(
        SerializedItemHandle: Htuple,
        DLClassifierHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_dl_classifier(
        SerializedItemHandle: Hlong,
        DLClassifierHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_structured_light_model(
        SerializedItemHandle: Htuple,
        StructuredLightModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_structured_light_model(
        SerializedItemHandle: Hlong,
        StructuredLightModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_cc_min_points(
        Contour1: Hobject,
        Contour2: Hobject,
        Mode: Htuple,
        DistanceMin: *mut Htuple,
        Row1: *mut Htuple,
        Column1: *mut Htuple,
        Row2: *mut Htuple,
        Column2: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_cc_min_points(
        Contour1: Hobject,
        Contour2: Hobject,
        Mode: *const ::std::os::raw::c_char,
        DistanceMin: *mut f64,
        Row1: *mut f64,
        Column1: *mut f64,
        Row2: *mut f64,
        Column2: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fuse_object_model_3d(
        ObjectModel3D: Htuple,
        BoundingBox: Htuple,
        Resolution: Htuple,
        SurfaceTolerance: Htuple,
        MinThickness: Htuple,
        Smoothing: Htuple,
        NormalDirection: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        ObjectModel3DFusion: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_structured_light_pattern(
        PatternImages: *mut Hobject,
        StructuredLightModel: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn gen_structured_light_pattern(
        PatternImages: *mut Hobject,
        StructuredLightModel: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_classifier_param(
        DLClassifierHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_dl_classifier_param(
        DLClassifierHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_classifier_result(
        DLClassifierResultHandle: Htuple,
        Index: Htuple,
        GenResultName: Htuple,
        GenResultValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_dl_classifier_result(
        DLClassifierResultHandle: Hlong,
        Index: *const ::std::os::raw::c_char,
        GenResultName: *const ::std::os::raw::c_char,
        GenResultValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_classifier_train_result(
        DLClassifierTrainResultHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_dl_classifier_train_result(
        DLClassifierTrainResultHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_structured_light_model_param(
        StructuredLightModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_structured_light_model_param(
        StructuredLightModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_structured_light_object(
        Object: *mut Hobject,
        StructuredLightModel: Htuple,
        ObjectName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn get_structured_light_object(
        Object: *mut Hobject,
        StructuredLightModel: Hlong,
        ObjectName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_height_width_ratio(
        Regions: Hobject,
        Height: *mut Htuple,
        Width: *mut Htuple,
        Ratio: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn height_width_ratio(
        Regions: Hobject,
        Height: *mut Hlong,
        Width: *mut Hlong,
        Ratio: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_height_width_ratio_xld(
        XLD: Hobject,
        Height: *mut Htuple,
        Width: *mut Htuple,
        Ratio: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn height_width_ratio_xld(
        XLD: Hobject,
        Height: *mut f64,
        Width: *mut f64,
        Ratio: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_insert_obj(
        Objects: Hobject,
        ObjectsInsert: Hobject,
        ObjectsExtended: *mut Hobject,
        Index: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn insert_obj(
        Objects: Hobject,
        ObjectsInsert: Hobject,
        ObjectsExtended: *mut Hobject,
        Index: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_dl_classifier(FileName: Htuple, DLClassifierHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn read_dl_classifier(
        FileName: *const ::std::os::raw::c_char,
        DLClassifierHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_structured_light_model(
        FileName: Htuple,
        StructuredLightModel: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_structured_light_model(
        FileName: *const ::std::os::raw::c_char,
        StructuredLightModel: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_obj(Objects: Hobject, ObjectsReduced: *mut Hobject, Index: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn remove_obj(Objects: Hobject, ObjectsReduced: *mut Hobject, Index: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_replace_obj(
        Objects: Hobject,
        ObjectsReplace: Hobject,
        Replaced: *mut Hobject,
        Index: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn replace_obj(
        Objects: Hobject,
        ObjectsReplace: Hobject,
        Replaced: *mut Hobject,
        Index: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_dl_classifier(
        DLClassifierHandle: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_dl_classifier(
        DLClassifierHandle: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_structured_light_model(
        StructuredLightModel: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_structured_light_model(
        StructuredLightModel: Hlong,
        SerializedItemHandle: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dl_classifier_param(
        DLClassifierHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_dl_classifier_param(
        DLClassifierHandle: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_operator_timeout(OperatorName: Htuple, Timeout: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn set_operator_timeout(
        OperatorName: *const ::std::os::raw::c_char,
        Timeout: f64,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_structured_light_model_param(
        StructuredLightModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn set_structured_light_model_param(
        StructuredLightModel: Hlong,
        GenParamName: *const ::std::os::raw::c_char,
        GenParamValue: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_dl_classifier_batch(
        BatchImages: Hobject,
        DLClassifierHandle: Htuple,
        BatchLabels: Htuple,
        DLClassifierTrainResultHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_dl_classifier(DLClassifierHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn write_dl_classifier(
        DLClassifierHandle: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_structured_light_model(StructuredLightModel: Htuple, FileName: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn write_structured_light_model(
        StructuredLightModel: Hlong,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_handle(Handle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn clear_handle(Handle: Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_handle(SerializedItem: Htuple, Handle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn deserialize_handle(SerializedItem: Hlong, Handle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_handle_to_integer(Handle: Htuple, CastedHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn handle_to_integer(Handle: Hlong, CastedHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_integer_to_handle(IntegerHandle: Htuple, Handle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn integer_to_handle(IntegerHandle: Hlong, Handle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_handle(Handle: Htuple, SerializedItem: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn serialize_handle(Handle: Hlong, SerializedItem: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_handle(T: Htuple, IsHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_handle(T: Hlong, IsHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_handle_elem(T: Htuple, IsHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_handle_elem(T: Hlong, IsHandle: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_serializable(Tuple: Htuple, IsSerializable: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_serializable(Tuple: Hlong, IsSerializable: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_serializable_elem(Tuple: Htuple, IsSerializableElem: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_serializable_elem(Tuple: Hlong, IsSerializableElem: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_valid_handle(Handle: Htuple, IsValid: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_valid_handle(Handle: Hlong, IsValid: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sem_type(T: Htuple, SemType: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sem_type(T: Hlong, SemType: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_sem_type_elem(T: Htuple, SemTypes: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_sem_type_elem(T: Hlong, SemTypes: *mut ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_dl_model(
        DLModelHandle: Htuple,
        DLSampleBatch: Htuple,
        Outputs: Htuple,
        DLResultBatch: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_clear_dl_model(DLModelHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_copy_dict(
        DictHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        CopiedDictHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dict(DictHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_model_detection(
        Backbone: Htuple,
        NumClasses: Htuple,
        DLModelDetectionParam: Htuple,
        DLModelHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_deserialize_dl_model(
        SerializedItemHandle: Htuple,
        DLModelHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_current_hthread_id(HThreadID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_current_hthread_id(HThreadID: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dict_object(Object: *mut Hobject, DictHandle: Htuple, Key: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dict_param(
        DictHandle: Htuple,
        GenParamName: Htuple,
        Key: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dict_tuple(DictHandle: Htuple, Key: Htuple, Tuple: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_model_param(
        DLModelHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_handle_object(Object: *mut Hobject, Handle: Htuple, Key: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_handle_param(
        Handle: Htuple,
        GenParamName: Htuple,
        Key: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_handle_tuple(Handle: Htuple, Key: Htuple, Tuple: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_system_info(Query: Htuple, Information: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn get_system_info(Query: *const ::std::os::raw::c_char, Information: *mut Hlong)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_interrupt_operator(HThreadID: Htuple, Mode: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn interrupt_operator(HThreadID: Hlong, Mode: *const ::std::os::raw::c_char) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_dict(
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DictHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_dl_model(FileName: Htuple, DLModelHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_message(
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        MessageHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_dict_key(DictHandle: Htuple, Key: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_key_press_event(WindowHandle: Htuple, Char: Htuple, Code: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_key_press_event(
        WindowHandle: Hlong,
        Char: *const ::std::os::raw::c_char,
        Code: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_send_key_release_event(WindowHandle: Htuple, Char: Htuple, Code: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn send_key_release_event(
        WindowHandle: Hlong,
        Char: *const ::std::os::raw::c_char,
        Code: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_serialize_dl_model(DLModelHandle: Htuple, SerializedItemHandle: *mut Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dict_object(Object: Hobject, DictHandle: Htuple, Key: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dict_tuple(DictHandle: Htuple, Key: Htuple, Tuple: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dl_model_param(
        DLModelHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_dl_model_batch(
        DLModelHandle: Htuple,
        DLSampleBatch: Htuple,
        DLTrainResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_dict(
        DictHandle: Htuple,
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_dl_model(DLModelHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_message(
        MessageHandle: Htuple,
        FileName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_area_intersection_rectangle2(
        Rect1Row: Htuple,
        Rect1Column: Htuple,
        Rect1Phi: Htuple,
        Rect1Length1: Htuple,
        Rect1Length2: Htuple,
        Rect2Row: Htuple,
        Rect2Column: Htuple,
        Rect2Phi: Htuple,
        Rect2Length1: Htuple,
        Rect2Length2: Htuple,
        AreaIntersection: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn area_intersection_rectangle2(
        Rect1Row: f64,
        Rect1Column: f64,
        Rect1Phi: f64,
        Rect1Length1: f64,
        Rect1Length2: f64,
        Rect2Row: f64,
        Rect2Column: f64,
        Rect2Phi: f64,
        Rect2Length1: f64,
        Rect2Length2: f64,
        AreaIntersection: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_contour_style(WindowHandle: Htuple, Style: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_shape_model_clutter(
        ClutterRegion: *mut Hobject,
        ModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
        HomMat2D: *mut Htuple,
        ClutterContrast: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_contour_style(WindowHandle: Htuple, Style: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_shape_model_clutter(
        ClutterRegion: Hobject,
        ModelID: Htuple,
        HomMat2D: Htuple,
        ClutterContrast: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_box_3d(
        ObjectModel3DScene: Htuple,
        SideLen1: Htuple,
        SideLen2: Htuple,
        SideLen3: Htuple,
        MinScore: Htuple,
        GenParam: Htuple,
        GrippingPose: *mut Htuple,
        Score: *mut Htuple,
        ObjectModel3DBox: *mut Htuple,
        BoxInformation: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fread_bytes(
        FileHandle: Htuple,
        NumberOfBytes: Htuple,
        ReadData: *mut Htuple,
        IsEOF: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fwrite_bytes(
        FileHandle: Htuple,
        DataToWrite: Htuple,
        NumberOfBytesWritten: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_dl_model_heatmap(
        DLModelHandle: Htuple,
        DLSample: Htuple,
        HeatmapMethod: Htuple,
        TargetClasses: Htuple,
        GenParam: Htuple,
        DLResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_image_metadata(
        Format: Htuple,
        TagName: Htuple,
        FileName: Htuple,
        TagValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn read_image_metadata(
        Format: *const ::std::os::raw::c_char,
        TagName: *const ::std::os::raw::c_char,
        FileName: *const ::std::os::raw::c_char,
        TagValue: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_rectangularity_xld(XLD: Hobject, Rectangularity: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn rectangularity_xld(XLD: Hobject, Rectangularity: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_object_model_3d_attrib(
        ObjectModel3D: Htuple,
        Attributes: Htuple,
        ObjectModel3DOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_remove_object_model_3d_attrib_mod(ObjectModel3D: Htuple, Attributes: Htuple)
    -> Herror;
}
unsafe extern "C" {
    pub fn T_train_dl_model_anomaly_dataset(
        DLModelHandle: Htuple,
        DLSamples: Htuple,
        DLTrainParam: Htuple,
        DLTrainResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_watersheds_marker(Image: Hobject, Markers: Hobject, Basins: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn watersheds_marker(Image: Hobject, Markers: Hobject, Basins: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_image_metadata(
        Format: Htuple,
        TagName: Htuple,
        TagValue: Htuple,
        FileName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn write_image_metadata(
        Format: *const ::std::os::raw::c_char,
        TagName: *const ::std::os::raw::c_char,
        TagValue: *const ::std::os::raw::c_char,
        FileName: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_acosh(T: Htuple, Acosh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_acosh(T: f64, Acosh: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_asinh(T: Htuple, Asinh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_asinh(T: f64, Asinh: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_atanh(T: Htuple, Atanh: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_atanh(T: f64, Atanh: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_cbrt(T: Htuple, Cbrt: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_cbrt(T: f64, Cbrt: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_erf(T: Htuple, Erf: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_erf(T: f64, Erf: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_erfc(T: Htuple, Erfc: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_erfc(T: f64, Erfc: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_exp10(T: Htuple, Exp: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_exp10(T: f64, Exp: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_exp2(T: Htuple, Exp: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_exp2(T: f64, Exp: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_hypot(T1: Htuple, T2: Htuple, Hypot: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_hypot(T1: f64, T2: f64, Hypot: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_lgamma(T: Htuple, LogGamma: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_lgamma(T: f64, LogGamma: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_log2(T: Htuple, Log: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_log2(T: f64, Log: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_tgamma(T: Htuple, Gamma: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_tgamma(T: f64, Gamma: *mut f64) -> Herror;
}
unsafe extern "C" {
    pub fn T_adapt_shape_model_high_noise(
        ImageReduced: Hobject,
        ModelID: Htuple,
        GenParam: Htuple,
        ResultDict: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_dl_pruning_batch(
        DLModelHandleToPrune: Htuple,
        DLPruningHandle: Htuple,
        DLSampleBatch: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_deep_ocr(
        Image: Hobject,
        DeepOcrHandle: Htuple,
        Mode: Htuple,
        DeepOcrResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_deep_ocr(
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DeepOcrHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_pruning(
        DLModelHandle: Htuple,
        Mode: Htuple,
        GenParam: Htuple,
        DLPruningHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_crop_rectangle2(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Row: Htuple,
        Column: Htuple,
        Phi: Htuple,
        Length1: Htuple,
        Length2: Htuple,
        AlignToAxis: Htuple,
        Interpolation: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn crop_rectangle2(
        Image: Hobject,
        ImagePart: *mut Hobject,
        Row: f64,
        Column: f64,
        Phi: f64,
        Length1: f64,
        Length2: f64,
        AlignToAxis: *const ::std::os::raw::c_char,
        Interpolation: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_gen_dl_pruned_model(
        DLModelHandleToPrune: Htuple,
        DLPruningHandle: Htuple,
        DLModelHandlePruned: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deep_ocr_param(
        DeepOcrHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_device_param(
        DLDeviceHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_pruning_param(
        DLPruningHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_query_available_dl_devices(
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLDeviceHandles: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_deep_ocr(FileName: Htuple, DeepOcrHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_deep_ocr_param(
        DeepOcrHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dl_pruning_param(
        DLPruningHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_deep_ocr(DeepOcrHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_optimize_dl_model_for_inference(
        DLModelHandle: Htuple,
        DLDeviceHandle: Htuple,
        Precision: Htuple,
        DLSamples: Htuple,
        GenParam: Htuple,
        DLModelHandleConverted: *mut Htuple,
        ConversionReport: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dl_device_param(
        DLDeviceHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_activation(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        ActivationType: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerActivation: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_batch_normalization(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        Momentum: Htuple,
        Epsilon: Htuple,
        Activation: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerBatchNorm: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_class_id_conversion(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        ConversionMode: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerClassIdConversion: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_concat(
        DLLayerInputs: Htuple,
        LayerName: Htuple,
        Axis: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerConcat: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_convolution(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        KernelSize: Htuple,
        Dilation: Htuple,
        Stride: Htuple,
        NumKernel: Htuple,
        Groups: Htuple,
        Padding: Htuple,
        Activation: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerConvolution: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_dense(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        NumOut: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerDense: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_depth_max(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        DepthMaxMode: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerDepthMaxArg: *mut Htuple,
        DLLayerDepthMaxValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_dropout(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        Probability: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerDropOut: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_elementwise(
        DLLayerInputs: Htuple,
        LayerName: Htuple,
        Operation: Htuple,
        Coefficients: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerElementWise: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_input(
        LayerName: Htuple,
        Shape: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerInput: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_loss_cross_entropy(
        DLLayerInput: Htuple,
        DLLayerTarget: Htuple,
        DLLayerWeights: Htuple,
        LayerName: Htuple,
        LossWeight: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerLossCrossEntropy: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_loss_ctc(
        DLLayerInput: Htuple,
        DLLayerInputLengths: Htuple,
        DLLayerTarget: Htuple,
        DLLayerTargetLengths: Htuple,
        LayerName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerLossCTC: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_loss_distance(
        DLLayerInput: Htuple,
        DLLayerTarget: Htuple,
        DLLayerWeights: Htuple,
        LayerName: Htuple,
        DistanceType: Htuple,
        LossWeight: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerLossDistance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_loss_focal(
        DLLayerInput: Htuple,
        DLLayerTarget: Htuple,
        DLLayerWeights: Htuple,
        DLLayerNormalization: Htuple,
        LayerName: Htuple,
        LossWeight: Htuple,
        Gamma: Htuple,
        ClassWeights: Htuple,
        Type: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerLossFocal: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_loss_huber(
        DLLayerInput: Htuple,
        DLLayerTarget: Htuple,
        DLLayerWeights: Htuple,
        DLLayerNormalization: Htuple,
        LayerName: Htuple,
        LossWeight: Htuple,
        Beta: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerLossHuber: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_lrn(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        LocalSize: Htuple,
        Alpha: Htuple,
        Beta: Htuple,
        K: Htuple,
        NormRegion: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerLRN: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_pooling(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        KernelSize: Htuple,
        Stride: Htuple,
        Padding: Htuple,
        Mode: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerPooling: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_reshape(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        Shape: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerReshape: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_softmax(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerSoftMax: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_transposed_convolution(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        KernelSize: Htuple,
        Stride: Htuple,
        KernelDepth: Htuple,
        Groups: Htuple,
        Padding: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerTransposedConvolution: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_zoom_factor(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        ScaleWidth: Htuple,
        ScaleHeight: Htuple,
        Interpolation: Htuple,
        AlignCorners: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerZoom: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_zoom_size(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        Width: Htuple,
        Height: Htuple,
        Interpolation: Htuple,
        AlignCorners: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerZoom: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_zoom_to_layer_size(
        DLLayerInput: Htuple,
        DLLayerReference: Htuple,
        LayerName: Htuple,
        Interpolation: Htuple,
        AlignCorners: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerZoom: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_model(OutputLayers: Htuple, DLModelHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_generic_shape_model(ModelID: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_find_generic_shape_model(
        SearchImage: Hobject,
        ModelID: Htuple,
        MatchResultID: *mut Htuple,
        NumMatchResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_layer_param(
        DLLayer: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_model_layer(
        DLModelHandle: Htuple,
        LayerNames: Htuple,
        DLLayers: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_model_layer_activations(
        Activations: *mut Hobject,
        DLModelHandle: Htuple,
        LayerName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_model_layer_gradients(
        Gradients: *mut Hobject,
        DLModelHandle: Htuple,
        LayerName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_model_layer_param(
        DLModelHandle: Htuple,
        LayerName: Htuple,
        ParamName: Htuple,
        ParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_dl_model_layer_weights(
        Weights: *mut Hobject,
        DLModelHandle: Htuple,
        LayerName: Htuple,
        WeightsType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_generic_shape_model_param(
        ModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_generic_shape_model_result(
        MatchResultID: Htuple,
        MatchSelector: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_generic_shape_model_result_object(
        Objects: *mut Hobject,
        MatchResultID: Htuple,
        MatchSelector: Htuple,
        GenParamName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_load_dl_model_weights(
        DLModelHandleSource: Htuple,
        DLModelHandleTarget: Htuple,
        ChangesByLayer: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dl_model_layer_param(
        DLModelHandle: Htuple,
        LayerName: Htuple,
        ParamName: Htuple,
        ParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dl_model_layer_weights(
        Weights: Hobject,
        DLModelHandle: Htuple,
        LayerName: Htuple,
        WeightsType: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_generic_shape_model_object(
        Object: Hobject,
        ModelID: Htuple,
        GenParamName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_generic_shape_model_param(
        ModelID: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_train_generic_shape_model(Template: Hobject, ModelID: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_dict_to_json(
        DictHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        JsonString: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_point_line(
        PointX: Htuple,
        PointY: Htuple,
        PointZ: Htuple,
        Point1X: Htuple,
        Point1Y: Htuple,
        Point1Z: Htuple,
        Point2X: Htuple,
        Point2Y: Htuple,
        Point2Z: Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_point_line(
        PointX: f64,
        PointY: f64,
        PointZ: f64,
        Point1X: f64,
        Point1Y: f64,
        Point1Z: f64,
        Point2X: f64,
        Point2Y: f64,
        Point2Z: f64,
        Distance: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_distance_point_pluecker_line(
        PointX: Htuple,
        PointY: Htuple,
        PointZ: Htuple,
        LineDirectionX: Htuple,
        LineDirectionY: Htuple,
        LineDirectionZ: Htuple,
        LineMomentX: Htuple,
        LineMomentY: Htuple,
        LineMomentZ: Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn distance_point_pluecker_line(
        PointX: f64,
        PointY: f64,
        PointZ: f64,
        LineDirectionX: f64,
        LineDirectionY: f64,
        LineDirectionZ: f64,
        LineMomentX: f64,
        LineMomentY: f64,
        LineMomentZ: f64,
        Distance: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_generic_shape_model_object(
        Object: *mut Hobject,
        ModelID: Htuple,
        GenParamName: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_json_to_dict(
        JsonString: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DictHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pluecker_line_to_point_direction(
        LineDirectionX: Htuple,
        LineDirectionY: Htuple,
        LineDirectionZ: Htuple,
        LineMomentX: Htuple,
        LineMomentY: Htuple,
        LineMomentZ: Htuple,
        PointX: *mut Htuple,
        PointY: *mut Htuple,
        PointZ: *mut Htuple,
        DirectionX: *mut Htuple,
        DirectionY: *mut Htuple,
        DirectionZ: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn pluecker_line_to_point_direction(
        LineDirectionX: f64,
        LineDirectionY: f64,
        LineDirectionZ: f64,
        LineMomentX: f64,
        LineMomentY: f64,
        LineMomentZ: f64,
        PointX: *mut f64,
        PointY: *mut f64,
        PointZ: *mut f64,
        DirectionX: *mut f64,
        DirectionY: *mut f64,
        DirectionZ: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_pluecker_line_to_points(
        LineDirectionX: Htuple,
        LineDirectionY: Htuple,
        LineDirectionZ: Htuple,
        LineMomentX: Htuple,
        LineMomentY: Htuple,
        LineMomentZ: Htuple,
        Point1X: *mut Htuple,
        Point1Y: *mut Htuple,
        Point1Z: *mut Htuple,
        Point2X: *mut Htuple,
        Point2Y: *mut Htuple,
        Point2Z: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn pluecker_line_to_points(
        LineDirectionX: f64,
        LineDirectionY: f64,
        LineDirectionZ: f64,
        LineMomentX: f64,
        LineMomentY: f64,
        LineMomentZ: f64,
        Point1X: *mut f64,
        Point1Y: *mut f64,
        Point1Z: *mut f64,
        Point2X: *mut f64,
        Point2Y: *mut f64,
        Point2Z: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_point_direction_to_pluecker_line(
        PointX: Htuple,
        PointY: Htuple,
        PointZ: Htuple,
        DirectionX: Htuple,
        DirectionY: Htuple,
        DirectionZ: Htuple,
        LineDirectionX: *mut Htuple,
        LineDirectionY: *mut Htuple,
        LineDirectionZ: *mut Htuple,
        LineMomentX: *mut Htuple,
        LineMomentY: *mut Htuple,
        LineMomentZ: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn point_direction_to_pluecker_line(
        PointX: f64,
        PointY: f64,
        PointZ: f64,
        DirectionX: f64,
        DirectionY: f64,
        DirectionZ: f64,
        LineDirectionX: *mut f64,
        LineDirectionY: *mut f64,
        LineDirectionZ: *mut f64,
        LineMomentX: *mut f64,
        LineMomentY: *mut f64,
        LineMomentZ: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_point_pluecker_line_to_hom_mat3d(
        TransformationType: Htuple,
        PointX: Htuple,
        PointY: Htuple,
        PointZ: Htuple,
        LineDirectionX: Htuple,
        LineDirectionY: Htuple,
        LineDirectionZ: Htuple,
        LineMomentX: Htuple,
        LineMomentY: Htuple,
        LineMomentZ: Htuple,
        HomMat3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_points_to_pluecker_line(
        Point1X: Htuple,
        Point1Y: Htuple,
        Point1Z: Htuple,
        Point2X: Htuple,
        Point2Y: Htuple,
        Point2Z: Htuple,
        LineDirectionX: *mut Htuple,
        LineDirectionY: *mut Htuple,
        LineDirectionZ: *mut Htuple,
        LineMomentX: *mut Htuple,
        LineMomentY: *mut Htuple,
        LineMomentZ: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn points_to_pluecker_line(
        Point1X: f64,
        Point1Y: f64,
        Point1Z: f64,
        Point2X: f64,
        Point2Y: f64,
        Point2Z: f64,
        LineDirectionX: *mut f64,
        LineDirectionY: *mut f64,
        LineDirectionZ: *mut f64,
        LineMomentX: *mut f64,
        LineMomentY: *mut f64,
        LineMomentZ: *mut f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_dict_tuple_at(
        DictHandle: Htuple,
        Key: Htuple,
        Index: Htuple,
        Value: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_permutation(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        Permutation: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerPermutation: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_dual_quat_trans_point_3d(
        DualQuaternion: Htuple,
        Px: Htuple,
        Py: Htuple,
        Pz: Htuple,
        Tx: *mut Htuple,
        Ty: *mut Htuple,
        Tz: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_equ_histo_image_rect(
        Image: Hobject,
        ImageEquHisto: *mut Hobject,
        Mode: Htuple,
        MaskWidth: Htuple,
        MaskHeight: Htuple,
        MaxContrast: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn equ_histo_image_rect(
        Image: Hobject,
        ImageEquHisto: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
        MaskWidth: Hlong,
        MaskHeight: Hlong,
        MaxContrast: f64,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_measure_param(
        MeasureHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_mean_image_shape(Image: Hobject, Mask: Hobject, ImageMean: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn mean_image_shape(Image: Hobject, Mask: Hobject, ImageMean: *mut Hobject) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_join(Strings: Htuple, Separators: Htuple, JoinedStrings: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_join(
        Strings: *const ::std::os::raw::c_char,
        Separators: *const ::std::os::raw::c_char,
        JoinedStrings: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_compare_memory_block(
        MemoryBlocks1: Htuple,
        MemoryBlocks2: Htuple,
        IsEqual: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_depth_to_space(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        BlockSize: Htuple,
        Mode: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerDepthToSpace: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_identity(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerIdentity: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_memory_block_extern(
        Pointer: Htuple,
        Size: Htuple,
        FreeFunction: Htuple,
        MemoryBlockHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_memory_block_extern_copy(
        Pointer: Htuple,
        Size: Htuple,
        MemoryBlockHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_decrypt_serialized_item(
        EncryptedItemHandle: Htuple,
        DecryptionParam: Htuple,
        SerializedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_encrypt_serialized_item(
        SerializedItemHandle: Htuple,
        EncryptionParam: Htuple,
        EncryptedItemHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_memory_block_ptr(
        MemoryBlockHandle: Htuple,
        Pointer: *mut Htuple,
        Size: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_image_to_memory_block(
        Image: Hobject,
        Format: Htuple,
        FillColor: Htuple,
        MemoryBlockHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_memory_block_to_image(Image: *mut Hobject, MemoryBlockHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_encrypted_item(FileName: Htuple, EncryptedItemHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_memory_block(FileName: Htuple, MemoryBlockHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_constant(Name: Htuple, Value: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_constant(Name: *const ::std::os::raw::c_char, Value: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_is_nan_elem(T: Htuple, IsNaN: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_is_nan_elem(T: f64, IsNaN: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_encrypted_item(EncryptedItemHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_memory_block(MemoryBlockHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_add_image_border(
        Image: Hobject,
        ImageBorder: *mut Hobject,
        Size: Htuple,
        Value: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn add_image_border(
        Image: Hobject,
        ImageBorder: *mut Hobject,
        Size: Hlong,
        Value: Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_deep_counting_model(
        Image: Hobject,
        DeepCountingHandle: Htuple,
        Count: *mut Htuple,
        DeepCountingResult: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_deep_counting_model(
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DeepCountingHandle: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_matmul(
        DLLayerA: Htuple,
        DLLayerB: Htuple,
        LayerName: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerMatMul: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deep_counting_model_param(
        DeepCountingHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_prepare_deep_counting_model(Templates: Hobject, DeepCountingHandle: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_deep_counting_model(FileName: Htuple, DeepCountingHandle: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_deep_counting_model_param(
        DeepCountingHandle: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_deep_counting_model(DeepCountingHandle: Htuple, FileName: Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_create_dl_layer_reduce(
        DLLayerInput: Htuple,
        LayerName: Htuple,
        Operation: Htuple,
        Axes: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
        DLLayerReduce: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_reconstruct_surface_structured_light(
        StructuredLightModel: Htuple,
        ObjectModel3D: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_intersection_region_contour_xld(
        Region: Hobject,
        Contour: Hobject,
        ContourIntersection: *mut Hobject,
        Mode: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn intersection_region_contour_xld(
        Region: Hobject,
        Contour: Hobject,
        ContourIntersection: *mut Hobject,
        Mode: *const ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_repeat(Tuple: Htuple, Num: Htuple, Result: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_repeat(Tuple: Hlong, Num: Hlong, Result: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_repeat_elem(Tuple: Htuple, Num: Htuple, Result: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_repeat_elem(Tuple: Hlong, Num: Hlong, Result: *mut Hlong) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_str_replace(
        String: Htuple,
        Before: Htuple,
        After: Htuple,
        Replaced: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_str_replace(
        String: *const ::std::os::raw::c_char,
        Before: *const ::std::os::raw::c_char,
        After: *const ::std::os::raw::c_char,
        Replaced: *mut ::std::os::raw::c_char,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_apply_deep_matching_3d(
        Images: Hobject,
        Deep3DMatchingModel: Htuple,
        DeepMatchingResults: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_fit_dl_out_of_distribution(
        DLModelHandle: Htuple,
        DLDataset: Htuple,
        GenParam: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_get_deep_matching_3d_param(
        Deep3DMatchingModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_read_deep_matching_3d(FileName: Htuple, Deep3DMatchingModel: *mut Htuple) -> Herror;
}
unsafe extern "C" {
    pub fn T_set_deep_matching_3d_param(
        Deep3DMatchingModel: Htuple,
        GenParamName: Htuple,
        GenParamValue: Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_test_region_points(
        Regions: Hobject,
        Row: Htuple,
        Column: Htuple,
        IsInside: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn test_region_points(
        Regions: Hobject,
        Row: Hlong,
        Column: Hlong,
        IsInside: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_tuple_str_distance(
        String1: Htuple,
        String2: Htuple,
        Mode: Htuple,
        Distance: *mut Htuple,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn tuple_str_distance(
        String1: *const ::std::os::raw::c_char,
        String2: *const ::std::os::raw::c_char,
        Mode: *const ::std::os::raw::c_char,
        Distance: *mut Hlong,
    ) -> Herror;
}
unsafe extern "C" {
    pub fn T_write_deep_matching_3d(Deep3DMatchingModel: Htuple, FileName: Htuple) -> Herror;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
